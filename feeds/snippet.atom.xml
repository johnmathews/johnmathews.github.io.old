<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>John Mathews - snippet</title><link href="https://johnmathews.eu/" rel="alternate"/><link href="https://johnmathews.eu/feeds/snippet.atom.xml" rel="self"/><id>https://johnmathews.eu/</id><updated>2021-05-28T13:48:59+02:00</updated><entry><title>Performance Targets</title><link href="https://johnmathews.eu/performance-targets.html" rel="alternate"/><published>2021-05-28T13:48:59+02:00</published><updated>2021-05-28T13:48:59+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-28:/performance-targets.html</id><summary type="html"/><content type="html">&lt;h2 id="performance-optimizations-for-the-shell-prompt"&gt;Performance Optimizations for the shell prompt&lt;/h2&gt;
&lt;p&gt;Something should happen within 100ms of the users input in order to maintain a
feeling of responsiveness.&lt;/p&gt;
&lt;p&gt;If something happens within 50ms of the trigger event, it will feel almost instant.&lt;/p&gt;
&lt;p&gt;Also, checkout &lt;a href="https://github.com/sharkdp/hyperfine"&gt;hyperfine&lt;/a&gt; for performance benchmarking.&lt;/p&gt;
&lt;p&gt;Lots of useful tips in the original &lt;a href="https://seb.jambor.dev/posts/performance-optimizations-for-the-shell-prompt/"&gt;blog post&lt;/a&gt;.&lt;/p&gt;</content><category term="snippet"/><category term="shell"/></entry><entry><title>vim spell</title><link href="https://johnmathews.eu/vim-spell.html" rel="alternate"/><published>2021-05-27T16:14:57+02:00</published><updated>2021-05-27T16:14:57+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-27:/vim-spell.html</id><summary type="html"/><content type="html">&lt;h2 id="vim-spellcheck-commands"&gt;Vim spellcheck commands&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[s&lt;/code&gt; or &lt;code&gt;]s&lt;/code&gt; → go to next/previous bad word&lt;/li&gt;
&lt;li&gt;&lt;code&gt;z=&lt;/code&gt;  → list of suggestions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zg&lt;/code&gt; → add word to good word list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zug&lt;/code&gt; → remove word from good word list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zw&lt;/code&gt; → add word to bad word list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zuw&lt;/code&gt; → remove word from bad word list&lt;/li&gt;
&lt;/ul&gt;</content><category term="snippet"/><category term="vim"/></entry><entry><title>Grep inside particular files only</title><link href="https://johnmathews.eu/grep-particular-files-only.html" rel="alternate"/><published>2021-05-18T13:11:15+02:00</published><updated>2021-05-18T13:11:15+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-18:/grep-particular-files-only.html</id><summary type="html"/><content type="html">&lt;h2 id="grep-a-subset-of-files-only"&gt;Grep a subset of files only&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -inr --include package.json &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="s1"&gt;'shortcut": {'&lt;/span&gt; . -A &lt;span class="m"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;It’s the &lt;code&gt;--include&lt;/code&gt; flag that does the important part.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-i&lt;/code&gt; → case insensitive&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-n&lt;/code&gt; → print line number&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-r&lt;/code&gt; → recursive from starting page&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; → start in current directory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-A 3&lt;/code&gt; → print the 3 lines below the found line&lt;/li&gt;
&lt;/ul&gt;</content><category term="snippet"/><category term="grep"/><category term="linux"/></entry><entry><title>debug mappings in vim</title><link href="https://johnmathews.eu/vim-debug-mapping.html" rel="alternate"/><published>2021-05-18T10:37:17+02:00</published><updated>2021-05-18T10:37:17+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-18:/vim-debug-mapping.html</id><summary type="html"/><content type="html">&lt;h2 id="view-a-list-of-keyboard-mappings-in-vim"&gt;View a list of keyboard mappings in Vim&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;:map&lt;/code&gt; → show a list of the current keyboard mappings for &lt;em&gt;normal&lt;/em&gt;, &lt;em&gt;visual&lt;/em&gt;, &lt;em&gt;select&lt;/em&gt; and &lt;em&gt;operator pending&lt;/em&gt; modes.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:map!&lt;/code&gt; → show a list of the current keyboard mappings for &lt;em&gt;insert&lt;/em&gt; and &lt;em&gt;command-line&lt;/em&gt; mode&lt;/p&gt;
&lt;p&gt;Top put all the mappings into a convenient text file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;redir&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; vim_maps.txt
&lt;span class="p"&gt;:&lt;/span&gt;map
&lt;span class="p"&gt;:&lt;/span&gt;map&lt;span class="p"&gt;!&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;redir&lt;/span&gt; END
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/2483849/detect-if-a-key-is-bound-to-something-in-vim"&gt;source&lt;/a&gt;
&lt;a href="https://vi.stackexchange.com/questions/7722/how-to-debug-a-mapping"&gt;another source&lt;/a&gt;&lt;/p&gt;</content><category term="snippet"/><category term="vim"/></entry><entry><title>Note taking and knowledge systems</title><link href="https://johnmathews.eu/note-taking-and-knowledge-systems.html" rel="alternate"/><published>2021-05-18T10:25:52+02:00</published><updated>2021-05-18T10:25:52+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-18:/note-taking-and-knowledge-systems.html</id><summary type="html"/><content type="html">&lt;h2 id="note-taking"&gt;Note taking&lt;/h2&gt;
&lt;p&gt;This &lt;a href="https://macwright.com/2019/01/02/paper-notes.html"&gt;blog post&lt;/a&gt; arrives at
the conclusion that the only way to take good paper notes is to organise them
chronologically, and only summarise the content once the notebook is full.&lt;/p&gt;
&lt;p&gt;Keep it simple, trust your intuitions.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;simple&lt;/code&gt; → &lt;code&gt;robust&lt;/code&gt; → &lt;code&gt;reliable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Also, it links to &lt;a href="https://zettelkasten.de/the-archive/"&gt;zettelkasten.de/the-archive&lt;/a&gt;&lt;/p&gt;</content><category term="snippet"/><category term="zettelkasten"/><category term="notes"/><category term="knowledge-system"/></entry><entry><title>Trainging Knowledge Confidence Victory</title><link href="https://johnmathews.eu/trainging-knowledge-confidence-victory.html" rel="alternate"/><published>2021-05-14T16:25:06+02:00</published><updated>2021-05-14T16:25:06+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-14:/trainging-knowledge-confidence-victory.html</id><summary type="html"/><content type="html">&lt;h2 id="training-knowledge-confidence-victory"&gt;Training → Knowledge → Confidence → Victory&lt;/h2&gt;
&lt;p&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;Without training, they lacked knowledge. Without knowledge, they lacked
confidence. Without confidence, they lacked victory.”&lt;/p&gt;
&lt;p&gt;- Julius Caesar&lt;/p&gt;</content><category term="snippet"/><category term="quote"/><category term="caesar"/><category term="wisdom"/></entry><entry><title>email forwarding</title><link href="https://johnmathews.eu/email-forwarding.html" rel="alternate"/><published>2021-05-14T13:44:11+02:00</published><updated>2021-05-14T13:44:11+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-14:/email-forwarding.html</id><summary type="html"/><content type="html">&lt;h2 id="forward-email"&gt;Forward Email&lt;/h2&gt;
&lt;p&gt;I know about &lt;a href="https://improvmx.com/"&gt;ImprovMX&lt;/a&gt;, which used to be great because you could do a lot for
free, but now you only get 1 domain for free.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://forwardemail.net"&gt;ForwardEmail&lt;/a&gt; are 3 times cheaper than ImprovMX, and
I have 2 domains forwarding email. It’s not particularly private, but I can send
and recieve from a domain, for free.&lt;/p&gt;</content><category term="snippet"/><category term="email"/></entry><entry><title>modifying vim colorschemes correctly</title><link href="https://johnmathews.eu/modifying-vim-colorschemes-correctly.html" rel="alternate"/><published>2021-05-13T14:12:00+02:00</published><updated>2021-05-13T14:12:00+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-13:/modifying-vim-colorschemes-correctly.html</id><summary type="html"/><content type="html">&lt;h2 id="nested-auto-commands-for-overriding-colorschemes"&gt;Nested Auto Commands for Overriding Colorschemes&lt;/h2&gt;
&lt;p&gt;A &lt;a href="https://gist.github.com/romainl/379904f91fa40533175dfaec4c833f2f"&gt;snippet&lt;/a&gt;
detailing how to use nested auto commands to apply custom modifications when a
colorscheme is loaded. Perhaps this will stop me &lt;code&gt;:e&lt;/code&gt;-ing so frequently.&lt;/p&gt;</content><category term="snippet"/><category term="vim"/></entry><entry><title>Vim Snippets</title><link href="https://johnmathews.eu/vim-snippets.html" rel="alternate"/><published>2021-05-13T13:04:09+02:00</published><updated>2021-05-13T13:04:09+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-13:/vim-snippets.html</id><summary type="html"/><content type="html">&lt;h2 id="vim-snippets"&gt;Vim Snippets&lt;/h2&gt;
&lt;p&gt;A useful collection of
&lt;a href="https://gist.github.com/romainl/4b9f139d2a8694612b924322de1025ce"&gt;gists&lt;/a&gt; by
&lt;a href="https://gist.github.com/romainl"&gt;Romain Lafourcade&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A &lt;a href="https://gist.github.com/t-mart/610795fcf7998559ea80"&gt;gist&lt;/a&gt; about &lt;code&gt;netrw&lt;/code&gt;.&lt;/p&gt;</content><category term="snippet"/><category term="vim"/><category term="netrw"/></entry><entry><title>Where was a setting set?</title><link href="https://johnmathews.eu/where-was-a-setting-set-.html" rel="alternate"/><published>2021-05-12T11:17:45+02:00</published><updated>2021-05-12T11:17:45+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-12:/where-was-a-setting-set-.html</id><summary type="html"/><content type="html">&lt;h2 id="see-where-vim-is-setting-an-option"&gt;See where Vim is setting an option&lt;/h2&gt;
&lt;p&gt;See where an option was set in vim using the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:verbose set textwidth?&lt;/code&gt;&lt;/p&gt;</content><category term="snippet"/><category term="vim"/></entry><entry><title>Globbing</title><link href="https://johnmathews.eu/globbing.html" rel="alternate"/><published>2021-05-10T16:12:25+02:00</published><updated>2021-05-10T16:12:25+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-10:/globbing.html</id><summary type="html"/><content type="html">&lt;h2 id="globbing"&gt;Globbing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;????&lt;/code&gt; → 4 chars&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; → any number of chars&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[:upper:]&lt;/code&gt; ⇔ &lt;code&gt;[A-Z]&lt;/code&gt; same for &lt;code&gt;[:lower:]&lt;/code&gt; and &lt;code&gt;[:digit:]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[:alpha:]&lt;/code&gt; ⇔ &lt;code&gt;[a-zA-Z]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;[:alnum:]&lt;/code&gt; ⇔ &lt;code&gt;[a-zA-Z0-9]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ls -l [a-d]&lt;/code&gt; → part of a range&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;^ and $ works like in regex&lt;/li&gt;
&lt;li&gt;&lt;code&gt;la a*.{doc,docx}&lt;/code&gt; → &lt;span class="caps"&gt;OR&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ls a*.(doc|docx)&lt;/code&gt; → &lt;span class="caps"&gt;OR&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="snippet"/><category term="linux"/></entry><entry><title>Create Custom Functions in Vim</title><link href="https://johnmathews.eu/create-custom-functions-in-vim.html" rel="alternate"/><published>2021-05-05T18:06:15+02:00</published><updated>2021-05-05T18:06:15+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-05:/create-custom-functions-in-vim.html</id><summary type="html"/><content type="html">&lt;h2 id="vimscript-functions"&gt;Vimscript functions&lt;/h2&gt;
&lt;p&gt;Create a custom command and function to create a new file in vim.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;command&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;nargs&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; Ms &lt;span class="k"&gt;call&lt;/span&gt; s:NewFile&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;q&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;args&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;`

&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; s:NewFile&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;echom&lt;/span&gt; &lt;span class="k"&gt;a&lt;/span&gt;:&lt;span class="nb"&gt;fp&lt;/span&gt;
  execute &lt;span class="s2"&gt;"e "&lt;/span&gt; . &lt;span class="s2"&gt;"~/foo/bar/"&lt;/span&gt; . &lt;span class="k"&gt;a&lt;/span&gt;:&lt;span class="nb"&gt;fp&lt;/span&gt; . &lt;span class="s2"&gt;".ext"&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Useful help:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:h %:h&lt;/code&gt; → filename modifiers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:h expand()&lt;/code&gt; → expand wildcards, including filename modifiers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/54354220/trying-to-create-a-vimscript-function-that-creates-a-new-file"&gt;question on &lt;span class="caps"&gt;SO&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="snippet"/><category term="vim"/></entry><entry><title>Vim Text Objects</title><link href="https://johnmathews.eu/vim-text-objects.html" rel="alternate"/><published>2021-05-05T18:04:40+02:00</published><updated>2021-05-05T18:04:40+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-05:/vim-text-objects.html</id><summary type="html"/><content type="html">&lt;h2 id="better-text-objects-in-vim"&gt;Better text objects in Vim&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;target function arguments&lt;/li&gt;
&lt;li&gt;more types of object&lt;/li&gt;
&lt;li&gt;consistent searching/jumping if you’re not inside the thing you’re targeting&lt;/li&gt;
&lt;li&gt;jump forward or backward&lt;/li&gt;
&lt;li&gt;look for the nth occurrance&lt;/li&gt;
&lt;li&gt;select white space around/inside object&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/wellle/targets.vim"&gt;github&lt;/a&gt;
&lt;a href="https://www.barbarianmeetscoding.com/blog/exploring-vim-plugins-improve-and-extend-your-text-objects-with-targets-vim"&gt;article about a plugin&lt;/a&gt;&lt;/p&gt;</content><category term="snippet"/><category term="vim"/></entry><entry><title>Delete from vim insert mode</title><link href="https://johnmathews.eu/delete-from-vim-insert-mode.html" rel="alternate"/><published>2021-05-05T18:03:07+02:00</published><updated>2021-05-05T18:03:07+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-05:/delete-from-vim-insert-mode.html</id><summary type="html"/><content type="html">&lt;h2 id="delete-stuff-in-vim-without-leaving-insert-mode"&gt;Delete stuff in Vim without leaving insert mode:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;c-h&gt;&lt;/c-h&gt;&lt;/code&gt; - same as backspace&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-w&gt;&lt;/c-w&gt;&lt;/code&gt; - delete previous word&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-u&gt;&lt;/c-u&gt;&lt;/code&gt; - delete everything before cursor (on same row)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-d&gt;&lt;/c-d&gt;&lt;/code&gt; or &lt;code&gt;&lt;c-t&gt;&lt;/c-t&gt;&lt;/code&gt; - (un)indent a row&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-e&gt;&lt;/c-e&gt;&lt;/code&gt; - delete next word (create a mapping in vimrc)&lt;/li&gt;
&lt;/ul&gt;</content><category term="snippet"/><category term="vim"/></entry><entry><title>Global Aliases</title><link href="https://johnmathews.eu/global-aliases.html" rel="alternate"/><published>2021-05-05T18:02:11+02:00</published><updated>2021-05-05T18:02:11+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-05:/global-aliases.html</id><summary type="html"/><content type="html">&lt;h2 id="alias-function-arguments"&gt;Alias function arguments&lt;/h2&gt;
&lt;p&gt;If you want to alias a bunch of arguments for a command, use global aliases&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alias -g foo="some complicated options"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;then
&lt;code&gt;grep some complicated options&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;becomes:
&lt;code&gt;grep foo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.thorsten-hans.com/5-types-of-zsh-aliases/"&gt;https://www.thorsten-hans.com/5-types-of-zsh-aliases/&lt;/a&gt;&lt;/p&gt;</content><category term="snippet"/><category term="alias"/><category term="linux"/></entry><entry><title>Vim yanked text buffer</title><link href="https://johnmathews.eu/vim-yanked-text-buffer.html" rel="alternate"/><published>2021-05-05T18:00:44+02:00</published><updated>2021-05-05T18:00:44+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-05:/vim-yanked-text-buffer.html</id><summary type="html"/><content type="html">&lt;h2 id="vim-register-for-yanked-text"&gt;Vim register for yanked text&lt;/h2&gt;
&lt;p&gt;It’s annoying when you delete something and overwrite your yanked text. &lt;/p&gt;
&lt;p&gt;Use numbered registers!
&lt;code&gt;"0&lt;/code&gt; to &lt;code&gt;"9&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;"0&lt;/code&gt; contains the most recent yank.
&lt;code&gt;"1&lt;/code&gt; contains the most recent deleted text&lt;/p&gt;
&lt;p&gt;&lt;code&gt;"0p&lt;/code&gt; - paste the most recent yank, even if you deleted something after yanking it&lt;/p&gt;</content><category term="snippet"/><category term="vim"/><category term="linux"/><category term="text"/></entry><entry><title>ChezMoi shortcuts</title><link href="https://johnmathews.eu/chezmoi-shortcuts.html" rel="alternate"/><published>2021-05-05T17:58:52+02:00</published><updated>2021-05-05T17:58:52+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-05:/chezmoi-shortcuts.html</id><summary type="html"/><content type="html">&lt;h2 id="chezmoi"&gt;Chezmoi&lt;/h2&gt;
&lt;p&gt;Chezmoi is a great tool for managing dotfiles. This is a shortcut to update the source state based on local changes.&lt;/p&gt;
&lt;p&gt;chezmoi status | cut -c 4- | xargs -I % -p sh -c ‘chezmoi add ~/%’&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/twpayne/chezmoi"&gt;project&lt;/a&gt;&lt;/p&gt;</content><category term="snippet"/><category term="dotfiles"/><category term="alias"/></entry><entry><title>Sleep Is Good</title><link href="https://johnmathews.eu/sleep-is-good.html" rel="alternate"/><published>2021-05-04T17:57:30+02:00</published><updated>2021-05-04T17:57:30+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-04:/sleep-is-good.html</id><summary type="html"/><content type="html">&lt;h2 id="sleep"&gt;Sleep&lt;/h2&gt;
&lt;p&gt;“It enhances your memory and makes you more creative. It makes you look more attractive. It keeps you slim and lowers food cravings. It protects you from cancer and dementia. It wards off colds and the flu. It lowers your risk of heart attacks and stroke, not to mention diabetes. You’ll even feel happier, less depressed, and less anxious.”&lt;/p&gt;
&lt;p&gt;Dr. Walker - why we need to sleep&lt;/p&gt;</content><category term="snippet"/><category term="sleep"/><category term="lifestyle"/></entry><entry><title>Bash Strict Mode</title><link href="https://johnmathews.eu/bash-strict-mode.html" rel="alternate"/><published>2021-05-04T17:56:34+02:00</published><updated>2021-05-04T17:56:34+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-04:/bash-strict-mode.html</id><summary type="html"/><content type="html">&lt;h2 id="bash-strict-mode"&gt;Bash strict mode&lt;/h2&gt;
&lt;p&gt;How to write robust bash scripts:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://redsymbol.net/articles/unofficial-bash-strict-mode/"&gt;Bash Strict Mode&lt;/a&gt;&lt;/p&gt;</content><category term="snippet"/><category term="bash"/><category term="linux"/></entry><entry><title>How To Write An About Page</title><link href="https://johnmathews.eu/how-to-write-an-about-page.html" rel="alternate"/><published>2021-05-04T17:55:03+02:00</published><updated>2021-05-04T17:55:03+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-04:/how-to-write-an-about-page.html</id><summary type="html"/><content type="html">&lt;h2 id="how-to-write-an-about-page"&gt;How to write an About Page&lt;/h2&gt;
&lt;p&gt;An often recommended &lt;a href="https://www.kaleighmoore.com/blog/2020/5/14/how-to-write-a-stellar-about-page"&gt;blog post&lt;/a&gt; by Kaleigh Moore about writing a good about page.&lt;/p&gt;</content><category term="snippet"/><category term="writing"/></entry><entry><title>Domain Name Registraars</title><link href="https://johnmathews.eu/domain-name-registraars.html" rel="alternate"/><published>2021-05-03T17:49:59+02:00</published><updated>2021-05-03T17:49:59+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-03:/domain-name-registraars.html</id><summary type="html"/><content type="html">&lt;h2 id="domain-name-registrars"&gt;Domain name registrars&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://namecheap.com"&gt;https://namecheap.com&lt;/a&gt; (cheap)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://instantdomainsearch.com"&gt;https://instantdomainsearch.com&lt;/a&gt; (variants)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://iwantmyname.com"&gt;https://iwantmyname.com&lt;/a&gt; (tld comparison)&lt;/li&gt;
&lt;/ul&gt;</content><category term="snippet"/><category term="web"/></entry><entry><title>Honest Troubleshooting Code of Conduct</title><link href="https://johnmathews.eu/honest-troubleshooting-code-of-conduct.html" rel="alternate"/><published>2021-05-03T17:46:28+02:00</published><updated>2021-05-03T17:46:28+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-03:/honest-troubleshooting-code-of-conduct.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;a href="http://rachelbythebay.com/w/2021/05/01/code/"&gt;The Honest Troubleshooting Code of Conduct&lt;/a&gt;&lt;/p&gt;</content><category term="snippet"/></entry><entry><title>Linux Directories</title><link href="https://johnmathews.eu/linux-etsy-dir.html" rel="alternate"/><published>2021-05-02T17:43:08+02:00</published><updated>2021-05-02T17:43:08+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-02:/linux-etsy-dir.html</id><summary type="html"/><content type="html">&lt;h2 id="linux-filesystem-hierarchy-standard"&gt;Linux Filesystem Hierarchy Standard&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;/etc&lt;/code&gt; (etsy) → “etcetera” or “editable text config” → a place to put config files. &lt;/p&gt;
&lt;p&gt;Originally, the root directory had &lt;code&gt;/boot&lt;/code&gt; for booting, &lt;code&gt;/dev&lt;/code&gt; for devices… One dir for each type of thing. But this put config in many places. so &lt;code&gt;etc/&lt;/code&gt; became convention&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard"&gt;Filesystem Hierarchy Standard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pathname.com/fhs/pub/fhs-2.3.html"&gt;fhs-2.3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="snippet"/><category term="linux"/><category term="filesystem"/></entry><entry><title>Browser Security</title><link href="https://johnmathews.eu/browser-security.html" rel="alternate"/><published>2021-04-30T22:24:40+02:00</published><updated>2021-04-30T22:24:40+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-30:/browser-security.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;a href="https://blog.vnaik.com/posts/web-attacks.html"&gt;Blog post&lt;/a&gt; about browser/Web-app security, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;CSRF&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;CORS&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; Security Headers &lt;/li&gt;
&lt;/ul&gt;</content><category term="snippet"/><category term="xss"/><category term="cors"/><category term="http"/></entry><entry><title>HTML Templates</title><link href="https://johnmathews.eu/html-templates.html" rel="alternate"/><published>2021-04-30T17:34:17+02:00</published><updated>2021-04-30T17:34:17+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-30:/html-templates.html</id><summary type="html"/><content type="html">&lt;h2 id="html-templates"&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt; Templates&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="wickedtemplates.com"&gt;wickedtemplates.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="cruip.com"&gt;cruip.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://versoly.com/templates"&gt;https://versoly.com/templates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="snippet"/><category term="html"/><category term="jam"/></entry><entry><title>Interview With Linus Torvalds</title><link href="https://johnmathews.eu/interview-with-linus-torvalds.html" rel="alternate"/><published>2021-04-29T17:38:33+02:00</published><updated>2021-04-29T17:38:33+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-29:/interview-with-linus-torvalds.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;a href="https://tag1consulting.com/blog/interview-linus-torvalds-linux-and-git:"&gt;Interview&lt;/a&gt; with Linus Torvalds:&lt;/p&gt;
&lt;p&gt;I don’t want to claim that programming is an art, because it really is mostly
just about ‘good engineering’. I’m a big believer in Thomas Edison’s ‘one
percent inspiration and ninety-nine percent perspiration’ mantra. It’s almost
all about the little details and the everyday grunt-work.&lt;/p&gt;
&lt;p&gt;But there is that occasional ‘inspiration’ part, that ‘good taste’ thing that
is about more than just solving some problem - solving it cleanly and nicely
and yes, even beautifully.&lt;/p&gt;</content><category term="snippet"/><category term="linux"/><category term="interview"/><category term="linus"/></entry><entry><title>RPC calls</title><link href="https://johnmathews.eu/rpc.html" rel="alternate"/><published>2021-04-29T17:37:38+02:00</published><updated>2021-04-29T17:37:38+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-29:/rpc.html</id><summary type="html"/><content type="html">&lt;p&gt;A &lt;span class="caps"&gt;RPC&lt;/span&gt; is when an executable causes a procedure (subroutine) to execute on
another computer, It’s coded as if it were a normal (local) subroutine. You
don’t explicitly code the details for the remote interaction. You write the
same code whether the subroutine is local or remote.&lt;/p&gt;</content><category term="snippet"/><category term="rpc"/><category term="linux"/></entry><entry><title>A useful blog</title><link href="https://johnmathews.eu/useful-blog.html" rel="alternate"/><published>2021-04-29T17:35:17+02:00</published><updated>2021-04-29T17:35:17+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-29:/useful-blog.html</id><summary type="html"/><content type="html">&lt;p&gt;Just found a really useful &lt;a href="https://seb.jambor.dev"&gt;blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Interesting &lt;a href="https://seb.jambor.dev/posts/cd-is-not-a-program/"&gt;discussion&lt;/a&gt; about the difference between builtins and executables,&lt;/p&gt;
&lt;p&gt;Nice examples of using &lt;code&gt;fzf&lt;/code&gt; to &lt;a href="https://seb.jambor.dev/posts/improving-shell-workflows-with-fzf/"&gt;improve workflows&lt;/a&gt;.&lt;/p&gt;</content><category term="snippet"/><category term="linux"/><category term="shell"/><category term="fzf"/><category term="workflow"/><category term="zsh"/><category term="bash"/><category term="builtin"/></entry><entry><title>lsblk command</title><link href="https://johnmathews.eu/lsblk-command.html" rel="alternate"/><published>2021-04-28T12:18:40+02:00</published><updated>2021-04-28T12:18:40+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-28:/lsblk-command.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;code&gt;lsblk&lt;/code&gt; is a command to get info about connected devices.&lt;/p&gt;
&lt;p&gt;Used when attaching drives.&lt;/p&gt;</content><category term="snippet"/><category term="unix"/><category term="cli"/></entry><entry><title>Ranger file manager</title><link href="https://johnmathews.eu/ranger-file-manager.html" rel="alternate"/><published>2021-04-28T11:53:44+02:00</published><updated>2021-04-28T11:53:44+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-28:/ranger-file-manager.html</id><summary type="html"/><content type="html">&lt;p&gt;Ranger is a console based file manager with vi key bindings.&lt;/p&gt;
&lt;p&gt;Install it with &lt;code&gt;brew install ranger&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Launch it with &lt;code&gt;ranger&lt;/code&gt;&lt;/p&gt;</content><category term="snippet"/><category term="ranger"/><category term="unix"/><category term="vim"/><category term="tools"/></entry><entry><title>Vim Regex</title><link href="https://johnmathews.eu/vim-regex.html" rel="alternate"/><published>2021-04-28T11:37:58+02:00</published><updated>2021-04-28T11:37:58+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-28:/vim-regex.html</id><summary type="html"/><content type="html">&lt;p&gt;This is a great article about using regular expressions in Vim:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marcelfischer.eu/blog/2019/checkbox-regex/"&gt;marcelfischer.eu/blog/2019/checkbox-regex/&lt;/a&gt;&lt;/p&gt;</content><category term="snippet"/><category term="vim"/><category term="regex"/></entry><entry><title>where command</title><link href="https://johnmathews.eu/where-command.html" rel="alternate"/><published>2021-04-25T22:39:05+02:00</published><updated>2021-04-25T22:39:05+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-25:/where-command.html</id><summary type="html"/><content type="html">&lt;p&gt;Show all known locations of an executable
&lt;code&gt;where &lt;executable&gt;&lt;/executable&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;See a list of all builtin commands
&lt;code&gt;man where&lt;/code&gt;&lt;/p&gt;</content><category term="snippet"/><category term="unix"/><category term="macOS"/><category term="cli"/><category term="bash"/></entry><entry><title>alias to real</title><link href="https://johnmathews.eu/alias-real.html" rel="alternate"/><published>2021-04-20T22:40:09+02:00</published><updated>2021-04-20T22:40:09+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-20:/alias-real.html</id><summary type="html"/><content type="html">&lt;p&gt;Make aliased files the real file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; f in &lt;span class="k"&gt;$(&lt;/span&gt;find . -type l -maxdepth &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt; cp --remove-destination &lt;span class="k"&gt;$(&lt;/span&gt;readlink &lt;span class="nv"&gt;$f&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="snippet"/><category term="macos"/><category term="linux"/><category term="cli"/><category term="bash"/></entry><entry><title>tmux-window-reorg</title><link href="https://johnmathews.eu/tmux-window-reorg.html" rel="alternate"/><published>2021-04-19T22:42:42+02:00</published><updated>2021-04-19T22:42:42+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-19:/tmux-window-reorg.html</id><summary type="html"/><content type="html">&lt;p&gt;Reorganize tmux windows&lt;/p&gt;
&lt;p&gt;&lt;code&gt;swap-window -s 3 -t 1&lt;/code&gt;&lt;/p&gt;</content><category term="snippet"/><category term="tmux"/><category term="macos"/><category term="linux"/><category term="cli"/></entry><entry><title>vim save sudo</title><link href="https://johnmathews.eu/vim-save-sudo.html" rel="alternate"/><published>2021-04-17T22:44:10+02:00</published><updated>2021-04-17T22:44:10+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-17:/vim-save-sudo.html</id><summary type="html"/><content type="html">&lt;p&gt;Save a Vim file with sudo when you opened it without sudo-ing:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:w !sudo tee %&lt;/code&gt;&lt;/p&gt;</content><category term="snippet"/><category term="vim"/><category term="macos"/><category term="linux"/></entry><entry><title>climbing higher</title><link href="https://johnmathews.eu/climbing-higher.html" rel="alternate"/><published>2021-04-16T22:45:44+02:00</published><updated>2021-04-16T22:45:44+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-16:/climbing-higher.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;em&gt;The trouble with climbing higher is that eventually you lose sight of the ground.&lt;/em&gt;&lt;/p&gt;</content><category term="snippet"/><category term="advice"/><category term="thoughts"/><category term="meta"/></entry><entry><title>broot</title><link href="https://johnmathews.eu/broot.html" rel="alternate"/><published>2021-04-13T22:49:26+02:00</published><updated>2021-04-13T22:49:26+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-13:/broot.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;a href="https://dystroy.org/broot/"&gt;Broot&lt;/a&gt; is a tool that shows the contents of a directory on one screen, even its got lots of files or sub-directories.&lt;/p&gt;</content><category term="snippet"/><category term="broot"/><category term="macos"/><category term="cli"/></entry><entry><title>Adding Keyboard Navigation</title><link href="https://johnmathews.eu/adding-keyboard-navigation.html" rel="alternate"/><published>2021-04-12T22:50:48+02:00</published><updated>2021-04-12T22:50:48+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-12:/adding-keyboard-navigation.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;em&gt;I added keyboard navigation to my blog and it works really well. Now I find
myself trying to use the same shortcuts on other sites.&lt;/em&gt;&lt;/p&gt;</content><category term="snippet"/><category term="blog"/><category term="jam"/><category term="jquery"/></entry><entry><title>github actions blog</title><link href="https://johnmathews.eu/github-actions-blog.html" rel="alternate"/><published>2021-04-10T22:53:39+02:00</published><updated>2021-04-10T22:53:39+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-10:/github-actions-blog.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;em&gt;I should see if I can use GitHub actions to generate html from markdown and run
some shell and python scripts.&lt;/em&gt;&lt;/p&gt;</content><category term="snippet"/><category term="github"/><category term="blog"/></entry><entry><title>socially acceptable mistakes</title><link href="https://johnmathews.eu/socially-acceptable-mistakes.html" rel="alternate"/><published>2021-04-10T22:52:26+02:00</published><updated>2021-04-10T22:52:26+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-10:/socially-acceptable-mistakes.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;em&gt;Its more socially acceptable to make mistakes and errors of omission than commission.&lt;/em&gt;&lt;/p&gt;</content><category term="snippet"/><category term="meta"/><category term="thinking"/><category term="advice"/></entry><entry><title>du command</title><link href="https://johnmathews.eu/du-command.html" rel="alternate"/><published>2021-04-07T22:55:19+02:00</published><updated>2021-04-07T22:55:19+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-07:/du-command.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;code&gt;du&lt;/code&gt; is a tool for showing disk usage.&lt;/p&gt;
&lt;p&gt;There is a similar tool, with a list of other similar tools
&lt;a href="https://dev.yorhel.nl/ncdu`"&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="snippet"/><category term="cli"/><category term="unix"/><category term="macos"/></entry><entry><title>safe bash scripting</title><link href="https://johnmathews.eu/safe-bash-scripting.html" rel="alternate"/><published>2021-04-06T22:56:14+02:00</published><updated>2021-04-06T22:56:14+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-06:/safe-bash-scripting.html</id><summary type="html"/><content type="html">&lt;p&gt;An &lt;a href="https://t.co/MRxnbHgryD?amp=1"&gt;example&lt;/a&gt; of a safe, good, robust bash file skeleton.&lt;/p&gt;</content><category term="snippet"/><category term="bash"/></entry><entry><title>running a binary in debian</title><link href="https://johnmathews.eu/running-a-binary-in-debian.html" rel="alternate"/><published>2021-04-05T22:58:02+02:00</published><updated>2021-04-05T22:58:02+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-05:/running-a-binary-in-debian.html</id><summary type="html"/><content type="html">&lt;p&gt;I was running a binary in Debian that was complaining about an environment
variable not existing. I moved the binary into a $&lt;span class="caps"&gt;PATH&lt;/span&gt; directory and logged in as a
sudo user. Why did this solve the problem?&lt;/p&gt;</content><category term="snippet"/><category term="debian"/><category term="binary"/><category term="path"/></entry><entry><title>creating slowly</title><link href="https://johnmathews.eu/creating-slowly.html" rel="alternate"/><published>2021-04-01T23:02:09+02:00</published><updated>2021-04-01T23:02:09+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-01:/creating-slowly.html</id><summary type="html"/><content type="html">&lt;p&gt;As a hacker, or creator, or whatever the best label is, I always want to create
something (usually code) and have it finished.&lt;/p&gt;
&lt;p&gt;But a strange creativity and productivity boost comes from dabbling, dipping in
and out.&lt;/p&gt;
&lt;p&gt;I think that if the technical challenges aren’t too hard, then the main
criteria for success is creativity.&lt;/p&gt;
&lt;p&gt;Creativity needs time away from the project, and sleep, to bubble up and let
ideas grow.&lt;/p&gt;
&lt;p&gt;Ultimately, the most successful path is usually the most interesting, because
success has more consequences than failure. “Interesting” requires elements of
novelty and surprise, and without creativity these elements can’t flourish. 3/n&lt;/p&gt;
&lt;p&gt;Dabbling results in more creativity than 6+ hours of strenuous work, and is
more likely to give you satisfying results.&lt;/p&gt;</content><category term="snippet"/><category term="meta"/><category term="thinking"/><category term="advice"/></entry><entry><title>arrow syntax in bash</title><link href="https://johnmathews.eu/arrow-syntax-in-bash.html" rel="alternate"/><published>2021-04-01T22:59:00+02:00</published><updated>2021-04-01T22:59:00+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-01:/arrow-syntax-in-bash.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;code&gt;bar &amp;lt;&amp;lt; foo&lt;/code&gt; bar will stop reading input when it reached “foo”.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bar &amp;lt;&amp;lt;&amp;lt; "foo"&lt;/code&gt; foo is all the input. bar wont run interactively.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bar &amp;lt; &amp;lt;(foo:list)&lt;/code&gt; process subscription. Kind of like piping in the output of multiple commands.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://askubuntu.com/questions/678915/whats-the-difference-between-and-in-bash"&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;</content><category term="snippet"/><category term="bash"/><category term="syntax"/></entry><entry><title>pretty print json in typescript</title><link href="https://johnmathews.eu/pretty-print-json-in-typescript.html" rel="alternate"/><published>2021-03-31T23:04:25+02:00</published><updated>2021-03-31T23:04:25+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-31:/pretty-print-json-in-typescript.html</id><summary type="html"/><content type="html">&lt;p&gt;Pretty print &lt;span class="caps"&gt;JSON&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;console.info(`&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;`);
&lt;/pre&gt;&lt;/div&gt;</content><category term="snippet"/><category term="typescript"/><category term="json"/><category term="syntax"/></entry><entry><title>useful business</title><link href="https://johnmathews.eu/useful-business.html" rel="alternate"/><published>2021-03-30T23:07:07+02:00</published><updated>2021-03-30T23:07:07+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-30:/useful-business.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;em&gt;&lt;a href="http://analystsnow.com"&gt;analystsnow.com&lt;/a&gt; looks like a really useful business.&lt;/em&gt;&lt;/p&gt;</content><category term="snippet"/><category term="entrepreneur"/><category term="saas"/></entry><entry><title>frantic distraction</title><link href="https://johnmathews.eu/frantic-distraction.html" rel="alternate"/><published>2021-03-30T23:05:59+02:00</published><updated>2021-03-30T23:05:59+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-30:/frantic-distraction.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;em&gt;Frantic distraction via productive procrastination is exhausting, and useful.&lt;/em&gt;&lt;/p&gt;</content><category term="snippet"/><category term="meta"/><category term="thinking"/></entry><entry><title>vim split rearranging</title><link href="https://johnmathews.eu/vim-split-rearranging.html" rel="alternate"/><published>2021-03-29T23:09:27+02:00</published><updated>2021-03-29T23:09:27+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-29:/vim-split-rearranging.html</id><summary type="html"/><content type="html">&lt;h2 id="rearrange-splits-in-vim"&gt;Rearrange splits in Vim&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;c-w&gt;x&lt;/c-w&gt;&lt;/code&gt; - swap buffers, but keep arrangement the same&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;c-w&gt;H&lt;/c-w&gt;&lt;/code&gt; - make the current split cover the left of the screen.&lt;/p&gt;
&lt;p&gt;J, K, L covers the bottom, top, right of the screen&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://thoughtbot.com/blog/vim-splits-move-faster-and-more-naturally"&gt;blog post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/6053301/easier-way-to-navigate-between-vim-split-panes"&gt;stack overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="snippet"/><category term="vim"/></entry><entry><title>pelican plugin guide</title><link href="https://johnmathews.eu/pelican-plugin-guide.html" rel="alternate"/><published>2021-03-29T23:07:52+02:00</published><updated>2021-03-29T23:07:52+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-29:/pelican-plugin-guide.html</id><summary type="html"/><content type="html">&lt;p&gt;A &lt;a href="https://blog.geographer.fr/pelican-plugins"&gt;guide&lt;/a&gt;
 about writing plugins for Pelican.&lt;/p&gt;
&lt;p&gt;Thanks @geographeur&lt;/p&gt;</content><category term="snippet"/><category term="pelican"/><category term="plugin"/><category term="guide"/></entry><entry><title>read and write same file</title><link href="https://johnmathews.eu/read-and-write-same-file.html" rel="alternate"/><published>2021-03-24T23:11:55+01:00</published><updated>2021-03-24T23:11:55+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-24:/read-and-write-same-file.html</id><summary type="html"/><content type="html">&lt;p&gt;Tried to read and write the same file in a pipeline, and got caught out by a race condition (why is the file empty?!). Do this instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;some_script &amp;lt; file &amp;gt; smscrpt.&lt;span class="nv"&gt;$$&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; mv smscrpt.&lt;span class="nv"&gt;$$&lt;/span&gt; file &lt;span class="o"&gt;||&lt;/span&gt; rm smscrpt.&lt;span class="nv"&gt;$$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;||&lt;/code&gt; removes the temporary file if it errors.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$$&lt;/code&gt; is the process &lt;span class="caps"&gt;ID&lt;/span&gt; and ensures that you always have a unique temporary
file name.&lt;/p&gt;</content><category term="snippet"/><category term="shell"/><category term="pipe"/><category term="syntax"/><category term="bash"/></entry><entry><title>json tools</title><link href="https://johnmathews.eu/json-tools.html" rel="alternate"/><published>2021-03-24T23:10:45+01:00</published><updated>2021-03-24T23:10:45+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-24:/json-tools.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;jj&lt;/code&gt; - A &lt;a href="https://github.com/tidwall/jj"&gt;stream editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jq&lt;/code&gt; - A json processor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python -m json.tool&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I like &lt;code&gt;jq&lt;/code&gt; for pretty printing &lt;span class="caps"&gt;JSON&lt;/span&gt; output, &lt;code&gt;jj&lt;/code&gt; for making &lt;span class="caps"&gt;JSON&lt;/span&gt; pretty or condensed.&lt;/p&gt;
&lt;p&gt;This was really useful when optimizing the search index for this blog.&lt;/p&gt;</content><category term="snippet"/><category term="json"/></entry><entry><title>docker commands</title><link href="https://johnmathews.eu/docker-commands.html" rel="alternate"/><published>2021-03-17T23:14:43+01:00</published><updated>2021-03-17T23:14:43+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-17:/docker-commands.html</id><summary type="html"/><content type="html">&lt;p&gt;Commands for working with Docker containers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -d ...
docker logs -f &lt;id&gt;
docker run -it ...
docker run -itd
docker container attach &lt;id&gt;
&lt;c-p&gt;&lt;c-q&gt; -&amp;gt; detach from container interactively
&lt;/c-q&gt;&lt;/c-p&gt;&lt;/id&gt;&lt;/id&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/34029680/docker-detached-mode"&gt;stack overflow&lt;/a&gt;&lt;/p&gt;</content><category term="snippet"/><category term="docker"/></entry><entry><title>pipe a script files into bash</title><link href="https://johnmathews.eu/pipe-a-script-files-into-bash.html" rel="alternate"/><published>2021-03-11T23:16:13+01:00</published><updated>2021-03-11T23:16:13+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-11:/pipe-a-script-files-into-bash.html</id><summary type="html"/><content type="html">&lt;p&gt;Pipe a script file into bash, probably one you just &lt;code&gt;curl&lt;/code&gt;-ed&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -sSfL https://example.com/install.sh &lt;span class="p"&gt;|&lt;/span&gt; sh -s
&lt;/pre&gt;&lt;/div&gt;</content><category term="snippet"/><category term="bash"/><category term="syntax"/><category term="shell"/></entry><entry><title>split long output onto multiple lines</title><link href="https://johnmathews.eu/split-long-output-onto-multiple-lines.html" rel="alternate"/><published>2021-03-10T23:19:12+01:00</published><updated>2021-03-10T23:19:12+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-10:/split-long-output-onto-multiple-lines.html</id><summary type="html"/><content type="html">&lt;h2 id="split-long-strings"&gt;Split long strings&lt;/h2&gt;
&lt;p&gt;Split long strings (or command outputs) onto multiple lines
Find and replace a particular char (maybe &lt;code&gt;:&lt;/code&gt;) with a &lt;code&gt;\n&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;tr&lt;/span&gt; &lt;span class="s1"&gt;':'&lt;/span&gt; &lt;span class="s1"&gt;'\n'&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="s1"&gt;'s/:/\n/g'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="snippet"/><category term="bash"/><category term="linux"/></entry><entry><title>ripgrep regret</title><link href="https://johnmathews.eu/ripgrep-regret.html" rel="alternate"/><published>2021-03-10T23:18:09+01:00</published><updated>2021-03-10T23:18:09+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-10:/ripgrep-regret.html</id><summary type="html"/><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Without noticing, create a .gitignore file with a single * in it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spend a day trying to understand why ripgrep has stopped working for only 1 project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sad face.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="snippet"/><category term="ripgrep"/><category term="fail"/></entry><entry><title>teaching kids about money</title><link href="https://johnmathews.eu/teaching-kids-about-money.html" rel="alternate"/><published>2021-03-05T23:23:46+01:00</published><updated>2021-03-05T23:23:46+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-05:/teaching-kids-about-money.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;em&gt;Teaching my kids about money and work is having an effect.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Yesterday, my daughter made a painting for me and asked my to buy it using
pretend money.&lt;/em&gt;&lt;/p&gt;</content><category term="snippet"/><category term="parenting"/><category term="kids"/><category term="money"/><category term="teaching"/></entry><entry><title>stop prepending sudo to docker commands</title><link href="https://johnmathews.eu/stop-prepending-sudo-to-docker-commands.html" rel="alternate"/><published>2021-03-05T23:22:58+01:00</published><updated>2021-03-05T23:22:58+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-05:/stop-prepending-sudo-to-docker-commands.html</id><summary type="html"/><content type="html">&lt;p&gt;Stop prepending docker commands with sudo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo groupadd docker -&amp;gt; make the group 
sudo gpasswd -a &lt;span class="nv"&gt;$USER&lt;/span&gt; docker -&amp;gt; add &lt;span class="nv"&gt;$USER&lt;/span&gt; to the docker group
newgrp docker -&amp;gt; activate the changes
&lt;/pre&gt;&lt;/div&gt;</content><category term="snippet"/><category term="sudo"/><category term="docker"/><category term="linux"/></entry><entry><title>cat and a new line</title><link href="https://johnmathews.eu/cat-and-a-new-line.html" rel="alternate"/><published>2021-03-05T23:21:43+01:00</published><updated>2021-03-05T23:21:43+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-05:/cat-and-a-new-line.html</id><summary type="html"/><content type="html">&lt;p&gt;If you’re &lt;code&gt;cat&lt;/code&gt;-ing a file and the bash prompt doesn’t start on a new line (cos
the file you displayed using cat doesn’t end with a new line char) the
following will fix it:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cat &lt;filename&gt; ; echo&lt;/filename&gt;&lt;/code&gt;&lt;/p&gt;</content><category term="snippet"/><category term="cat"/><category term="linux"/><category term="bash"/><category term="shell"/></entry><entry><title>creating users with sudo permissions</title><link href="https://johnmathews.eu/creating-users-with-sudo-permissions.html" rel="alternate"/><published>2021-03-04T23:25:50+01:00</published><updated>2021-03-04T23:25:50+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-04:/creating-users-with-sudo-permissions.html</id><summary type="html"/><content type="html">&lt;p&gt;Creating users with sudo permissions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;adduser -m &lt;username&gt;
usermod -aG sudo &lt;username&gt;
&lt;/username&gt;&lt;/username&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CentOS:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;adduser -m &lt;username&gt;
passwd &lt;username&gt;
usermod -aG wheel &lt;username&gt;
&lt;/username&gt;&lt;/username&gt;&lt;/username&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(wheel is a usergroup with sudo permissions)&lt;/p&gt;</content><category term="snippet"/><category term="sudo"/><category term="linux"/><category term="user"/><category term="admin"/></entry><entry><title>disk full and usage commands</title><link href="https://johnmathews.eu/disk-full-and-usage-commands.html" rel="alternate"/><published>2021-03-03T23:27:11+01:00</published><updated>2021-03-03T23:27:11+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-03:/disk-full-and-usage-commands.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;code&gt;df -h&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Show disk space&lt;/p&gt;
&lt;p&gt;&lt;code&gt;du -hs .&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;See how big the current dir is&lt;/p&gt;</content><category term="snippet"/><category term="linux"/><category term="du"/><category term="df"/><category term="shell"/><category term="cli"/></entry><entry><title>cloning git repos using lfs</title><link href="https://johnmathews.eu/cloning-git-repos-using-lfs.html" rel="alternate"/><published>2021-03-03T23:24:35+01:00</published><updated>2021-03-03T23:24:35+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-03:/cloning-git-repos-using-lfs.html</id><summary type="html"/><content type="html">&lt;p&gt;Cloning large repos, or repos with large files in them, doesn’t work with &lt;code&gt;git
clone ...&lt;/code&gt; you need to use &lt;code&gt;git lfs clone ...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So why is &lt;code&gt;git lfs clone&lt;/code&gt; deprecated? What’s the replacement? &lt;/p&gt;</content><category term="snippet"/><category term="git"/><category term="git-lfs"/></entry><entry><title>nohup</title><link href="https://johnmathews.eu/nohup.html" rel="alternate"/><published>2021-03-02T23:30:02+01:00</published><updated>2021-03-02T23:30:02+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-02:/nohup.html</id><summary type="html"/><content type="html">&lt;p&gt;Use &lt;code&gt;nohup&lt;/code&gt; to keep a curl process running even when the terminal (tty?) session autocloses at 3am.&lt;/p&gt;</content><category term="snippet"/><category term="linux"/><category term="cli"/></entry><entry><title>shell comparisons</title><link href="https://johnmathews.eu/shell-comparisons.html" rel="alternate"/><published>2021-03-02T23:28:35+01:00</published><updated>2021-03-02T23:28:35+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-02:/shell-comparisons.html</id><summary type="html"/><content type="html">&lt;p&gt;You can group shells into groups:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ksh&lt;/code&gt; - korn shell and zshell&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sh&lt;/code&gt; - bourne shell and bash (the bourne again shell)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Because&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;zsh&lt;/code&gt; isn’t a superset of bash.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bash&lt;/code&gt; is a superset of the bourne shell.&lt;/li&gt;
&lt;/ul&gt;</content><category term="snippet"/><category term="zsh"/><category term="bash"/><category term="bsh"/><category term="linux"/><category term="cli"/></entry><entry><title>emacs dreaming</title><link href="https://johnmathews.eu/emacs-dreaming.html" rel="alternate"/><published>2020-11-27T23:31:01+01:00</published><updated>2020-11-27T23:31:01+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2020-11-27:/emacs-dreaming.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;em&gt;Two nights ago, I dreamed I was experimenting with Emacs..&lt;/em&gt;&lt;/p&gt;</content><category term="snippet"/><category term="emacs"/><category term="dream"/></entry></feed>