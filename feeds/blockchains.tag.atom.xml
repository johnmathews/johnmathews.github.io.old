<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>blog - Blockchains</title><link href="/" rel="alternate"></link><link href="feeds/blockchains.tag.atom.xml" rel="self"></link><id>/</id><updated>2017-08-12T22:28:00+02:00</updated><entry><title>Create a Multi-Signature Ethereum wallet usingÂ Parity</title><link href="ethereum-parity-multisig-wallet.html" rel="alternate"></link><published>2017-08-12T22:28:00+02:00</published><updated>2017-08-12T22:28:00+02:00</updated><author><name>John Mathews</name></author><id>tag:None,2017-08-12:ethereum-parity-multisig-wallet.html</id><summary type="html">&lt;p&gt;Set up and use Parity to create and manage multi-signature Ethereum wallets, edit the wallet&amp;#8217;s settings and view pending and past&amp;nbsp;transactions&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently set up a multi-sig Ethereum wallet and I couldn&amp;#8217;t find clear instructions.  Here they are, I hope these instructions are useful for someone looking to get&amp;nbsp;started. &lt;/p&gt;
&lt;p&gt;You&amp;#8217;ll need a way to interact with the Ethereum blockchain in order to deploy a wallet. There are several apps that you can use. I&amp;#8217;ve used Parity because I found it simple and&amp;nbsp;quick. &lt;/p&gt;
&lt;h2&gt;Ethereum&amp;nbsp;Wallets&lt;/h2&gt;
&lt;p&gt;Wallets are a type of contract and there are two types of wallet, the Multi-Sig wallet and the Watch wallet. An Ethereum account is required to communicate with a contract so if you want a multi-sig wallet with 3 signatories (for example) then you will need to have set up at least 1 of those 3 Ethereum accounts before creating the&amp;nbsp;wallet. &lt;/p&gt;
&lt;h2&gt;Parity&lt;/h2&gt;
&lt;p&gt;From their&amp;nbsp;website:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Integrated directly into your Web browser, Parity is the fastest and most secure way of interacting with the Ethereum&amp;nbsp;network.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can do a bunch of stuff with Parity including mining Ether, manage accounts, interact with different dapps, send/receive from different accounts, and set up contracts. On the accounts tab, you can quickly set up Multi-Signature wallets. If you use the Chrome plugin you will also get handy notifications when transactions are confirmed or contracts&amp;nbsp;deployed.&lt;/p&gt;
&lt;h2&gt;Download and open&amp;nbsp;Parity&lt;/h2&gt;
&lt;p&gt;For MacOS you can download and install Parity by visiting the Parity site and downloading the &lt;a href="https://parity.io/parity.html"&gt;installer&lt;/a&gt;, or from the terminal using curl or&amp;nbsp;Homebrew.&lt;/p&gt;
&lt;h3&gt;Simple&amp;nbsp;option&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   $ bash &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;curl https://get.parity.io -kL&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Homebrew&lt;/h3&gt;
&lt;p&gt;Detailed instructions are &lt;a href="https://github.com/paritytech/homebrew-paritytech"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   brew tap paritytech/paritytech
   brew install parity --stable
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you used the installer, then you open Parity opening the app and then using the logo in the&amp;nbsp;menubar. &lt;/p&gt;
&lt;p&gt;If you used Brew, then start Parity with the following&amp;nbsp;command &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;parity&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and then go to the following address in your&amp;nbsp;browser:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;http://127.0.0.1:8180/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You should now see something similar to&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Parity home screen view" src="images/parity-home.jpeg"&gt;&lt;/p&gt;
&lt;h2&gt;Add or create&amp;nbsp;accounts&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Parity toolbar" src="images/Parity-toolbar-accounts.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Parity toolbar" src="images/parity-account-creation.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;Select the Accounts tab from the top of the page and then select &amp;#8220;&lt;strong&gt;+ Account&lt;/strong&gt;&amp;#8220;. Either create new accounts or import them using your preferred method. You don&amp;#8217;t need to import all the accounts that will be part of the multi-sig wallet, but you will need to import or create the account that will own the wallet you are about to create. This account will need to have a large enough Ether balance to pay the transaction costs to deploy the multi-sig wallet onto the Blockchain. The costs are tiny, but they are greater than&amp;nbsp;zero.&lt;/p&gt;
&lt;h2&gt;Create the multi-sig&amp;nbsp;wallet&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Parity toolbar" src="images/Parity-toolbar-wallet.jpeg"&gt;
&lt;img alt="Wallet management" src="images/parity-wallet-details.jpeg"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Once you&amp;#8217;ve either created or imported the account which will deploy the wallet, select &amp;#8220;&lt;strong&gt;+ Wallet&lt;/strong&gt;&amp;#8221; from the accounts tab and choose &amp;#8220;&lt;strong&gt;Multi-Sig wallet&lt;/strong&gt;&amp;#8220;. Click&amp;nbsp;next.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter a &lt;strong&gt;name&lt;/strong&gt; for the wallet, if you want you can add a local &lt;strong&gt;description&lt;/strong&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &amp;#8220;&lt;strong&gt;From account&lt;/strong&gt;&amp;#8221; will be the contract owner and this account&amp;nbsp;will &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Be one of the&amp;nbsp;signatories.&lt;/li&gt;
&lt;li&gt;Need to have enough Ether to pay for the execution of the contract on the&amp;nbsp;blockchain.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click the &amp;#8220;+&amp;#8221; button under &amp;#8220;&lt;strong&gt;Other wallet owners&lt;/strong&gt;&amp;#8221; to add the address of the other signatory accounts. You&amp;#8217;ll need to add one line for each signatory and these accounts will also own the wallet once it is&amp;nbsp;deployed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the &amp;#8220;&lt;strong&gt;required owners&lt;/strong&gt;&amp;#8221; section, specify how many accounts will need to approve a transaction that is above the daily transaction&amp;nbsp;limit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the &amp;#8220;&lt;strong&gt;wallet day limit&lt;/strong&gt;&amp;#8221; to set how much Ether can be spent by each account per day &lt;em&gt;without&lt;/em&gt; needing another account to approve the transaction. Set an amount of 0 if you want all transactions to require approval, or turn the option off using the slider to the right (which just specifies a huge&amp;nbsp;number).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &amp;#8220;next&amp;#8221; and you&amp;#8217;ll be shown a pop-up window to approve the creation of the wallet. You will need to enter the password of the account which is creating the wallet, and once you click &amp;#8220;Confirm request&amp;#8221; the funds in the creators accounts will be used to deploy the contract on chain and create the multi-sig&amp;nbsp;wallet.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Wallet management" src="images/parity-conf-box.jpeg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Adding an existing multi-sig&amp;nbsp;wallet&lt;/h2&gt;
&lt;p&gt;Once your wallet is created and deployed, you&amp;#8217;ll need to add it to other parity clients so that the other signatories can make or confirm transactions, and view the wallets balance. This is done by adding a watch&amp;nbsp;wallet.&lt;/p&gt;
&lt;p&gt;Process: Accounts tab &amp;gt; + Wallet &amp;gt; Watch wallet &amp;gt; enter the address of the multi-sig&amp;nbsp;wallet. &lt;/p&gt;
&lt;p&gt;The other signatories will now be able to view the wallet&amp;#8217;s balance, get notifications about pending confirmations, and be able to make and monitor&amp;nbsp;transactions.&lt;/p&gt;
&lt;h2&gt;Managing a multi-sig&amp;nbsp;wallet&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Anyone can put funds into the wallet, just like a normal account. Just send Ether to the wallet&amp;#8217;s&amp;nbsp;address.&lt;/p&gt;
&lt;p&gt;&lt;img alt="select multisig wallet" src="images/parity-select-multisig.jpeg"&gt;
&lt;img alt="select multisig wallet" src="images/new-parity-wallet.jpeg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At the top of the page you click &amp;#8220;&lt;strong&gt;Edit&lt;/strong&gt;&amp;#8221; to change the local name and description of the&amp;nbsp;wallet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;&lt;strong&gt;Settings&lt;/strong&gt;&amp;#8221; allows you add or remove owners (signatories) of the wallet and change the required number of approvals and the wallet day limit. If you change these settings then the changes will need to be executed on the blockchain and the account requesting the change will therefore need to pay the required funds. Depending on the settings being changed, other accounts will need to approve the changes before they are&amp;nbsp;implemented.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;&lt;strong&gt;Forget&lt;/strong&gt;&amp;#8221; will remove the multi-sig wallet from your accounts&amp;nbsp;tab.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Moving funds out of a multi-sig&amp;nbsp;wallet&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Click on &amp;#8220;&lt;strong&gt;Transfer&lt;/strong&gt;&amp;#8221; in the wallet management window (pictured above) to begin withdrawing funds from the&amp;nbsp;wallet. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select the token you want to transfer - Ethereum is the only default&amp;nbsp;option.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;&lt;strong&gt;Sender address&lt;/strong&gt;&amp;#8221; - specify which account wants to withdraw the funds from the multi-sig&amp;nbsp;wallet.&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;&lt;strong&gt;Recipient address&lt;/strong&gt;&amp;#8221; - specify which account will receive the&amp;nbsp;funds.&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;&lt;strong&gt;Amount to transfer&lt;/strong&gt;&amp;#8221; - specify how much you want to transfer. If the amount is greater than the remaining daily limit you will get a warning bar telling you the transaction will require confirmation from other wallet&amp;nbsp;owners.&lt;/li&gt;
&lt;li&gt;If you want to specify the maximum transaction fee (a payment with a lower fee will be confirmed more slowly than usual) tick the &amp;#8220;&lt;strong&gt;advanced sending options&lt;/strong&gt;&amp;#8221;&amp;nbsp;box.&lt;/li&gt;
&lt;li&gt;Clicking &amp;#8220;send&amp;#8221; will bring you to the confirmation stage where you can enter the password for the account which is requesting the&amp;nbsp;transfer.&lt;/li&gt;
&lt;li&gt;If approval from other wallet owners is required and they are also using Parity, then they can see that their approval is required in two ways:&lt;ul&gt;
&lt;li&gt;The signer tab will show there is a pending request.
    &lt;img alt="Wallet management" src="images/parity-signer-alert.jpeg"&gt;&lt;/li&gt;
&lt;li&gt;The wallet management window (accessed from the accounts tab) has a &amp;#8220;pending transactions&amp;#8221; section where any confirmation requests will be shown.
   &lt;img alt="Wallet management" src="images/parity-wallet-management.jpeg"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="Disintermediation"></category><category term="Ethereum"></category><category term="Parity"></category><category term="Blockchains"></category><category term="Fintech"></category><category term="Multi-Sig"></category><category term="Wallet"></category></entry><entry><title>Blockchains from the ground up: PartÂ 2</title><link href="blockchain-networks.html" rel="alternate"></link><published>2017-07-08T13:52:00+02:00</published><updated>2017-07-08T13:52:00+02:00</updated><author><name>John Mathews</name></author><id>tag:None,2017-07-08:blockchain-networks.html</id><summary type="html">&lt;p&gt;An overview of the essential features of a blockchain, using proof-of-work for&amp;nbsp;consensus&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Maintain an accurate list of transactions across a large group of users, without a central&amp;nbsp;authority&lt;/h2&gt;
&lt;p&gt;This is part 2 of an introduction to the key features of a generalised blockchain. &lt;a href="blockchain-introduction.html"&gt;Part 1&lt;/a&gt; introduced key features of immutable record creation between 2 parties using public key cryptography. Part 2 explores how a network of users can maintain the same (true) list of transactions and protect each other against&amp;nbsp;fraud. &lt;/p&gt;
&lt;h2&gt;Broadcasting transactions to the&amp;nbsp;network&lt;/h2&gt;
&lt;p&gt;In  &lt;a href="blockchain-introduction.html"&gt;Part 1&lt;/a&gt; we saw Lizzie, John and Chris exchanging coins. Lizzie also paid John with coins that were owed to her by Chris. These transactions were authenticated using &lt;span class="caps"&gt;PKI&lt;/span&gt;&amp;nbsp;which:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ensured transaction&amp;nbsp;integrity&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prevented participants claiming that they didn&amp;#8217;t make a past&amp;nbsp;transaction&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Prevents anyone creating a transaction on someone else&amp;#8217;s behalf without their&amp;nbsp;consent. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As the number of people in the network grows, the transfer of coins from one user to another becomes harder to track. If every users ledger is not identical then the opportunity arises to use coins that have already been spent to pay someone who doesn&amp;#8217;t know they&amp;#8217;ve already been&amp;nbsp;used. &lt;/p&gt;
&lt;p&gt;This is double spending, and is possible because the ledger that is shared amongst all members of the group only has &lt;em&gt;weak consistency&lt;/em&gt; - it is not necessarily correct all the time in all&amp;nbsp;locations. &lt;/p&gt;
&lt;h3&gt;Weak&amp;nbsp;Consistency&lt;/h3&gt;
&lt;p&gt;Weak consistency could be solved by requiring that everyone votes to accept a transaction before it is accepted into the ledger (Unanimous consensus), or to save time we could reduce the requirements so that only 50% of all users validate a transaction before it is accepted into the ledger (Quorum consensus). Either of these solutions is possible for a small local group with a list of all&amp;nbsp;users. &lt;/p&gt;
&lt;p&gt;However Unanimous or Quorum Consensus doesn&amp;#8217;t solve the weak consistency problem&amp;nbsp;if:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The group is&amp;nbsp;large&lt;/li&gt;
&lt;li&gt;The group is small but spread across different locations or&amp;nbsp;timezones&lt;/li&gt;
&lt;li&gt;It is not possible to know how many members there are and therefore what proportion of users are&amp;nbsp;participating.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;real&lt;/em&gt; identity of a user is&amp;nbsp;unknown&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In these cases a peer-to-peer network is required where transactions between users require approval by other users before being confirmed. This has not been trivial to solve, as some users would be incentivised to be dishonest, and some may make mistakes. This is the distributed consensus problem, which on &lt;a href="https://en.wikipedia.org/wiki/Consensus_(computer_science)"&gt;wikipedia&lt;/a&gt; is defined&amp;nbsp;as: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The consensus problem requires agreement among a number of agents for a single data value. Some of the processes (agents) may fail or be unreliable in other ways, so consensus protocols must be fault tolerant or resilient. The processes must somehow put forth their candidate values, communicate with one another, and agree on a single consensus&amp;nbsp;value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Distributed&amp;nbsp;Consensus&lt;/h2&gt;
&lt;p&gt;When the number and identity of participants is known, distributed consensus is possible. Two types of protocol which allows all users in a distributed system to agree on a transaction are the &lt;a href="https://en.wikipedia.org/wiki/Paxos_(computer_science)"&gt;Paxos&lt;/a&gt; family of protocols and the &lt;a href="http://courses.cs.vt.edu/~cs5204/fall00/distributedDBMS/duckett/tpcp.html"&gt;Two-phase commit&lt;/a&gt; protocol. Both of these would require that at least 50% of all users reach agreement in order to add a new&amp;nbsp;transaction. &lt;/p&gt;
&lt;p&gt;However in a public peer-to-peer network the total number of active users is not known - its  fast and cheap to create new user profiles, and existing user profiles may become dormant. This makes it impossible to know how many users 50% would be. Additionally, because its possible to cheaply create new user profiles (just generate a new public-private key pair), a single actor could generate and control many user accounts in order to have many votes and force incorrect transactions onto the ledger. An attack where one user subverts a network by creating many profiles is known as a &lt;a href="https://en.wikipedia.org/wiki/Sybil_attack"&gt;Sybil attack&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Proof of&amp;nbsp;Work&lt;/h3&gt;
&lt;p&gt;The solution to the Sybil attack is to increase the cost of verifying a transaction such that the cost exceeds the reward. This is achieved through proof-of-work (PoW) algorithms, which are computationally expensive for a sender claiming to have verified a transaction, and computationally simple for the receiver to verify that the sender has validated the&amp;nbsp;transaction.&lt;/p&gt;
&lt;p&gt;One possible Proof of Work approach is to require that the hash of a verification message begins with a certain set of characters. The chosen set of characters is called a &lt;em&gt;nonce&lt;/em&gt; and the only way to create a verification message with an acceptable hash is to try many slightly different messages. For example, a nonce may be 3 zeros. It&amp;#8217;s arbitrary, but the longer the nonce is the more difficult it becomes to find a hash that fits the&amp;nbsp;requirements. &lt;/p&gt;
&lt;p&gt;This is because a hash is a random list of characters, and altering even a single part of the data being hashed will result in a completely different hash value. Therefore there is no way to predict a hash value. The only way to generate a hash with the required none is to  repeatedly alter the data being hashed (even by just one character) until a hash with the required features is randomly achieved. This is computationally expensive to achieve, but computationally simple to&amp;nbsp;verify. &lt;/p&gt;
&lt;p&gt;Using the method, a user who seeks to verify a transaction and broadcast the result must (once they&amp;#8217;ve verified the transactions) repeatedly try different messages until they randomly find a message that meets the nonce requirements. It is simple for a user to check if a transaction verification message meets the nonce requirements, because it is simple to inspect a hash and compare it to the&amp;nbsp;nonce.&lt;/p&gt;
&lt;p&gt;The effect of this requirement is a process that makes it expensive to claim that a transaction has been verified and cheap to check that verification claim. This removes the threat of a Sybil attack, but does not remove the distributed consensus problems created by not&amp;nbsp;knowing:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The true identity of users in the&amp;nbsp;network&lt;/li&gt;
&lt;li&gt;How many users&amp;nbsp;exist&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This problem cannot be completely solved, and the practical solution is to relax the requirements such that the probability of accepting a fraudulent transaction is lower than some user defined threshold. This is acceptable because a user would require a higher degree of confirmation for a high-value transaction than they would for a low-value transaction, and would therefore be willing to incur more time and cost to verify a high value transaction and reduce the probability of accepting an incorrect transaction below a&amp;nbsp;threshold. &lt;/p&gt;
&lt;p&gt;If a user wishes to make fast or low-value transactions, or trusts the party they&amp;#8217;re transacting with, then they may accept a transaction without any other users on the network verifying that the sender has the required funds&amp;nbsp;available.&lt;/p&gt;
&lt;p&gt;However when the senders trustworthiness is not assured, verification is required. The more risky or valuable the transaction, the more users the receiver of the funds will ask to verify that the sender has access to the required funds. The higher the number of users, the higher the probability that a dishonest transaction will be identified before being&amp;nbsp;accepted.&lt;/p&gt;
&lt;p&gt;An appropriate level of verification will depend on the amount being transferred and how well the receiver of the funds knows the&amp;nbsp;sender. &lt;/p&gt;
&lt;h2&gt;Transaction&amp;nbsp;fees&lt;/h2&gt;
&lt;p&gt;Asking peers on the network to verify transactions introduces a new problem. Verifying a transaction requires time and effort, and incurs a cost. This cost requires that network participants be rewarded for correctly verifying transactions between other&amp;nbsp;participants. &lt;/p&gt;
&lt;p&gt;An attacker would only attack if the cost is less than the reward. Therefore the number and cost of verifications required should be just enough to make the cost of an attack more than the value of the&amp;nbsp;transaction.&lt;/p&gt;
&lt;p&gt;This introduces the problem that it costs more to verify a transaction than the value of the transaction itself. It is also create the recursive problem where the users who verified the first transaction would need to verify that the payment they received was then also valid. Furthermore, a high proportion of the original transaction value is spent as a transaction fee (for verification) which is not&amp;nbsp;efficient.&lt;/p&gt;
&lt;p&gt;These problems are avoided by combining multiple transactions and verifying them at the same time, broadcasting the successful verification of multiple transactions simultaneously by grouping the transactions together into a block of&amp;nbsp;transactions. &lt;/p&gt;
&lt;p&gt;By confirming multiple transactions at once (and proving it using proof-of-work), transaction fees can be aggregated (allowing each individual fee to be much lower). Each block includes a list of verified transactions, a reference to the previous block, and a block &lt;span class="caps"&gt;ID&lt;/span&gt;.&lt;/p&gt;
&lt;h2&gt;Incentivised social&amp;nbsp;responsibility&lt;/h2&gt;
&lt;p&gt;The transaction verification process outlined above is remarkable because it creates a demand for new participants to the network by creating a financial incentive to verify transactions. This makes the network more secure as increasing the number of participants makes a sybil attack more&amp;nbsp;difficult. &lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Users generate new transactions and broadcast them on a peer-to-peer network for&amp;nbsp;verification&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An idle user listens for new transactions and collects them until the sum of all transactions&amp;#8217; verification fees is greater than the cost the user will incur to verify them and meet the proof-of-work&amp;nbsp;requirements&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The idle user adds an extra transaction to their list of transactions that transfers the sum of the transaction fees to their own&amp;nbsp;address.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The idle user generates the block of newly verified transactions, referencing the previously verified block so that transactions can be chronologically ordered and completing the proof-of-work challenge. This new block is then broadcast to the&amp;nbsp;network.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other users are listening for new block announcements. These users verify that the block is valid according to the proof-of-work requirements and the order of the&amp;nbsp;blocks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Users with unverified transactions look inside the verified block to see if their pending transactions have been&amp;nbsp;accepted.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Competing to validate blocks of&amp;nbsp;transactions&lt;/h2&gt;
&lt;p&gt;Each user can choose which transactions they verify, and how many to verify before beginning the proof-of-work requirement and hopefully collecting the transaction fees. This lack of order around transaction verification is fine because the only way to increase the probability of being the first to claim the transaction fees associated with a collection of transactions (a block) is to spend more &lt;span class="caps"&gt;CPU&lt;/span&gt; power searching for the required partial hash&amp;nbsp;collision. &lt;/p&gt;
&lt;p&gt;If two users complete a block at approximately the same time then the blockchain will look different in different parts of the network, as each completed block begins to propagate and other users accept the new block and add it to their ledger. This is ok if a rule is enforced that requires a user to always accept the longest chain of&amp;nbsp;blocks. &lt;/p&gt;
&lt;p&gt;This works because if multiple blocks are created at the same time, the time it takes to create subsequent blocks will vary due to the random behaviour of the proof-of-work algorithm. Therefore chains of different length will always exist and one version of the block chain will be longer than the others, providing a clear candidate for which branch of the blockchain to use. If there are transactions in the discarded branch which are not present in the new (longest) blockchain then they are added back into the pool of transactions awaiting&amp;nbsp;verification. &lt;/p&gt;
&lt;h2&gt;A block of transactions in never absolutely&amp;nbsp;immutable&lt;/h2&gt;
&lt;p&gt;The above procedure for verifying transactions and adding new blocks onto the chain means that even if a user inspects a new block and sees that their transaction has been verified, its possible that in the future a longer chain will be discovered (which must be accepted) which doesn&amp;#8217;t include their&amp;nbsp;transaction. &lt;/p&gt;
&lt;p&gt;Therefore any block could potentially be removed, which means a transaction is never completely verified. However the probability of a block being removed decreases as the number of blocks after it increases. This means verification can be thought of in terms of the number of blocks that have been added to the chain &lt;em&gt;after&lt;/em&gt; the block containing the&amp;nbsp;transaction. &lt;/p&gt;
&lt;p&gt;If you are willing to accept a high level of risk, or you trust the party you are transacting with you could opt for a small number of blocks to be added after the block containing your transaction. This has the benefit of increasing the speed of the transaction verification. If the transaction is risky or high-value, you might require a larger number of blocks to be added to the chain before accepting the transaction. This will increase the time required to verify the transaction, but reduce the probability that a longer chain will undo the block containing the transaction in&amp;nbsp;question. &lt;/p&gt;</content><category term="Disintermediation"></category><category term="Blockchains"></category><category term="Digital Currencies"></category><category term="Distributed Ledger Technology"></category><category term="Distributed Consensus"></category><category term="Sybil"></category></entry><entry><title>Blockchains from the ground up: PartÂ 1</title><link href="blockchain-introduction.html" rel="alternate"></link><published>2017-05-25T20:38:00+02:00</published><updated>2017-05-25T20:38:00+02:00</updated><author><name>John Mathews</name></author><id>tag:None,2017-05-25:blockchain-introduction.html</id><summary type="html">&lt;p&gt;Using a scenario that begins with the exchange of apples for oranges, understand the essential concepts and advantages of&amp;nbsp;blockchains.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;How to maintain a reliable list across a small network without a central&amp;nbsp;authority&lt;/h1&gt;
&lt;p&gt;This is part 1 of an introduction to the key features of a generalised blockchain. I haven&amp;#8217;t included references to Bitcoin or any particular digital currencies or blockchain implementations. This is because a digital currency is just one application of blockchain&amp;nbsp;technology.&lt;/p&gt;
&lt;h2&gt;Create a financial document that cannot be forged or&amp;nbsp;disputed&lt;/h2&gt;
&lt;p&gt;Let&amp;#8217;s imagine there is a village somewhere where people still trade by bartering. John has some apples whilst Lizzie has some oranges. John would like an orange, and offers Lizzie an apple in exchange. She accepts, and writes John a&amp;nbsp;receipt.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;Date: 1234&lt;/span&gt;
&lt;span class="x"&gt;From: Lizzie&lt;/span&gt;
&lt;span class="x"&gt;To: John    &lt;/span&gt;
&lt;span class="x"&gt;What: 1 Orange  &lt;/span&gt;
&lt;span class="x"&gt;Price: 1 Apple  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So far, so good. The receipt is evidence of the transaction. The next day John wants an orange but doesn&amp;#8217;t have anything to exchange. He offers to write Lizzie a note saying he owes Lizzie 1 orange (an  &lt;a href="https://en.wikipedia.org/wiki/IOU"&gt;&lt;span class="caps"&gt;IOU&lt;/span&gt;&lt;/a&gt;). They think about this and agree that John should sign the note so that Lizzie can prove that John owes her 1&amp;nbsp;orange.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;Date: 1234&lt;/span&gt;
&lt;span class="x"&gt;From: John&lt;/span&gt;
&lt;span class="x"&gt;To: Lizzie&lt;/span&gt;
&lt;span class="x"&gt;What: 1 Orange&lt;/span&gt;
&lt;span class="x"&gt;Signed: John&amp;#39;s signature, Lizzie&amp;#39;s signature&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This &lt;span class="caps"&gt;IOU&lt;/span&gt; is a nice gesture, but it&amp;#8217;s simple to forge. Lizzie has the only copy of the &lt;span class="caps"&gt;IOU&lt;/span&gt; and once Lizzie has seen Johns signature, she could easily copy it and create more &lt;span class="caps"&gt;IOU&lt;/span&gt;&amp;#8217;s. She could also change this &lt;span class="caps"&gt;IOU&lt;/span&gt; from 1 orange to 11 oranges (for example) and John couldn&amp;#8217;t prove what the original amount was. If Lizzie and John disagreed over what was owed it would be impossible to know who was telling the truth. It&amp;#8217;s one person&amp;#8217;s word against the&amp;nbsp;other. &lt;/p&gt;
&lt;p&gt;Lizzie realises this and suggests an improvement - they will find a witness and make 3 copies of the &lt;span class="caps"&gt;IOU&lt;/span&gt;. Each copy will be signed by Lizzie, John and the Witness. Lets call this witness&amp;nbsp;&amp;#8220;Walter&amp;#8221;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;Date: 1234&lt;/span&gt;
&lt;span class="x"&gt;From: John&lt;/span&gt;
&lt;span class="x"&gt;To: Lizzie&lt;/span&gt;
&lt;span class="x"&gt;What: 1 Orange&lt;/span&gt;
&lt;span class="x"&gt;Witness: Walter&lt;/span&gt;
&lt;span class="x"&gt;Signed: &amp;quot;John&amp;#39;s signature&amp;quot;, &amp;quot;Lizzie&amp;#39;s signature&amp;quot;, &amp;quot;Walter&amp;#39;s signature&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a much stronger document and is more difficult to forge. If Lizzie changes the &amp;#8220;What:&amp;#8221; to &amp;#8220;11 Oranges&amp;#8221;, both John and Walter will have copies of the original with her signature on it. It will be 2 pieces of evidence against Lizzie&amp;#8217;s 1. Lizzie will be laughed out of court.&amp;nbsp;Hahaha. &lt;/p&gt;
&lt;p&gt;3 Party transactions work pretty well, and this is how most transactions are recorded today. But there is a weakness: If Lizzie can bribe Walter then the transaction can be falsified! John would rely on Walter to verify his version of the transaction but would be let down by Walters lack of integrity. Lizzie and Walter could change 1 orange to 11 oranges and if Lizzie offered Walter some of the extra oranges this would give them both an incentive to forge the documentation. If Walter liked oranges enough, he might not care that his career as a witness will be&amp;nbsp;ruined. &lt;/p&gt;
&lt;p&gt;This is a problem for modern financial systems and a great deal of time, money and regulation is devoted to trying to ensure that third parties are trustworthy. &lt;span class="caps"&gt;E.G.&lt;/span&gt; If I buy a car and my bank is in cahoots with the car dealership, I could be defrauded. Reducing this risk to an acceptably low level makes financial services slower and more expensive than they would otherwise need to&amp;nbsp;be. &lt;/p&gt;
&lt;p&gt;The solution is &lt;a href="https://en.wikipedia.org/wiki/Public-key_cryptography"&gt;public-key infrastructure&lt;/a&gt; (which is introduced in my &lt;a href="encryption.html"&gt;previous post&lt;/a&gt;). In this system, each individual generates their own public-private key pair. They keep their private key private and make their public key freely available. A detailed description of public-key cryptography is out of scope for this post, but&amp;nbsp;briefly:&lt;/p&gt;
&lt;p&gt;A public key is derived from a private key, and this pair together have a set of unique mathematical properties. Either key can be used to encrypt a message but only the other key can be used to decrypt it. You cannot use the same key to encrypt and decrypt a message. If the private key is used to encrypt then anybody can decrypt (because the public key is publicly available) and whilst this is clearly a terrible way to keep a secret it&amp;#8217;s a great way to verify who encrypted the message, because only one person has the private key. Because of this, using a private key to encrypt a message is effectively creating a digital signature which cannot be forged. (If the public key is used to encrypt a message then only the private key can be used to decrypt it, and this approach is used to transfer secret data&amp;nbsp;securely). &lt;/p&gt;
&lt;p&gt;Back to the fruit. If Lizzie wants to accept John&amp;#8217;s &lt;span class="caps"&gt;IOU&lt;/span&gt; she can use public-key cryptography and no-one needs to worry about Walter. There are 3 steps to the&amp;nbsp;transaction.&lt;/p&gt;
&lt;p&gt;1] Create the &lt;span class="caps"&gt;IOU&lt;/span&gt; stating that John owes Lizzie 1&amp;nbsp;orange.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;Date: 1234 From: John To: Lizzie What: 1 Orange&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2] John creates a public private key pair and encrypts the &lt;span class="caps"&gt;IOU&lt;/span&gt; using his private key. He adds an unencrypted &amp;#8220;From&amp;#8221;&amp;nbsp;line.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;From: John &lt;/span&gt;
&lt;span class="x"&gt;Date: 1234 To: Lizzie, What: 1 Orange &amp;lt;- Signed and encrypted by John using his private key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3] John makes his public key freely available to anyone who wants&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;This will work because anybody (not just Lizzie) can check that John signed the &lt;span class="caps"&gt;IOU&lt;/span&gt;. The transaction can be verified by looking at the &amp;#8220;From&amp;#8221; part of that transaction, noticing that this transaction is supposedly from John and then using John&amp;#8217;s public key to decrypt the encoded &amp;#8220;signature&amp;#8221;&amp;nbsp;line. &lt;/p&gt;
&lt;p&gt;The signature can only be decrypted using John&amp;#8217;s public key if his private key was used to encrypt it. Because John is the only person with his private key, that proves the transaction is valid, and Lizzie isn&amp;#8217;t dishonestly creating a debt for John to&amp;nbsp;pay. &lt;/p&gt;
&lt;p&gt;Clearly if John discloses his private key (or its stolen) then he will make the system insecure, but this is a problem with John and his security protocols, not with public-key&amp;nbsp;cryptography. &lt;/p&gt;
&lt;h2&gt;Create and maintain an accurate list of&amp;nbsp;transactions&lt;/h2&gt;
&lt;p&gt;So far we&amp;#8217;ve seen how 1 &lt;span class="caps"&gt;IOU&lt;/span&gt; (for an orange) can be securely created, signed and verified. This process can extended to be used by more people to exchange more fruit.  For&amp;nbsp;example.&lt;/p&gt;
&lt;p&gt;The original&amp;nbsp;note:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;From: John&lt;/span&gt;
&lt;span class="x"&gt;Date: 1234, To: Lizzie, What: 1 Orange &amp;lt;- Signed and encrypted by John using his private key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then some additional&amp;nbsp;transactions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;From: Lizzie // Date: 1235, To: John, What: 2 Apples &amp;lt;- Signed and encrypted by Lizzie using her private key&lt;/span&gt;
&lt;span class="x"&gt;From: John // Date: 1236, To: Chris, What: 1 Banana &amp;lt;- Signed and encrypted by John using his private key&lt;/span&gt;
&lt;span class="x"&gt;From: Chris // Date: 1237, To: Lizzie, What: 2 Bananas &amp;lt;- Signed and encrypted by Chris using his private key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After these 4 transactions, between John, Chris and&amp;nbsp;Lizzie:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;John owes 1 orange to Lizzie and 1 banana to&amp;nbsp;Chris&lt;/li&gt;
&lt;li&gt;Lizzie owes 2 apples to&amp;nbsp;John&lt;/li&gt;
&lt;li&gt;Chris owes 2 bananas to&amp;nbsp;Lizzie.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is confusing, (and ridiculous). It is not possible to know who is the most in debt or who is the most wealthy. Lizzie owes 2 apples, but is owed 2 bananas and 1 apple. Does that mean her fruit business is losing money or making money? We cannot say. To be able to know we need to use the same unit of value for all the fruits. Lets say that an orange is worth 2 apples, and a banana is also worth 2 apples (therefore 1 banana = 1 orange.), also lets invent a currency called &amp;#8220;coins&amp;#8221; and say 1 apple is worth 1 coin. The 4 transactions can now be rewritten&amp;nbsp;as: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;From: John // Date: 1234, To: Lizzie, What: 2 coins &amp;lt;- Signed and encrypted by John using his private key&lt;/span&gt;
&lt;span class="x"&gt;From: Lizzie // Date: 1235, To: John, What: 2 coins &amp;lt;- Signed and encrypted by Lizzie using her private key&lt;/span&gt;
&lt;span class="x"&gt;From: John // Date: 1236, To: Chris, What: 2 coins &amp;lt;- Signed and encrypted by John using his private key&lt;/span&gt;
&lt;span class="x"&gt;From: Chris // Date: 1237, To: Lizzie, What: 4 coins &amp;lt;- Signed and encrypted by Chris using his private key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By going through the list of transactions we can see&amp;nbsp;that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;John owes Lizzie and Chris 2 coins each, and is owed 2 coins from Lizzie. His net amount is&amp;nbsp;-2&lt;/li&gt;
&lt;li&gt;Lizzie owes John 2 coins but is owed 4 coins from Chris. Her net amount is&amp;nbsp;+2&lt;/li&gt;
&lt;li&gt;Chris owes Lizzie 4 coins but is owed 2 coins from John. His net amount is&amp;nbsp;-2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So far Lizzie is the only person who appears to have any business&amp;nbsp;skills.&lt;/p&gt;
&lt;p&gt;What if Lizzie wanted to use the 4 coins that she is owed by Chris to buy something from John? Could she use this system to transfer Chris&amp;#8217; promise to pay her 4 coins so that Chris would pay John instead? The fact that everyone can be sure that the record of the transactions is accurate and authentic allows a debt to be used as payment. Lizzie&amp;#8217;s transaction would look like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;From: Lizzie // Date: 1235, To: John, What: ba781... &amp;lt;- Signed and encrypted by Lizzie using her private key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &amp;#8220;What&amp;#8221; section contains a &lt;a href="http://www.movable-type.co.uk/scripts/sha256.html"&gt;hash&lt;/a&gt; of the original transaction (with Chris) that she wants to transfer to John. A hash is the signature for a file or some text and in this case it is the signature for Lizzie&amp;#8217;s transaction with Chris. The signature is unique to each transaction and identifies which transaction is being used as payment. Because both transactions are signed using Lizzie&amp;#8217;s private key, it is simple to verify that Lizzie has the right to use this previous transaction where she is owed (or paid) some coins as payment to another&amp;nbsp;person.&lt;/p&gt;
&lt;p&gt;This shows how public-private key infrastructure can be used to securely record transactions and enable trade between a group of people, - under certain conditions. Blockchains can be used to transfer units of value like in this example, but we could just as easily put selfies or certificates of ownership (for houses, financial instruments, diamonds, etc) inside the &amp;#8220;What&amp;#8221; part of the transaction. If we make two other changes - removing the &amp;#8220;To&amp;#8221; part of the transaction, and including a hash of the transaction as part of the text which is signed using a private key. If we do this, then a record would&amp;nbsp;be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;From: Chris // Date: 2345, What: &amp;quot;A photo of me&amp;quot; &amp;lt;- Signed and encrypted by Chris using his private key &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This would create a reliable record of what Chris claims he looks like. He can confidently send anyone this record and if they have his public key then they can verify that it is Chris himself who signed it and is asserting that the photo is him. If somebody changed the photo then the data in the transaction would change and the transaction will have a new hash value. The new hash value will not match the hash value contained within the signature, and the text in the signature cannot be changed because it can only be encrypted using Chris&amp;#8217; private key, which only Chris has. Therefore it will be simple to show that someone other than Chris is trying to change the&amp;nbsp;photo. &lt;/p&gt;
&lt;p&gt;Another use for public-key cryptography arises if Chris were an employee in a bank, and the &amp;#8220;What&amp;#8221; contained documents about a customer the bank is providing financial services for. In this scenario, Chris (representing the bank) is effectively confirming the customer&amp;#8217;s true identity and documenting the evidence that&amp;#8217;s been collected to show that the bank knows who their customer really is. If the transaction included a new section called &amp;#8220;Customer &lt;span class="caps"&gt;ID&lt;/span&gt;&amp;#8221; (for example) then a database of all customers whose identity checks have been successfully completed can be made. This can be shared with other departments (or banks) easily and immutably. This is the concept behind &lt;span class="caps"&gt;KYC&lt;/span&gt; on a&amp;nbsp;blockchain. &lt;/p&gt;
&lt;p&gt;Back to our fruit traders: At the moment a participant is allowed to carry a net negative balance. For this system to work in reality, the creation of &amp;#8220;coins&amp;#8221; will need to be controlled in order to maintain their value. In the example above, people can freely create &amp;#8220;coins&amp;#8221; and can also carry negative amounts of &amp;#8220;coins&amp;#8221;. This would result in the value of a &amp;#8220;coin&amp;#8221; plummeting. Therefore their creation (and conversion from fruit) must be controlled in a predictable&amp;nbsp;manner.&lt;/p&gt;
&lt;p&gt;Our examples so far only include 3 people. If there are a lot of people in the network it wouldn&amp;#8217;t be feasible to insist that everyone is present or online each time a new transaction is added to the list (the chain) of transactions. However if we allow transactions to be added whilst some people are offline we create an opportunity for fraud. The reasons why, and the solution to this and other problems will be described in &lt;a href="blockchain-networks.html"&gt;part 2&lt;/a&gt;.&lt;/p&gt;</content><category term="Disintermediation"></category><category term="Blockchains"></category><category term="Digital Currencies"></category><category term="Distributed Ledger Technology"></category><category term="Public Key Cryptography"></category></entry><entry><title>Introduction to the Ãternity blockchainÂ project</title><link href="aeternity.html" rel="alternate"></link><published>2017-05-05T21:04:00+02:00</published><updated>2017-05-05T21:04:00+02:00</updated><author><name>John Mathews</name></author><id>tag:None,2017-05-05:aeternity.html</id><summary type="html">&lt;p&gt;Ãternity is a new blockchain project aiming to facilitate large volumes of smart-contracts which can interface with external data sources. This is accomplished using a decentralised oracle based on prediction&amp;nbsp;markets.&lt;/p&gt;</summary><content type="html">&lt;p&gt;These are my notes on the Ã¦ternity blockchain project, I&amp;#8217;m not affiliated with the Ã¦ternity&amp;nbsp;team.&lt;/p&gt;
&lt;p&gt;Ãternity is a new blockchain project that is pre-launch. The headline goal is to securely facilitate large volumes of smart-contracts which interface with external data sources. This is made possible via a decentralised oracle based on prediction markets. These terms are explained below. The Ã¦ternity project has proposed several notable technical&amp;nbsp;features: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Smart Contracts in&amp;nbsp;state-channels&lt;/li&gt;
&lt;li&gt;Oracles and native prediction&amp;nbsp;markets&lt;/li&gt;
&lt;li&gt;Governance by prediction&amp;nbsp;markets&lt;/li&gt;
&lt;li&gt;Written in&amp;nbsp;Erlang&lt;/li&gt;
&lt;li&gt;Different types of&amp;nbsp;node &lt;/li&gt;
&lt;li&gt;Sharding&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Smart Contracts in&amp;nbsp;state-channels&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A smart contract is a way to execute a contract without an intermediary (middle-man) and without&amp;nbsp;conflict.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The smart contract is a protocol which is stored and executed on a blockchain, executing transactions (outputs) based on specific inputs and programmable logic automatically. The logic often mirrors that contained in clauses of a written&amp;nbsp;contract.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;State channels are payment networks that exchange funds off-chain and periodically settle up accounts with the main blockchain. (The Bitcoin Lightning Network is creating a system for routing Bitcoin payments through state&amp;nbsp;channels.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;State channels increase scalability by making groups of transactions independent of each other. This allows them to be processed in&amp;nbsp;parallel.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ã¦ternity proposes executing smart-contracts in Turing-complete state channels (Turing complete means, colloquially, real-world and general purpose), which should allow greater volumes of transactions, and make the smart contracts more secure and easier to&amp;nbsp;analyse. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is because executing the smart-contracts off-chain makes them private and the code used to execute the smart contract wonât need to be broadcast to the primary blockchain. This should increase processing capacity by allowing contracts to execute in&amp;nbsp;parallel.&lt;/p&gt;
&lt;p&gt;Disadvantages to the state-channel approach include reduced transparency, as running smart contracts in state channels requires more trust in both the contract creator and the node running&amp;nbsp;it.&lt;/p&gt;
&lt;h2&gt;Oracles and prediction&amp;nbsp;markets&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The Oracle functionality allows smart-contracts to interact with data outside the Ã¦ternity blockchain. This is possible by checking on-chain prediction market results and rewarding users who made the correct prediction. Users are rewarded through automated payments and the immediate recording of transactions in the blockchain. This creates incentives to participate in prediction markets, which have  been shown to be&amp;nbsp;effective. &lt;/li&gt;
&lt;li&gt;On-chain, rather than off-chain allows greater efficiency and&amp;nbsp;integration&lt;/li&gt;
&lt;li&gt;The prediction market is expected to run using a native (on-chain) consensus procedure. The oracle mechanism is designed to use the same consensus&amp;nbsp;infrastructure.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Governance by prediction&amp;nbsp;markets&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Oracle functionality compliments prediction market&amp;nbsp;functionality. &lt;/li&gt;
&lt;li&gt;Prediction markets are proposed to implement governance of the Ã¦ternity blockchain. This is a new&amp;nbsp;approach.&lt;/li&gt;
&lt;li&gt;The Ã¦ternity protocol would be governed by user input. A prediction market will exist where changes to features and protocols would result in a higher token&amp;nbsp;value. &lt;/li&gt;
&lt;li&gt;The incentive to increase the value of a token (Ãon) would allow the Ã¦ternity community to decide efficiently which changes to&amp;nbsp;implement.&lt;/li&gt;
&lt;li&gt;Low level protocol changes to variables like block times and block capacity could be&amp;nbsp;possible &lt;/li&gt;
&lt;li&gt;The consensus developed by the prediction market will initially provide input to the development teamâs&amp;nbsp;decision-making.&lt;/li&gt;
&lt;li&gt;Later, a fully autonomous prediction market for governance is expected (a &lt;span class="caps"&gt;DAO&lt;/span&gt;) &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Written in&amp;nbsp;Erlang&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Erlang_(programming_language)"&gt;Erlang&lt;/a&gt; is normally used for large-scale systems that manage the allocation of scarce network resources (telecoms, banking, instant&amp;nbsp;messaging)&lt;/li&gt;
&lt;li&gt;Could make it easier to run a lightning network and process many state-channels in&amp;nbsp;parallel&lt;/li&gt;
&lt;li&gt;As far as I know, ÃTernity is the first blockchain project to be written in&amp;nbsp;Erlang&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Different types of&amp;nbsp;node&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The Ã¦ternity network will contain nodes with different functions. Each type of node will contribute towards the efficient functioning of particular aspects of the&amp;nbsp;network &lt;/li&gt;
&lt;li&gt;Node types will&amp;nbsp;include &lt;/li&gt;
&lt;li&gt;Liquidity - Lots of channels and lots of users. Open a channel to issue a contract, for a&amp;nbsp;fee.&lt;/li&gt;
&lt;li&gt;Exchanges - Trustless exchanges of assets offered by market makers. Profitable to market makers because of transaction&amp;nbsp;fees.  &lt;/li&gt;
&lt;li&gt;Presumably features such as consensus algorithms and prediction markets will also require their own dedicated node types. Users of the node will incur transaction fees to participate, providing an incentive to run a&amp;nbsp;node.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Sharding&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Allows a greater transaction volume, removing scalability problems that Bitcoin and Ethereum have&amp;nbsp;experienced.&lt;/li&gt;
&lt;li&gt;Sharding works by splitting the space of possible accounts into subspaces (for example based on the first digit of a numerical&amp;nbsp;address)&lt;/li&gt;
&lt;li&gt;Each shard gets a set of validators. Each validator validates 1 shard&amp;nbsp;only&lt;/li&gt;
&lt;li&gt;Contracts and transactions within the same shard work as&amp;nbsp;normal&lt;/li&gt;
&lt;li&gt;Contracts and transactions across shards require alternative techniques based on &amp;#8220;transaction&amp;nbsp;receipts&amp;#8221; &lt;/li&gt;
&lt;/ul&gt;</content><category term="Disintermediation"></category><category term="Ã¦ternity"></category><category term="DLT"></category><category term="Digital Currencies"></category><category term="Finance"></category><category term="Blockchains"></category></entry><entry><title>The Ãternity ICO: MyÂ experience</title><link href="aeternity-ico.html" rel="alternate"></link><published>2017-04-30T23:37:00+02:00</published><updated>2017-04-30T23:37:00+02:00</updated><author><name>John Mathews</name></author><id>tag:None,2017-04-30:aeternity-ico.html</id><summary type="html">&lt;p&gt;I participated in phase 1 of the Ãternity &lt;span class="caps"&gt;ICO&lt;/span&gt; by converting Sterling to Ãons via Ether. I tried several exchanges and chose the quickest, cheapest conversion&amp;nbsp;method.&lt;/p&gt;</summary><content type="html">&lt;p&gt;On April 3rd, I happened to be Googling digital currencies and blockchain innovations when I came across the &lt;a href="http://www.Ãternity.com"&gt;Ãternity website&lt;/a&gt; and skimmed their &lt;a href="https://blockchain.Ãternity.com/%C3%A6ternity-blockchain-whitepaper.pdf"&gt;white paper&lt;/a&gt;. The project is ambitious, like many crypto projects, but seems well organised. The team is well known in the space. There is a clear plan to develop the project and create a blockchain technology that, if successful, could bring. A step change in the use of digital currencies for high volume low value transactions, and the viable implementation of smart&amp;nbsp;contracts. &lt;/p&gt;
&lt;h2&gt;The &lt;span class="caps"&gt;ICO&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;To my surprise, I realised that phase 1 of the Initial Coin Offering (&lt;span class="caps"&gt;ICO&lt;/span&gt;) was about to begin, and if I wanted I could acquire the rights to Ãons (the Ãternity token). During phase 1, 1 &lt;span class="caps"&gt;ETH&lt;/span&gt; would purchase 1100 Ãons. In early April 2017, 1 &lt;span class="caps"&gt;ETH&lt;/span&gt; was worth about&amp;nbsp;Â£38.&lt;/p&gt;
&lt;p&gt;I was willing to make a small and risky investment, but in order to do that I would need to work out how to convert my conventional Sterling into Bitcoin or Ether, in order to then purchase Ãons. The Ãternity website made it super easy to set up an Etherium wallet, and to use that wallet to invest in the Ãternity project, but buying Ether immediately and putting it in my new wallet proved to be&amp;nbsp;challenging. &lt;/p&gt;
&lt;p&gt;Helpfully, the Ãternity project had partnered with the Swiss firm &amp;#8216;Bitcoin Suisse &lt;span class="caps"&gt;AG&lt;/span&gt;&amp;#8217; who would directly convert to Ãons from fiat currencies, cutting out the need to purchase an intermediate digital currency. However once I&amp;#8217;d completed the identity checks and signed, scanned and sent the multiple forms, I realised I&amp;#8217;d need to pay a &amp;#8216;signing on&amp;#8217; fee of about Â£70. To Bitcoin Suisse&amp;#8217; credit though, they did manually approve my identification and contract within an&amp;nbsp;hour. &lt;/p&gt;
&lt;p&gt;At the time, I thought the project would still be a good investment even with this extra cost, but I determined to exhaust all other possibilities first. I&amp;#8217;m familiar with cryptocurrency wallets and public/private keys due to some &lt;a href="encryption.html"&gt;previous research&lt;/a&gt;, so I was able to immediately begin trying to set up an account with an&amp;nbsp;exchange.&lt;/p&gt;
&lt;h2&gt;Exchanges&lt;/h2&gt;
&lt;p&gt;What followed was a fairly chaotic few hours where I would sign-up to several exchanges and see how close I could get to purchasing either Bitcoin or Ether immediately, before realising I either had to wait 48 hours for security clearances, or provide additional details, or wait for manual verification of my scanned identity&amp;nbsp;documents. &lt;/p&gt;
&lt;p&gt;By the end of the evening I had a rough idea of which usernames, passwords and (small) sterling amounts had been submitted to each&amp;nbsp;exchange. &lt;/p&gt;
&lt;p&gt;After a couple of false starts, I used a combination of the &lt;a href="https://www.coinbase.com"&gt;Coinbase&lt;/a&gt; desktop website and their iOS app to purchase &lt;span class="caps"&gt;ETH&lt;/span&gt; up to their weekly limit, and then used multiple cards to increase my holding of &lt;span class="caps"&gt;ETH&lt;/span&gt;. The Coinbase app would bug out when processing a debit card payment and verifying the card details with the bank. This had initially led me to try other exchanges, where I would hit other roadblocks and delays. &lt;span class="caps"&gt;CEX&lt;/span&gt;.&lt;span class="caps"&gt;IO&lt;/span&gt;, for example, doesn&amp;#8217;t allow you to make trades in the first 48 hours (&lt;span class="caps"&gt;IIRC&lt;/span&gt;) after registering, which is reasonable enough unless you&amp;#8217;re in a&amp;nbsp;hurry. &lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Once I had a few Ether to my name, the rest of the process was simple. I was delighted to visit &lt;a href="https://etherscan.io/"&gt;Etherscan.io&lt;/a&gt; and view the details of my Etherium - Ãternity transactions almost immediately. This gave me a lot of confidence that I hadn&amp;#8217;t sent money into a void, and was a nice contrast to my (successful) experience buying bitcoin in early&amp;nbsp;2014. &lt;/p&gt;
&lt;p&gt;Finally, the simple tool to check your Ã balance at the bottom of Eternity&amp;#8217;s &lt;a href="https://wallet.Ãternity.com"&gt;contribution page&lt;/a&gt; assured me that I&amp;#8217;d made my investment successfully. To me, the Ãternity project stands as an exciting endeavor seeking to solve some widespread and highly valuable technical challenges, I hope they&amp;#8217;re successful and wish them&amp;nbsp;well.    &lt;/p&gt;</content><category term="Disintermediation"></category><category term="Fintech"></category><category term="Finance"></category><category term="Digital Currencies"></category><category term="Blockchains"></category><category term="DLT"></category><category term="Ãternity"></category><category term="ICO"></category></entry><entry><title>Encryption</title><link href="encryption.html" rel="alternate"></link><published>2016-08-30T23:04:00+02:00</published><updated>2016-08-30T23:04:00+02:00</updated><author><name>John Mathews</name></author><id>tag:None,2016-08-30:encryption.html</id><summary type="html">&lt;p&gt;Blockchains use Elliptical Curve Cryptography (&lt;span class="caps"&gt;ECC&lt;/span&gt;) to authenticate users and authorise transactions. These notes introduce the field of cryptography and explains how modern cryptographic methods work. I wrote them to teach myself about encryption &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;To begin with the absolute basics, encryption generally works by taking a message and representing â¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Blockchains use Elliptical Curve Cryptography (&lt;span class="caps"&gt;ECC&lt;/span&gt;) to authenticate users and authorise transactions. These notes introduce the field of cryptography and explains how modern cryptographic methods work. I wrote them to teach myself about encryption &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;To begin with the absolute basics, encryption generally works by taking a message and representing it as a series of numbers &lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt; which are then turned into a series of random looking numbers. Decryption works by turning the random looking numbers back into the original&amp;nbsp;message.&lt;/p&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;The historyÂ of Cryptography can be split into classical and modern eras. Modern cryptographyÂ began in 1977 with the introduction of the &lt;span class="caps"&gt;RSA&lt;/span&gt; and Diffie-Hellman algorithms. Â Until then, Cryptography required using a single key (theÂ secret code) to encrypt and decrypt the message. This was transferred from sender to receiver secretly, but not cryptographically. In classical cryptography, the code is aÂ &lt;em&gt;shared&lt;/em&gt;&amp;nbsp;secret.&lt;/p&gt;
&lt;p&gt;The modern era removed the requirement for a shared secret and instead used number theory as a basis for quantifying the strength of an encryption method. The strength of a modern cryptographic technique is quantifiable and provable by reference to number theory, rather than a users ability to transport or transfer a secret&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;Modern cryptography is defined by Public Key Cryptographic systems. They use one key (code) for encryption and another for decryption. The encryption key can be made public without any risk of the message being decrypted, and is therefore known as the public key. The key used to decrypt data is the private key, and must not be revealed.Â If a message is encrypted with the public key it can only be decrypted withÂ the private&amp;nbsp;key.&lt;/p&gt;
&lt;p&gt;Public Key Cryptographic (&lt;span class="caps"&gt;PKC&lt;/span&gt;) systems use algorithms that are easy to process in one direction but difficult to reverse, which are known as mathematical trap-door functions. A simple example of a trap-door function is the product of two prime numbers. If two random prime numbers are chosen, it is trivial to find their product. However if only the product of the two numbers is known, it is relatively difficult to find either of the factors used to create the number (this is factorisation). This was first noticed in 1874, when &lt;a href="https://en.wikipedia.org/wiki/William_Stanley_Jevons#Jevons.27_number"&gt;Jevons&lt;/a&gt;&amp;nbsp;remarked:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Can the reader say what two numbers multiplied together will produce the number 8,616,460,799?Â I think it unlikely that anyone but myself will ever&amp;nbsp;know.&amp;#8221;*&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This simple problem shows that finding the product of two (secret) prime numbers is computationally simple, but factorising the result is not. This type of problem is a key feature of modern cryptography. Factoring prime numbers is a super famous mathematical problem, it was studied byÂ &lt;a href="https://en.wikipedia.org/wiki/Eratosthenes"&gt;Eratosthenes&lt;/a&gt; &lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt; in the 3rd century &lt;span class="caps"&gt;BC&lt;/span&gt; and more recently the &lt;a href="https://en.wikipedia.org/wiki/RSA_Factoring_Challenge"&gt;&lt;span class="caps"&gt;RSA&lt;/span&gt; Factoring Challenge&lt;/a&gt;Â has intended to track state-of-the-art factorisation techniques by issues cash prizes for the factorisation of products of large&amp;nbsp;primes.&lt;/p&gt;
&lt;p&gt;Generally, the bigger the difference in difficulty between executingÂ the function and reversing it, the better the cryptographic&amp;nbsp;technique.&lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;RSA&lt;/span&gt; algorithm below uses factorisation as the foundation of its security, but factorisation is not the hardest problem to solve relative to the size of the keys required. Algorithms have been developed to factor the products of large prime numbers, and are much more efficient than randomly guessing possible factors. The greater the size of the primes being factored, the more efficient these algorithms become, and therefore the difference in difficulty between executing the function (multiplying two large primes) and reversing it (factorisation) becomes smaller as the size of the cryptographic key length increases. This is a problem because as public key cryptography becomes more commonly used the resources available to factor products of primes increases, and consequently larger keys are&amp;nbsp;required.&lt;/p&gt;
&lt;p&gt;Ultimately, encryption techniques based on the difficulty of factorisation will become redundant as the difficulty gap between creating and solving them shrinks. A better trap door function is&amp;nbsp;required.&lt;/p&gt;
&lt;h2&gt;Overview of the &lt;span class="caps"&gt;RSA&lt;/span&gt;&amp;nbsp;algorithm&lt;/h2&gt;
&lt;p&gt;Named after its founders (&lt;a href="https://en.wikipedia.org/wiki/Ron_Rivest" title="Ron Rivest"&gt;Ron Rivest&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Adi_Shamir" title="Adi Shamir"&gt;Adi Shamir&lt;/a&gt;, and &lt;a href="https://en.wikipedia.org/wiki/Leonard_Adleman" title="Leonard"&gt;Leonard Adleman&lt;/a&gt;), &lt;span class="caps"&gt;RSA&lt;/span&gt; was one of the first public-key encryption algorithms and is still widely&amp;nbsp;used.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;RSA&lt;/span&gt; (as well as other cryptographic techniques) makes use of a number line which loops back to zero after reaching a maximum value, rather than increasing indefinitely. This means that once a maximum number $n$Â has been defined, if a number greater than $n$ is created the result simply loops around to 0 and begins counting from 0 again. i.e. if $nÂ = 10$, then $7 + 5 = 12 - 10 = 2$. The result of a calculation on a looping number line may easily be found by doing long division and using the remainder as the final answer, i.e. $12 / 10 = 1$ with $2$&amp;nbsp;remaining.&lt;/p&gt;
&lt;h2&gt;Generation of a pair of &lt;span class="caps"&gt;RSA&lt;/span&gt;&amp;nbsp;keys:&lt;/h2&gt;
&lt;h3&gt;1. Generate the &lt;span class="caps"&gt;RSA&lt;/span&gt;&amp;nbsp;module&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Select two large random prime numbers, $p$Â and $q$. They need to be random because anyone who knows or guesses them will be able to decrypt the&amp;nbsp;encryption.&lt;/li&gt;
&lt;li&gt;Calculate $nÂ =&amp;nbsp;pq$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. Find derived number&amp;nbsp;(e)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;e&lt;/em&gt;Â must be greater than 1 and less than $( p - 1)( q -&amp;nbsp;1)$.&lt;/li&gt;
&lt;li&gt;There must be no common factor for eÂ andÂ $( p - 1)( q - 1)$ except for 1. &lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3. Form the public&amp;nbsp;key&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The pair of numbers $(n, e)$ form the public key and can be made&amp;nbsp;public.&lt;/li&gt;
&lt;li&gt;Even though $n$ is public, it is so difficult to factor the product of 2 large prime numbers that an attacker would not be able to find its component primes in the time available. The strength of &lt;span class="caps"&gt;RSA&lt;/span&gt; rests entirely on the difficulty of factoringÂ $n$Â into its two component prime&amp;nbsp;numbers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4. Generate the private key&amp;nbsp;(d)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The private key is generated from using $p$, $q$Â andÂ e as inputs to the Extended Euclidean Algorithm. For a given set of values, there is a unique answer&amp;nbsp;$d$.&lt;/li&gt;
&lt;li&gt;$d$Â is the inverse ofÂ $e$ modulo $( p - 1)( q - 1 )$.Â This means that $d$Â is the number less than $( p - 1 ) ( q - 1 )$Â such that when it is multiplied byÂ e, it is equal toÂ $1$Â modulo $( p - 1 ) ( q - 1&amp;nbsp;)$.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="caps"&gt;RSA&lt;/span&gt;&amp;nbsp;example:&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;RSA&lt;/span&gt; does not directly operate on strings as bits, it operates on numbers modulo (less than) $n$. and it isÂ necessary to represent plain text as a series of numbers less than $n$. The dominant encoding on the internet isÂ &lt;a href="https://en.wikipedia.org/wiki/UTF-8"&gt;&lt;span class="caps"&gt;UTF&lt;/span&gt;-8&lt;/a&gt;, which represents each upperÂ case Latin letter as a number between 65 and 90. Using this encoding, a message &amp;#8220;&lt;span class="caps"&gt;HELLO&lt;/span&gt;&amp;#8221; would become &amp;#8220;$72, 69, 76, 76,&amp;nbsp;79$&amp;#8221;.&lt;/p&gt;
&lt;p&gt;The maximum number $n$Â needs to be the product of the two prime numbers $p$ and $q$. For this example choose $p = 7$ and $q = 13$, so $nÂ  = 91$  &lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5"&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;The public key componentÂ &lt;em&gt;e&lt;/em&gt;Â can be any number we choose, Â as long as there is no number other than 1 which is a common factor of &lt;em&gt;e&lt;/em&gt;Â andÂ $( p - 1 ) ( q - 1 )$. In our example, this requires that there be no common factor between 72Â andÂ eÂ other than 1, so let &lt;em&gt;e&lt;/em&gt; $=&amp;nbsp;5$.&lt;/p&gt;
&lt;p&gt;Therefore our public key is (91, 5). This can be made available to anyone without messages being decrypted because of the difficulty of factoring the product of (very large) prime&amp;nbsp;numbers.&lt;/p&gt;
&lt;p&gt;Using the fact that we know 5 and 11 are the prime factors of 55 and e is 5, we can use the Extended Euclidean Algorithm Â to compute our private key $d$, which is&amp;nbsp;29.&lt;/p&gt;
&lt;p&gt;Therefore when the prime factors 7 and 13 are used, the public key is (91, 5) and the private key is (91, 29). These parameters fully define a functional &lt;span class="caps"&gt;RSA&lt;/span&gt;&amp;nbsp;system.&lt;/p&gt;
&lt;h3&gt;Encoding&lt;/h3&gt;
&lt;p&gt;To encode a letter H in a message (&amp;#8216;H&amp;#8217; is $72$ in &lt;span class="caps"&gt;UTF&lt;/span&gt;-8), we need to multiply it by itselfÂ $e$ times ($e = 5$), remembering to wrap around each time we pass our maximum value of $n =&amp;nbsp;91$.&lt;/p&gt;
&lt;p&gt;$72 \times 72 = 5184, 5184 / 91 = 56$ with $88$ remaining, (i.e. $5184 = 91 \times 56 + 88$). Therefore:
$72 \times 72 = 5184 = 88$
$88 \times 72 = 6336 = 57$
$57 \times 72 = 4104 = 9$
$9 \times 72 = 648 =&amp;nbsp;11$&lt;/p&gt;
&lt;p&gt;Therefore the encrypted value of &amp;#8220;H&amp;#8221; is&amp;nbsp;&amp;#8220;$11$&amp;#8221;&lt;/p&gt;
&lt;p&gt;Using the method for each character in the message &amp;#8220;&lt;span class="caps"&gt;HELLO&lt;/span&gt;&amp;#8221; results in the encoded message&amp;nbsp;&amp;#8220;\$11,62,20,20,53\$&amp;#8221;.&lt;/p&gt;
&lt;p&gt;To decrypt the message, we take each number and multiply it by itself $d$ times, ($d=29$) wrapping around each time we pass&amp;nbsp;$91$.&lt;/p&gt;
&lt;p&gt;$11 \times 11 = 121 = 30$
$30 \times 11 = 330 = 57$
&amp;#8230;
$57 \times 11 = 627 = 81$
$81 \times 11 = 891 =&amp;nbsp;72$&lt;/p&gt;
&lt;p&gt;And we&amp;#8217;re back to our original&amp;nbsp;encoding.&lt;/p&gt;
&lt;h2&gt;Files&lt;/h2&gt;
&lt;p&gt;The spreadsheet I used to calculate the encrypted and decrypted values can be downloadedÂ &lt;a href="RSA-Example.xlsx"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A simple python script to encrypt and decrypt a message is &lt;a href="AES_Example.py"&gt;here&lt;/a&gt;. It uses the &lt;span class="caps"&gt;AES&lt;/span&gt; encryption&amp;nbsp;method.&lt;/p&gt;
&lt;h3&gt;Footnotes&lt;/h3&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I used the explanationsÂ &lt;a href="http://www.tutorialspoint.com/cryptography/public_key_encryption.htm"&gt;here&lt;/a&gt; and &lt;a href="https://blog.cloudflare.com/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/"&gt;here&lt;/a&gt;Â a lot.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;A simple example is $A=1, B=2$ etc&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Eratosthenes invented his famousÂ &lt;a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes"&gt;sieving algorithm&lt;/a&gt; which finds all the primes up to a given limit.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;If this is the case then eÂ and ( p - 1) ( q - 1 )Â are called &amp;#8220;coprime&amp;#8221;&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;Whilst the Extended Euclidean Algorithm is apparently simple to compute, its description is not. Therefore I&amp;#8217;ve used the same numbers in the following example as in the tutorials &lt;a href="http://www.tutorialspoint.com/cryptography/public_key_encryption.htm"&gt;here&lt;/a&gt; and &lt;a href="http://arstechnica.com/security/2013/10/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/"&gt;here&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Disintermediation"></category><category term="Encryption"></category><category term="RSA"></category><category term="DLT"></category><category term="Blockchains"></category><category term="Bitcoin"></category><category term="Digital Currencies"></category><category term="Public Key Cryptography"></category></entry></feed>