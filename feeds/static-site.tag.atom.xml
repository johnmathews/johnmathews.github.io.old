<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>blog - Static Site</title><link href="/" rel="alternate"></link><link href="feeds/static-site.tag.atom.xml" rel="self"></link><id>/</id><updated>2017-06-01T18:00:00+02:00</updated><entry><title>Blogging with Pelican: Design, Plugins,Â Sharing</title><link href="pelican2.html" rel="alternate"></link><published>2017-06-01T18:00:00+02:00</published><updated>2017-06-01T18:00:00+02:00</updated><author><name>John Mathews</name></author><id>tag:None,2017-06-01:pelican2.html</id><summary type="html">&lt;p&gt;My site is optimised for speed and clarity. I&amp;#8217;ve added share buttons using a plugin which I modified and improved, and added meta tags to control how Twitter and Facebook show my articles in&amp;nbsp;feeds.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Design&lt;/h2&gt;
&lt;p&gt;My approach to building my blog is to keep it as simple as possible, only adding features when they make a significant improvement to how the content is understood and used. Therefore I&amp;#8217;ve done away with several features that would normally come baked into a WordPress theme. For example a footer full of links that would never be used, and a sidebar full of&amp;nbsp;distractions. &lt;/p&gt;
&lt;p&gt;I opted for a single column design that hopefully presents text-heavy articles clearly and intuitively (please leave a comment and tell me what you&amp;nbsp;think).&lt;/p&gt;
&lt;h2&gt;Plugins&lt;/h2&gt;
&lt;p&gt;My use of plugins to extend Pelican&amp;#8217;s functionality reflects this, there is the &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/neighbors"&gt;Neighbors&lt;/a&gt; plugin so that the next or previous post can be accessed from the bottom of a post without going back to the index, and the &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/tag_cloud"&gt;Tag Cloud&lt;/a&gt; plugin to reflect which subjects are written about the most (and provide a link to all relevant&amp;nbsp;articles).&lt;/p&gt;
&lt;h2&gt;Speed&lt;/h2&gt;
&lt;p&gt;The speed of the site is important because a faster site is more enjoyable to use. Therefore I&amp;#8217;ve minified the &lt;span class="caps"&gt;CSS&lt;/span&gt; and the JavaScript using the &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/assets"&gt;Assets&lt;/a&gt; plugin. I&amp;#8217;ve also set the &lt;span class="caps"&gt;CSS&lt;/span&gt; and JavaScript to load asynchronously. Images are optimised using the &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/optimize_images"&gt;Optimize Images&lt;/a&gt; plugin so that their file size is as small as possible and they download quickly. The site uses CloudFlare&amp;#8217;s free &lt;span class="caps"&gt;CDN&lt;/span&gt; features so hopefully no matter when you view the site from you get a decent page&amp;nbsp;speed.&lt;/p&gt;
&lt;h2&gt;Jinja&amp;nbsp;templates&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve also arranged the homepage so that posts are shown by their category and then by posting date. This may not work very well with a larger number of posts, but I&amp;#8217;ll only consider that problem once it presents itself. Designing for hypotheticals or conditions that don&amp;#8217;t yet exist is a waste of&amp;nbsp;time. &lt;/p&gt;
&lt;p&gt;There are examples of how I&amp;#8217;ve used Jinja templates below in the context of sharing my articles on Twitter and&amp;nbsp;Facebook.&lt;/p&gt;
&lt;h2&gt;Plugin: Share&amp;nbsp;Post&lt;/h2&gt;
&lt;p&gt;I noticed that my posts were beginning to get tweeted about, so I thought it would be useful to have some sharing buttons at the bottom of each post for Twitter, Facebook and Email. Looking at the Pelican Plugins repo on Github showed there was (as usual) a plugin for this (called &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/share_post"&gt;Share Post&lt;/a&gt;), though I noted it hadn&amp;#8217;t been updated for a couple of&amp;nbsp;years.&lt;/p&gt;
&lt;p&gt;Installing and initial set-up was simple thanks to the readme on the git repo. You need to copy the plugin folder to the plugins directory, and add the name of the plugin to the list in pelicanconf.py. Then you need to copy paste some Jinja/&lt;span class="caps"&gt;HTML&lt;/span&gt; into the article.html template. That&amp;#8217;s enough to make it&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;I noted though that when I shared to Twitter the text to be tweeted was encapsulated in quotes and there was a &amp;#8216;b&amp;#8217; at the front. I realised this was due to using Python 3.x when the plugin (which hadn&amp;#8217;t been updated for 2 years) was likely written for Python 2.x. A quick google and the obligatory trip to &lt;span class="caps"&gt;SO&lt;/span&gt; showed me how to convert a bytes string to a normal text&amp;nbsp;string. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Python 2&lt;/span&gt;
&lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Python 3&lt;/span&gt;
&lt;span class="n"&gt;tweet_as_byte&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet_as_byte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I also found that an article couldn&amp;#8217;t be shared to twitter from a mobile device and this was due to the &lt;span class="caps"&gt;URL&lt;/span&gt; being incorrectly formatted. The new &lt;span class="caps"&gt;URL&lt;/span&gt; format required separate arguments for the &lt;span class="caps"&gt;URL&lt;/span&gt;, additional text and the twitter&amp;nbsp;handle:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Incorrect&lt;/span&gt;
&lt;span class="n"&gt;twitter_link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://twitter.com/home?status=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;

&lt;span class="c1"&gt;# Correnct&lt;/span&gt;
&lt;span class="n"&gt;twitter_link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://twitter.com/share?url=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;text=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;via=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t_handle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Using meta-data to specify tweet&amp;nbsp;text&lt;/h2&gt;
&lt;p&gt;I thought it would be cool to add some default text to a tweet, as I&amp;#8217;ve enjoyed this feature on other blogs when I&amp;#8217;ve found a post I wanted to share on Twitter. - A user may know they want to share an article but if they&amp;#8217;re in a hurry it might be hard to find the right words, so why not provide a ready-made tweet. The text is editable so it&amp;#8217;s only a&amp;nbsp;suggestion.&lt;/p&gt;
&lt;p&gt;The text would be different for each post so it makes sense to specify it when writing the article. The article &amp;#8216;summary&amp;#8217; would be too long, and I know that Pelican supports arbitrary meta-data tags. I assumed that Jinja would pick up the data the same way it picks up the &amp;#8216;standard&amp;#8217; meta-data and added a function to&amp;nbsp;share_post.py.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;article_tweet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tweet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html.parser&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once this function was working it was simply a case of calling the function and assigning the output to a variable I called &amp;#8220;Tweet&amp;#8221;, and then adding &amp;#8220;Tweet&amp;#8221; to the text string to be included in a tweets&amp;nbsp;text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;article_tweet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tweet_as_byte&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet_as_byte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;t_handle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There was a bit of fiddling around to make sure that the number of spaces between each part of the tweet was correct, but nothing as complicated as when making &lt;a href="time-until.html"&gt;Time Until&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Specifying the text and image in a Facebook&amp;nbsp;share&lt;/h2&gt;
&lt;p&gt;Sharing to Facebook worked without any formatting problems, but it bugged me that the opening text of the article was being used in the preview that was shared to Facebook when I had a summary already prepared and that would be much more useful to potential readers. For some articles I also had an article image that I wanted to see being&amp;nbsp;used. &lt;/p&gt;
&lt;p&gt;Googling revealed that I needed to use particular meta tags in the webpage&amp;#8217;s header if I wanted to control what Facebook would pickup. Facebook uses the &amp;#8220;open graph&amp;#8221; standards so I would need the headers in my article pages to include the&amp;nbsp;following: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;`&lt;span class="c"&gt;&amp;lt;!-- Open Graph data --&amp;gt;&lt;/span&gt;`
`&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;og:title&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Title Here&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;`
`&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;og:type&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;article&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;`
`&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;og:url&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.example.com/&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;`
`&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;og:image&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://example.com/image.jpg&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;`
`&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;og:description&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Description Here&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I could see that I already had some meta tags being generated using the Jinja templates so I set about copy-pasting and modifying them to build the new tags. I had some issues with trailing white space or line breaks being included within the content string. This was solved like&amp;nbsp;so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;{# Adding &amp;#39;-&amp;#39; after and before the %&amp;#39;s strips white space and line breaks #}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;description&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;article.summary&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.summary&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;striptags&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;truncate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="o"&gt;)|&lt;/span&gt;&lt;span class="nf"&gt;e&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;else&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.content&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;striptags&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;truncate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="o"&gt;)|&lt;/span&gt;&lt;span class="nf"&gt;e&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;endif&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;description&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I also needed to use some blocks more than once, because a description tag was already included but Facebook wants an &amp;#8220;og:description&amp;#8221;, and Twitter wants a &amp;#8220;Twitter:Description&amp;#8221; too. All three of these tags will include the same text (generated in the Jinja2 snippet above). If a block only needs to be used once then it&amp;#8217;s generated like&amp;nbsp;this; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;meta name=&amp;quot;description&amp;quot; content=&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;description&lt;/span&gt; &lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;description&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But If you call &amp;#8220;{% block description %}{% endblock description %}&amp;#8221; again Jinja will throw you an error. The documentation (and &lt;span class="caps"&gt;SO&lt;/span&gt;) reveal that the solution is to&amp;nbsp;use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;meta property=&amp;quot;og:description&amp;quot; content=&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;self.description&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This allows you to reuse blocks multiple times and keep your templates&amp;nbsp;tidy.&lt;/p&gt;
&lt;p&gt;Finally, when I was testing Facebook to see if the correct text or image was being picked up I was initially frustrated to see that the new tags were not having any effect. This is because Facebook crawls your site and saves what it finds. If you want it to take a fresh look at your page with its new meta tags, you need to tell Facebook to crawl the page again, using the &lt;a href="https://developers.facebook.com/tools/debug/"&gt;Facebook linter/debugger&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;You can see the new sharing buttons below, please click them and see what&amp;nbsp;happens!&lt;/p&gt;
&lt;p&gt;Note: My first article describing how I began to use Pelican is &lt;a href="pelican.html"&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="Tools"></category><category term="Pelican"></category><category term="Jinja"></category><category term="Python"></category><category term="Twitter"></category><category term="Facebook"></category><category term="Blog"></category><category term="Static Site"></category></entry><entry><title>Blogging withÂ Pelican</title><link href="pelican.html" rel="alternate"></link><published>2017-04-28T01:21:00+02:00</published><updated>2017-04-28T01:21:00+02:00</updated><author><name>John Mathews</name></author><id>tag:None,2017-04-28:pelican.html</id><summary type="html">&lt;p&gt;I switched to Pelican from Wordpress so that I could design the blog I wanted. Creating a blog in Pelican is a great way to learn &lt;span class="caps"&gt;HTML&lt;/span&gt;, &lt;span class="caps"&gt;CSS&lt;/span&gt;, Jinja templates and&amp;nbsp;Git.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I began blogging in 2016, I became more aware of how blogs are designed. Many of my favorting blogs had simple designs which made it easier to focus on the content, and they loaded really fast. (E.g.  &lt;a href="https://unwiredcouch.com"&gt;unwiredcouch.com&lt;/a&gt; and &lt;a href="https://www.curiousgnu.com"&gt;CuriousGnu&lt;/a&gt;). I wanted this for my blog, too. I&amp;#8217;d used Wordpress to build and publish my blog which was a great way to begin, but I felt I was compromising on its design and functionality. I wanted to have control over my blog&amp;#8217;s&amp;nbsp;features. &lt;/p&gt;
&lt;p&gt;This led me to static sites which contain only fixed content and are faster to load and easier to design than one built using a dynamic blogging platform such as Wordpress. Because I was already familiar with Python I chose &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; rather than another static site generator such as&amp;nbsp;Jekyll.&lt;/p&gt;
&lt;p&gt;There are plenty of sites to tell you how to start blogging in Pelican, so here I will focus on my experience after the initial set-up. When I was learning how to begin, I found &lt;a href="http://mathamy.com/migrating-to-github-pages-using-pelican.html"&gt;Amy Hanlons&lt;/a&gt; blog particularly useful and&amp;nbsp;clear.&lt;/p&gt;
&lt;h2&gt;The learning&amp;nbsp;curve&lt;/h2&gt;
&lt;p&gt;â¦ was longer than I expected. Since setting out to switch from Wordpress to Pelican, I&amp;#8217;ve taught myself enough of the following tools to hack this site together. I&amp;#8217;m really happy about this because these tools could be used in future projects&amp;nbsp;too.&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;I find &lt;span class="caps"&gt;HTML&lt;/span&gt; quirky but intuitive. Tags make sense, comments are laborious and learning by google is relatively quick. Whatever it is I&amp;#8217;m trying to do (like add a link to jump back to the top of the page) someone will have posted the answer&amp;nbsp;somewhere.&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;CSS&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Writing &lt;span class="caps"&gt;CSS&lt;/span&gt; feels a lot more concise that &lt;span class="caps"&gt;HTML&lt;/span&gt; but it also felt impossible to learn without taking a step back and reading an introductory course. Usually I learn by hacking new phrases together from existing examples so it was frustrating to go backwards before progressing. There was a lightbulb moment when I realised &lt;span class="caps"&gt;CSS&lt;/span&gt; Selectors were a thing, and realising &lt;span class="caps"&gt;CSS&lt;/span&gt; files get called in the header (usually) of an &lt;span class="caps"&gt;HTML&lt;/span&gt;&amp;nbsp;fileâ¦&lt;/p&gt;
&lt;p&gt;I ended up using a trial subscription to &lt;a href="https://www.thinkful.com/bootcamp/web-development/"&gt;Thinkfuls&lt;/a&gt; Front-end developer course, which is pretty good at explaining how &lt;span class="caps"&gt;CSS&lt;/span&gt; is structured and how to arrange content on a page. If I still had access, I&amp;#8217;d be completing the second half of the course&amp;nbsp;:)&lt;/p&gt;
&lt;h3&gt;Jinja&amp;nbsp;templates&lt;/h3&gt;
&lt;p&gt;Jinja is a tool written in Python to create &lt;span class="caps"&gt;HTML&lt;/span&gt; pages. It doesn&amp;#8217;t look intuitive to me, but I&amp;#8217;ve been able to get enough done by copy-pasting similar snippets from other parts of the theme I started with (&lt;a href="https://github.com/molivier/nest"&gt;Thanks Molivier!&lt;/a&gt;) to make the changes I wanted. I&amp;#8217;d like to learn more as it seems really&amp;nbsp;powerful.&lt;/p&gt;
&lt;h3&gt;Pelican&lt;/h3&gt;
&lt;p&gt;To build a website using Pelican, you need to run commands from the terminal. There are various commands but I found myself using only a few regularly. &amp;#8220;Pelican-quickstart&amp;#8221; will generate a project skeleton to get you started. &amp;#8220;make devserver&amp;#8221; will initialise a local server and generate output files so that I can view changes locally before uploading (its opposite is &amp;#8220;make stopserver&amp;#8221;). Finally &amp;#8220;pelican content -s publishconf.py&amp;#8221; generates the html and css for remote hosting. Some of the plugins I use such as &amp;#8220;Assets&amp;#8221; which minifies the &lt;span class="caps"&gt;CSS&lt;/span&gt; only work when publshconf.py is called, which confused me initially as I didn&amp;#8217;t think it was working when I was only using &amp;#8220;make&amp;nbsp;devserver&amp;#8221;. &lt;/p&gt;
&lt;h3&gt;Git&lt;/h3&gt;
&lt;p&gt;This really challenged me, and I still don&amp;#8217;t feel like I know what I&amp;#8217;m doing. Git is far more powerful than I need it to be, when all I want to do is undo some erroneous edits and upload a new version of the site to&amp;nbsp;Github. &lt;/p&gt;
&lt;p&gt;I can stage and commit files, I can create local and remote repo&amp;#8217;s from the command line. I can change a remote&amp;#8217;s &lt;span class="caps"&gt;URL&lt;/span&gt;, reset a repo and force a push or a pull. That&amp;#8217;s all. I haven&amp;#8217;t tried to merge or to create a test branch, and if some part of the process goes wrong it usually takes hours to make it right&amp;nbsp;again. &lt;/p&gt;
&lt;p&gt;This is one tool for which the awesome &lt;span class="caps"&gt;SO&lt;/span&gt; and Google cannot magic up the exact right answer immediatly,&amp;nbsp;unfortunately. &lt;/p&gt;
&lt;p&gt;For example, there is still an output folder in the source repo that isâ¦ mysterious to me. Its not the real output, its a version frozen in time from a few weeks ago, and it has an &amp;#8220;@&amp;#8221; in its name. I don&amp;#8217;t know how it got there. It was created one afternoon in a blur of frustrated google queries and copy/paste/hope terminal&amp;nbsp;commands. &lt;/p&gt;
&lt;p&gt;I find git&amp;#8217;s commands the least intuitive of all the tools I use, with its preceeding single dashes and double dashes, and random words thrown into the middle of otherwise reasonable&amp;nbsp;commands. &lt;/p&gt;
&lt;p&gt;But Git is ubiquitous and Github is awesome, so I will learn&amp;nbsp;it. &lt;/p&gt;
&lt;h2&gt;Github pages with an external &lt;span class="caps"&gt;URL&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;You&amp;#8217;ll need to add a file called &lt;span class="caps"&gt;CNAME&lt;/span&gt; to the repo containing the output. &lt;span class="caps"&gt;CNAME&lt;/span&gt; should contain the address of your site in lowercase.&amp;nbsp;Simple.&lt;/p&gt;
&lt;p&gt;You&amp;#8217;ll also need to update the &lt;span class="caps"&gt;DNS&lt;/span&gt; records of your domain name to point the name at Github&amp;#8217;s servers. For Github, you need two &amp;#8220;A Records&amp;#8221; with host type &amp;#8220;@&amp;#8221; and values &amp;#8220;192.30.252.153&amp;#8221; and &amp;#8220;192.30.252.154&amp;#8221; respectively. You also need a &lt;span class="caps"&gt;CNAME&lt;/span&gt; record with host type &amp;#8220;www&amp;#8221; and the value equal to &amp;#8220;username.github.io&amp;#8221;. It took about 12 hours for the changes to propagate, and during that time I had variable success loading the&amp;nbsp;site. &lt;/p&gt;
&lt;h2&gt;Plugins&lt;/h2&gt;
&lt;p&gt;One thing I didn&amp;#8217;t want when moving away from Wordpress was a site bloated with features that didn&amp;#8217;t make the content easier to read. However I found I still needed a few plugins to optimise my site and provide some basic functionality that doesn&amp;#8217;t come with the vanilla&amp;nbsp;Pelican.&lt;/p&gt;
&lt;h3&gt;iPython&amp;nbsp;notebooks&lt;/h3&gt;
&lt;p&gt;Super useful, as all I need to do to publish a notebook as a webpage is copy the .ipynb file into the context directory and add a sidecar .ipynb-meta file with standard meta data. This functionality is one of the main reasons why Pelican is popular with data bloggers. (Though &lt;a href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; is another&amp;nbsp;option).&lt;/p&gt;
&lt;h3&gt;Neighbors&lt;/h3&gt;
&lt;p&gt;At the end of a post there should be a link to the previous and next blog posts - I was surprised this wasn&amp;#8217;t included as standard. After putting the plugin in the plugins folder and updating pelicanconf.py, you need to copy a couple of jinja snippets into a template, and maybe add some css to make the links look&amp;nbsp;nice.&lt;/p&gt;
&lt;h3&gt;Optimise&amp;nbsp;images&lt;/h3&gt;
&lt;p&gt;Make those images as small as possible to help make the site as fast as possible. Add the plugin, update pelicanconf.py, and thats&amp;nbsp;all.&lt;/p&gt;
&lt;h3&gt;Assets&lt;/h3&gt;
&lt;p&gt;Before I started working with Pelican, minifying css and JavaScript would have been too advanced. But once &lt;a href="https://tools.pingdom.com/"&gt;Pingdom&lt;/a&gt; and Google &lt;a href="https://developers.google.com/speed/pagespeed/insights/"&gt;Pagespeed&lt;/a&gt; started criticising me for my multiple .css files, I accepted the&amp;nbsp;challenge. &lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;m super happy wth the websites design and speed. It&amp;#8217;s designed the way I want it, and I&amp;#8217;ve learnt a ton of useful stuff along the&amp;nbsp;way. &lt;/p&gt;
&lt;p&gt;Update: My second post about blogging in Pelican is &lt;a href="pelican2.html"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="Tools"></category><category term="Pelican"></category><category term="Blog"></category><category term="Python"></category><category term="Static Site"></category></entry></feed>