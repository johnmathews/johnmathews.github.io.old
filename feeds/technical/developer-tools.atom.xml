<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>John Mathews - Technical/Developer Tools</title><link href="https://johnmathews.eu/" rel="alternate"/><link href="https://johnmathews.eu/feeds/technical/developer-tools.atom.xml" rel="self"/><id>https://johnmathews.eu/</id><updated>2021-04-21T11:09:19+02:00</updated><entry><title>Learning - April 2021</title><link href="https://johnmathews.eu/learning-april-2021.html" rel="alternate"/><published>2021-04-21T11:09:19+02:00</published><updated>2021-04-21T11:09:19+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-21:/learning-april-2021.html</id><summary type="html"/><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#google-cloud-platform-service-accounts"&gt;Google Cloud Platform Service Accounts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ansible"&gt;Ansible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ssh"&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vagrant"&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="google-cloud-platform-service-accounts"&gt;&lt;a href="https://www.youtube.com/playlist?list=PLIivdWyY5sqIlPnZ7cvkg2Ck-8ZZ8TA5t"&gt;Google Cloud Platform Service Accounts&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;It seems like I’m looking for some general overview of how roles are managed,
viewed, compared, and inherited.&lt;/p&gt;
&lt;p&gt;How can you tell if a users (or a service accounts) roles are adequate, or
too much or too little for a particular task? And what’s the difference
between a user having some roles, and a user using a service account that
has those roles. &lt;/p&gt;
&lt;p&gt;It would also be nice to have some kind of adversarial test, that would
identify how/if users or service accounts can create identities with more
flexible permissions that their own.&lt;/p&gt;
&lt;p&gt;These short videos are good, but they’re not a complete solution. I’m not sure
where to look next.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube-nocookie.com/embed/xXk1YlkKW_k" title="YouTube video player" width="560"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h1 id="ansible"&gt;&lt;a href="https://www.youtube.com/playlist?list=PL2_OBreMn7FplshFCWYlaN2uS8et9RjNG"&gt;Ansible&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Based on Jeff Geerlings book. There are 15 episodes. Jeff seems like a great
guy. I’m going to try listen to one of these each day.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube-nocookie.com/embed/goclfp6a2IQ" title="YouTube video player" width="560"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h1 id="ssh"&gt;&lt;a href="https://www.youtube.com/watch?v=hQWRp-FdTpc&amp;amp;list=PLQGMHRkCCyDw5arrPInZT_T8TbDdzmeBp&amp;amp;index=4"&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;br/&gt;&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube-nocookie.com/embed/hQWRp-FdTpc" title="YouTube video player" width="560"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/ssh-essentials-working-with-ssh-servers-clients-and-keys"&gt;This&lt;/a&gt;
is also a very useful article. I made notes from it in another &lt;a href="https://johnmathews.eu/ssh-notes.html"&gt;post&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="vagrant"&gt;&lt;a href="https://www.youtube.com/watch?v=vBrezgo&amp;amp;list=PLQGMHRkCCyDw5arrPInZT_T8TbDdzmeBp&amp;amp;index=2X"&gt;Vagrant&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;br/&gt;&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube-nocookie.com/embed/vBreXjkizgo" title="YouTube video player" width="560"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Good for local development. (Especially when on aeroplanes?)&lt;/li&gt;
&lt;li&gt;Not as good for cloud providers as Terraform.&lt;/li&gt;
&lt;li&gt;No more snowflake servers.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Technical/Developer Tools"/><category term="learning"/><category term="youtube"/><category term="ansible"/><category term="ssh"/><category term="vagrant"/><category term="gcp"/><category term="service-accounts"/><category term="iam"/></entry><entry><title>SSH-Notes</title><link href="https://johnmathews.eu/ssh-notes.html" rel="alternate"/><published>2021-04-21T10:21:15+02:00</published><updated>2021-04-21T10:21:15+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-21:/ssh-notes.html</id><summary type="html"/><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#background"&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#authentication"&gt;Authentication&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#passwords-and-keys"&gt;Passwords and Keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#handshake"&gt;Handshake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="background"&gt;Background&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Secure Shell lets you securely connect to remote servers. You connect using
   an account that exists on the remote server. Once you’ve connected you’ll be
   dropped into a shell session.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The computer you connect from is the “local” or “client” computer. The
   computer you connect to is the “host” or the “server”.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you’re connected to the server using &lt;span class="caps"&gt;SSH&lt;/span&gt;, any commands you input from
   the client are sent securely and privately (through a “tunnel”) to the remote
   computer, where the commands are executed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt; is implemented using the client-server model. The server must be running
   a small app to listen for &lt;span class="caps"&gt;SSH&lt;/span&gt; connections. This kind of app is
   called a daemon (pronounced day-mon). For &lt;span class="caps"&gt;SSH&lt;/span&gt; to work, the host must be
   running the &lt;span class="caps"&gt;SSH&lt;/span&gt; daemon. The &lt;span class="caps"&gt;SSH&lt;/span&gt; daemon listens for connections on a specific
   port (22), authenticates connections requests, and (if the connection
   request is approved) it will spawn the correct environment. The correct
   environment is a terminal session.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The client (the computer you connect from) must be running an &lt;span class="caps"&gt;SSH&lt;/span&gt; client,
   which is a small app that can communicate using the &lt;span class="caps"&gt;SSH&lt;/span&gt; protocol. (A
   protocol is a set of rules.) It needs to be able to receive information
   about which host to connect to, which user to connect as and which
   credentials to use when trying to connect.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="authentication"&gt;Authentication&lt;/h1&gt;
&lt;h2 id="passwords-and-keys"&gt;Passwords and Keys&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Clients authenticate using passwords or keys. Passwords are less secure than
   keys. Keys are very secure. You can also connect using no authentication by
   specifying a particular &lt;span class="caps"&gt;IP&lt;/span&gt; address I think.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Passwords are encrypted, and are conceptually familiar, but can (and will)
   be brute forced. There are tools that will block repeated attempts or
   block/allow authentication attempts from particular &lt;span class="caps"&gt;IP&lt;/span&gt; addresses.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt; keys using public and private (or secret) key pairs and are very secure.
   Keys are generated in pairs.  The public key can be shared freely without
   concern. The secret key must be kept as secure and secret as a password.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To authenticate using a key pair, the client must have both keys (a key
   pair) on their computer. The server must have the public key in a file
   called &lt;code&gt;authorized_keys&lt;/code&gt;. If the server has the private key then something
   has gone wrong and you should be alarmed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The server stores the public keys of users who can connect as a particular
   user in the file &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;. The file contains a list of
   public keys, one public key on each row.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The default location to store the public key on the remote server is in the
   users home folder in a subdirectory called &lt;code&gt;.ssh/authorized_keys&lt;/code&gt;. The full
   path would be &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="handshake"&gt;Handshake&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When a client wants to connect to a server using &lt;span class="caps"&gt;SSH&lt;/span&gt;, it tells the server
   which public key to use. The server then checks in the &lt;code&gt;authorized_keys&lt;/code&gt; file
   for the public key. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A unique session &lt;span class="caps"&gt;ID&lt;/span&gt; is generated and shared between the client and server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the server has the same public key that the client sent when it  began
   the connection attempt, the server generates a random string and encrypts
   it using the public key. This random string can only be decrypted using the
   private (secret) key associated with the public key.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The server sends the encrypted string to the client. The client decrypts it
   using the secret key and combines the original random string with the
   session &lt;span class="caps"&gt;ID&lt;/span&gt;. The client then hashes the combined string and sends the hash
   back to the server. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The server already has the hash of the string combining the original random
   string and the session &lt;span class="caps"&gt;ID&lt;/span&gt;. If the hash from the client matches the hash on
   the server, the server can be sure that the client has the private key.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/ssh-essentials-working-with-ssh-servers-clients-and-keys"&gt;Source&lt;/a&gt;&lt;/p&gt;</content><category term="Technical/Developer Tools"/><category term="ssh"/><category term="linux"/><category term="security"/></entry><entry><title>ChezMoi</title><link href="https://johnmathews.eu/chezmoi.html" rel="alternate"/><published>2021-04-20T11:46:46+02:00</published><updated>2021-04-20T11:46:46+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-20:/chezmoi.html</id><summary type="html"/><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#background"&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#razor"&gt;Razor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#one-question"&gt;One Question&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#command-reference"&gt;Command Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#links"&gt;Links&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="background"&gt;Background&lt;/h1&gt;
&lt;p&gt;Chezmoi seems to be dotfiles management for power users. Until a few days ago,
when I realised I’d massively broken a lot of things, I’d been putting my
dotfiles in a version controlled directory and using a shell script to generate
symlinks in my home directory.&lt;/p&gt;
&lt;p&gt;This had worked really well for several years. It’s a great system for
maintaining dotfiles on a single machine. But it’s not robust or flexible enough
for managing multiple machines or multiple operating systems.&lt;/p&gt;
&lt;p&gt;Also, it’s not just files that sit in &lt;em&gt;$home&lt;/em&gt; anymore, I need to track
configuration files that live in other places too&lt;sup id="sf-chezmoi-1-back"&gt;&lt;a class="simple-footnote" href="#sf-chezmoi-1" title="For example, every file in $HOME/.vim/ftplugin/ should be version controlled."&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;I needed something more robust and flexible than generating symlinks from a
bash script.&lt;/p&gt;
&lt;h1 id="razor"&gt;Razor&lt;/h1&gt;
&lt;p&gt;I think I read somewhere that when purchasing a new appliance you should buy
the cheapest you think you can get away with, and if that doesn’t work then get
the best you can afford. Moving from a custom bash script to Chezmoi is an
example of this. My custom bash script was the most basic approach, and it
broke badly. Chezmoi seems like the most heavy duty tool for dotfiles management
I could find.&lt;/p&gt;
&lt;p&gt;For example, I think I’m able to encrypt my files using 1Password or similar.
I can use Jinja templates to create scripts for different scenarios. I
don’t even know what that means at the moment. I’ve only scratched the surface
but I’m happily managing dotfiles across different machines and
updating/modifying them safely. Chezmoi (aliased to cm) is free and &lt;span class="caps"&gt;OSS&lt;/span&gt; so I’m
confident it’ll be “my” tool for the next few decades. I’m happy to invest a
couple of hours to learn a few new habits and iron out a few
wrinkles&lt;sup id="sf-chezmoi-2-back"&gt;&lt;a class="simple-footnote" href="#sf-chezmoi-2" title="Happily, it seems like the amount of time required to learn or become familiar with a new tool is decreasing. I guess this is to be expected as experience increases but nonetheless it’s gratifying to realise.Dotfiles management was a fairly new and interesting concept when I first began symlinking into my home directory. It still feels amazing to bootstrap a fresh machine and have it feel like home in just a few minutes, but the technicalities of it are now familiar."&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h1 id="one-question"&gt;One Question&lt;/h1&gt;
&lt;p&gt;I don’t understand why &lt;code&gt;chezmoi cd&lt;/code&gt; creates a new shell in order to jump into the
Chezmoi directory. Why not simply &lt;code&gt;cd&lt;/code&gt; into the Chezmoi directory? What’s the
advantage/necessity of a new shell?&lt;/p&gt;
&lt;p&gt;You have to remember to &lt;code&gt;exit&lt;/code&gt; after you’ve done whatever you went there to do,
but my habit is to &lt;code&gt;cd&lt;/code&gt; or &lt;code&gt;z ..&lt;/code&gt;. I guess it’s nice to exit and then
immediately go back to where ever you were before, but there are other ways of
doing that - you could write the current directory to an environment variable.
It seems unnecessarily complex.&lt;/p&gt;
&lt;h1 id="command-reference"&gt;Command Reference&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Show which files have changed → &lt;strong&gt;cm status&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List of managed files → &lt;strong&gt;cm managed&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List of unmanaged files → &lt;strong&gt;cm unmanaged&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start tracking a file → &lt;strong&gt;cm add &lt;/strong&gt;&lt;/p&gt;&lt;dir file=""&gt;&lt;p&gt;&lt;/p&gt;
&lt;/dir&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update a file, add the file again → &lt;strong&gt;cm add ..&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edit tracked version of file → &lt;strong&gt;cm edit &lt;file&gt;&lt;/file&gt;&lt;/strong&gt; - don’t think I’m going to
    use this, I’d rather edit the source file, test it, and then update using
    &lt;strong&gt;cm add ..&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Differences between local version tracked versions → &lt;strong&gt;cm diff &lt;file&gt;&lt;/file&gt;&lt;/strong&gt; -
    this tells me which files I need to &lt;strong&gt;cm add&lt;/strong&gt; again. This feels clunky and I
    suspect there is a better workflow. Parsing git style diff files is horrible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clobber local version with the tracked version → &lt;strong&gt;cm apply&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dry run and see diff between local version and tracked version → &lt;strong&gt;cm -nv apply&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pull the latest changes from your repo and apply them → &lt;strong&gt;cm update&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove a file →&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create &lt;strong&gt;.chezmoiremove&lt;/strong&gt; in the source directory&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;chezmoi apply –remove –dry-run –verbose&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type &lt;strong&gt;cm&lt;/strong&gt; instead of &lt;strong&gt;chezmoi&lt;/strong&gt; → &lt;strong&gt;alias cm=”chezmoi”&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="links"&gt;Links&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/twpayne/chezmoi"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chezmoi.io/"&gt;Project Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-chezmoi-1"&gt;For example, every file
in &lt;code&gt;$HOME/.vim/ftplugin/&lt;/code&gt; should be version controlled. &lt;a class="simple-footnote-back" href="#sf-chezmoi-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-chezmoi-2"&gt;Happily, it seems like the amount of time required to learn or
become familiar with a new tool is decreasing. I guess this is to be expected
as experience increases but nonetheless it’s gratifying to realise.&lt;br class="mb-3"/&gt;Dotfiles
management was a fairly new and interesting concept when I first began
symlinking into my home directory. It still feels amazing to bootstrap a fresh
machine and have it feel like home in just a few minutes, but the
technicalities of it are now familiar. &lt;a class="simple-footnote-back" href="#sf-chezmoi-2-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Developer Tools"/><category term="linux"/></entry><entry><title>I Leaked Credentials Onto A Public GitHub Repo</title><link href="https://johnmathews.eu/i-leaked-credentials-onto-a-public-github-repo.html" rel="alternate"/><published>2021-04-15T19:19:35+02:00</published><updated>2021-04-15T19:19:35+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-15:/i-leaked-credentials-onto-a-public-github-repo.html</id><summary type="html"/><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#dont-post-secrets-to-public-github-repositories"&gt;Don’t post secrets to public GitHub repositories.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#background"&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-hack"&gt;The hack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#remediation"&gt;Remediation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#questions"&gt;Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#study"&gt;Study&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#comments"&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="dont-post-secrets-to-public-github-repositories"&gt;Don’t post secrets to public GitHub repositories.&lt;/h1&gt;
&lt;p&gt;I made this mistake a while ago, and in the interests of openness and learning
from others, I’d like to describe what happened. Maybe it’ll help others avoid
the mistake, and maybe I’ll learn something from any conversation this article generates.&lt;/p&gt;
&lt;h1 id="background"&gt;Background&lt;/h1&gt;
&lt;p&gt;Using Google Cloud Platform (&lt;span class="caps"&gt;GCP&lt;/span&gt;), I’ve been doing some work across multiple
compute instances. Thankfully, the work wasn’t business critical or on
production systems.  My account was isolated  away from the rest of the business.&lt;/p&gt;
&lt;p&gt;As the number of servers I was working with increased, I realised I needed to
begin using some tools to automate server setup. This lead me to begin using
Ansible, and once I’d cobbled together a working playbook I pushed my Ansible
project to my GitHub account… And accidentally leaked the key for an
account I’d been using.&lt;/p&gt;
&lt;h1 id="the-hack"&gt;The hack&lt;/h1&gt;
&lt;p&gt;Within a couple of minutes of pushing the repository to GitHub I:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Made the repository private.&lt;/li&gt;
&lt;li&gt;Stopped tracking the keys in git and removed them from the cache &lt;code&gt;git rm -r --cached &lt;dir&gt;&lt;/dir&gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Received an email from Google saying they’d found leaked credentials.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class="caps"&gt;OK&lt;/span&gt;, close call. The secret was leaked for less than 5 minutes. On my obscure
personal GitHub.&lt;/p&gt;
&lt;p&gt;I thought there was nothing to worry about.. But then I noticed some activity
in the console.&lt;/p&gt;
&lt;p&gt;Compute instances were being created, I could see the list growing rapidly.
Over the next few minutes 195 compute instances and disks were being created,
each with a unique name in zones across the world. The format of the name was
&lt;code&gt;node-&lt;type&gt;-&lt;number&gt;&lt;/number&gt;&lt;/type&gt;&lt;/code&gt;. Where type was either application, backup, jenkins,
gke, prod, staging, worker, www, build, redis, or runner. Maybe some others
too. The number seemed to be 5 random digits.&lt;/p&gt;
&lt;p&gt;Some of the instances were ephemeral. They all had delete protection enabled. I
checked the details of a few of them and noticed some scripts that included
references to Monero.&lt;/p&gt;
&lt;p&gt;So I guess a Monero mining bot was being set up.&lt;/p&gt;
&lt;p&gt;The logs showed that &lt;span class="caps"&gt;GKE&lt;/span&gt; and networking resources had also been requested, but
the account which the stolen credentials belonged to didn’t have the necessary
permissions. Our project also maxed out its quota of compute instances in
multiple regions and zones.&lt;/p&gt;
&lt;h1 id="remediation"&gt;Remediation&lt;/h1&gt;
&lt;p&gt;I deleted the account that had been leaked, and began quantifying the
damage. I wanted to know exactly what permissions the key had, which
resources could be created, and could the leaked account be used to create
other accounts? No, it can’t.&lt;/p&gt;
&lt;p&gt;After looking around and becoming confident that it was &lt;em&gt;only&lt;/em&gt; 195 compute
instances with disks and delete protection that had been created, in regions
and zones across the globe, I began to remove them. No other resources had been provisioned.&lt;/p&gt;
&lt;p&gt;It took me 10 minutes and some googling to create the following workflow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Get all the compute instances and dump them into a file. I expected to run a
   script that iterated through the file line by line, setting variables based
   on the content of the current line: &lt;code&gt;gcloud compute instances list --format 'csv[no-heading](name, zone)' &amp;gt; names.txt&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Vim, find the rows that contain the instances that I don’t want to
   delete, and remove these from the file. There are a handful of compute
   instances I want to keep, and 195 that I want to remove. &lt;code&gt;:v/node-&lt;/code&gt; shows
   any rows that &lt;em&gt;don’t&lt;/em&gt; include “node-”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Loop through the file and for each row, which contains the instance name and its zone,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remove delete protection&lt;/li&gt;
&lt;li&gt;Delete the instance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nv"&gt;IFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;, &lt;span class="nb"&gt;read&lt;/span&gt; -r name zone
  &lt;span class="k"&gt;do&lt;/span&gt; gcloud compute instances update &lt;span class="nv"&gt;$name&lt;/span&gt; --zone &lt;span class="nv"&gt;$zone&lt;/span&gt; --no-deletion-protection &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; gcloud compute instances delete &lt;span class="nv"&gt;$name&lt;/span&gt; --zone &lt;span class="nv"&gt;$zone&lt;/span&gt; --quiet
&lt;span class="k"&gt;done&lt;/span&gt; &amp;lt; names.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;--quiet&lt;/code&gt; flag is necessary because otherwise gcloud will ask me to confirm
that I want to delete the instance otherwise.&lt;/p&gt;
&lt;h1 id="questions"&gt;Questions&lt;/h1&gt;
&lt;p&gt;I’m surprised by the speed with which the attacker found the leaked
credentials. The repo did not belong to the clients account but my own, and I
assume that my account is obscure enough to not be on any interesting lists. If
my account is being scanned every few minutes, presumably all accounts are
being scanned regularly.&lt;/p&gt;
&lt;p&gt;How many resources are required to do that? I guess if one of these attacks
works you can use the stolen compute to scan more repositories for more leaked
credentials. It’s easy to imagine scenarios where large corporations that are
already running complicated cloud infrastructure deployments wouldn’t notice a
few (200?) unauthorized compute instances running.&lt;/p&gt;
&lt;h1 id="study"&gt;Study&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLIivdWyY5sqIlPnZ7cvkg2Ck-8ZZ8TA5t"&gt;Service accounts&lt;/a&gt; on Google Cloud Platform.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=goclfp6a2IQ&amp;amp;t=1962s"&gt;Ansible&lt;/a&gt; videos.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=hQWRp-FdTpc"&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt;&lt;/a&gt; crash course.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/vBrezgoX"&gt;Vagrant&lt;/a&gt; crash course.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/26479562/what-does-ifs-do-in-this-bash-loop-cat-file-while-ifs-read-r-line-do/26480210"&gt;&lt;span class="caps"&gt;IFS&lt;/span&gt;=&lt;/a&gt; syntax explanation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="comments"&gt;Comments&lt;/h1&gt;
&lt;p&gt;There was some useful &lt;a href="https://lobste.rs/s/5vwctk/i_leaked_credentials_onto_public_github"&gt;discussion&lt;/a&gt; about this article on Lobste.rs.&lt;/p&gt;</content><category term="Technical/Developer Tools"/><category term="hack"/><category term="github"/><category term="service-account"/><category term="keys"/><category term="security"/></entry><entry><title>Ansible</title><link href="https://johnmathews.eu/ansible.html" rel="alternate"/><published>2021-04-12T11:40:41+02:00</published><updated>2021-04-12T11:40:41+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-12:/ansible.html</id><summary type="html"/><content type="html">&lt;h1 id="background"&gt;Background&lt;/h1&gt;
&lt;p&gt;I’ve been spending a lot of time lately working on nodes for various blockchain
projects (Polkadot, Cardano, Tron, Binance Chain, Ethereum, …). The rosetta
api spec is super interesting, but like most things in crypto the documentation
is sometimes wrong or incomplete and there are bugs and undocumented features. &lt;/p&gt;
&lt;p&gt;Each of the nodes runs on a separate server, and we typically have one node for
mainnet and another for testnet.  I’m working across mutiple servers, doing
difficult stuff, and I want it to be as easy as possible.&lt;/p&gt;
&lt;p&gt;I need to reduce friction and cognitive load.&lt;/p&gt;
&lt;p&gt;Accessing the servers is easy - I use Tmux with the
&lt;a href="https://github.com/tmux-plugins/tmux-continuum"&gt;continuum&lt;/a&gt; and
&lt;a href="https://github.com/tmux-plugins/tmux-resurrect"&gt;resurrect&lt;/a&gt; plugins and
maintain different sessions for each type of server. This makes accessing
multiple servers during the same work day really simple and effortless. But
working on the servers is still awkward.&lt;/p&gt;
&lt;p&gt;On my dev machine I have &lt;code&gt;zsh&lt;/code&gt; with syntax highlighting, command completion,
and various tools, like &lt;a href="https://github.com/agkozak/zsh-z"&gt;z&lt;/a&gt; to make
navigation supper easy. I also have a lot of aliases defined. E.g. &lt;code&gt;..&lt;/code&gt; → &lt;code&gt;cd
..&lt;/code&gt;. Working on a remote server should be as convenient and familiar as working
on my local machine, so I want to find a way to configure a server the same way
as my laptop, and I want to do it automatically so that it can be done many
times, with no additional effort.&lt;/p&gt;
&lt;h1 id="ansible"&gt;Ansible&lt;/h1&gt;
&lt;p&gt;Ansible seems to be popular because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It’s free&lt;/li&gt;
&lt;li&gt;It’s got all the features and capabilities you’re going to need&lt;/li&gt;
&lt;li&gt;It’s agentless - you don’t need to install anything on the machine you want
   to control - you can use Ansible with anything that you can ssh into.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I used the following resources to get started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This &lt;a href="https://www.youtube.com/watch?v=w9eCU4bGgjQ"&gt;useful video&lt;/a&gt; gave me some
    orientation and helped me figure out what I was aiming for and how to get
    started. Before watching it, I didn’t know “which way was up”.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This &lt;a href="http://matthieure.me/2018/12/31/ansible_inventory_plugin.html"&gt;blog
    post&lt;/a&gt; showed
    me how to create an inventory using the &lt;code&gt;gcp_compute&lt;/code&gt; plugin.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I spent a lot of time being unnecessarily confused about service accounts.
    I guess until you have 1 success at understanding something you don’t know
    if you’ve misunderstood by a little or a lot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once you have an inventory of servers that you want to connect to, you
    still need to specify (and prepare for) how you will connect to them. I’d
    hoped that the &lt;code&gt;gcp_compute&lt;/code&gt; plugin would do some heavy lifting for me in
    this step, but it seems not. It &lt;em&gt;can&lt;/em&gt; do lots of useful stuff like
    creating instances and specifying disk space and networks, but it won’t
    really help you ssh into an instance. No matter though…&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This &lt;a href="https://alex.dzyoba.com/blog/gcp-ansible-service-account/"&gt;blog post&lt;/a&gt;
    turned out to be just what I needed. I found it at the beginning of my
    search when I was trying to create an inventory, and discarded it as almost
    useful. Turns out that &lt;code&gt;OS Login&lt;/code&gt; is the best way to ssh into a &lt;span class="caps"&gt;GCE&lt;/span&gt;
    instance and once you’ve got your inventory taken care of, this blog post
    really helps.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When I was installing python modules, I had some errors about pyenv shims
being incorrect. The scripts were looking for versions that weren’t present.
Running &lt;code&gt;pyenv reshash&lt;/code&gt; fixed it. Kind of magically, but annoying.&lt;/p&gt;
&lt;p&gt;Setting up a service account and giving it the correct permissions took more
time and was more confusing than anything to do with Ansible.&lt;/p&gt;
&lt;p&gt;I found this &lt;a href="https://www.arthurkoziel.com/setting-up-vim-for-yaml/"&gt;blog post&lt;/a&gt;
about setting up vim for &lt;code&gt;yml&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;The preferred way to install ansible on Mac is using &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When you use &lt;code&gt;OS Login&lt;/code&gt; the username you have when you ssh into the compute
instance will change. This &lt;a href="https://superuser.com/questions/1379434/google-compute-engine-ssh-different-username-after-switching-to-os-login"&gt;&lt;span class="caps"&gt;SO&lt;/span&gt;
question&lt;/a&gt;
explains why.&lt;/p&gt;
&lt;h1 id="commands"&gt;Commands&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gcloud auth list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible-config view|list|dump&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible-inventory -i inventory.compute.gcp.yml --graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible -i inventory.compute.gcp.yml all -m ping&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Technical/Developer Tools"/><category term="ansible"/><category term="servers"/><category term="ssh"/><category term="automation"/></entry><entry><title>Vim: GoTo Tag Definition</title><link href="https://johnmathews.eu/vim-notes-goto-tag-definition.html" rel="alternate"/><published>2021-03-31T15:57:00+02:00</published><updated>2021-03-31T15:57:00+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-31:/vim-notes-goto-tag-definition.html</id><summary type="html"/><content type="html">&lt;h2 id="update-2021-03-31"&gt;Update (2021-03-31):&lt;/h2&gt;
&lt;p&gt;Just use neovim.coc instead of YouCompleteMe or Syntastic.&lt;/p&gt;
&lt;p&gt;It’s faster, easier to setup, and works intuitively. &lt;span class="caps"&gt;ALE&lt;/span&gt; is still wonderful and
useful, though there’s a lot of overlap - coc can lint as well.&lt;/p&gt;
&lt;h2 id="jump-lists-and-change-lists"&gt;Jump Lists and Change Lists&lt;/h2&gt;
&lt;p&gt;If you’re going to be jumping around to where things are defined, you will need
to know how to jump back again. It seems there are two lists you need to be
aware of, the &lt;em&gt;jump list&lt;/em&gt;&lt;sup id="sf-vim-notes-goto-tag-definition-1-back"&gt;&lt;a class="simple-footnote" href="#sf-vim-notes-goto-tag-definition-1" title=":help jumplist"&gt;1&lt;/a&gt;&lt;/sup&gt; and the &lt;em&gt;change
list&lt;/em&gt;&lt;sup id="sf-vim-notes-goto-tag-definition-2-back"&gt;&lt;a class="simple-footnote" href="#sf-vim-notes-goto-tag-definition-2" title=":help changelist"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3 id="jump-list"&gt;Jump List&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A list of locations that the cursor has jumped to.&lt;/li&gt;
&lt;li&gt;Relevant to jumping to a definition.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-o&gt;&lt;/c-o&gt;&lt;/code&gt; move up the jump list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-i&gt;&lt;/c-i&gt;&lt;/code&gt; mode down the jump list&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="change-list"&gt;Change List&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A list of locations where a change was made.&lt;/li&gt;
&lt;li&gt;A change is something that can be undone using &lt;code&gt;u&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'.&lt;/code&gt; will move you to the &lt;code&gt;.&lt;/code&gt; mark.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; is a special mark that is automatically set at the location of your last edit.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;''&lt;/code&gt; will bring you back to where you were before your last jump&lt;/li&gt;
&lt;li&gt;&lt;code&gt;g;&lt;/code&gt; and &lt;code&gt;g,&lt;/code&gt;  will also move you up and down the &lt;code&gt;change list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="mt-10 -mb-5 border-double border-t-4 border-gray-500 dark:border-gray-200"/&gt;
&lt;h2 id="original-post"&gt;Original Post:&lt;/h2&gt;
&lt;p&gt;There are multiple ways of doing anything with vim, including going to where a
function or object is defined, and I usually need to do something at least 3 times
before I can do it without breaking my focus or train of thought.&lt;/p&gt;
&lt;p&gt;My memory is hazy but I remember spending a 1/2 day looking into this and
considering which solution I wanted to commit to.&lt;sup id="sf-vim-notes-goto-tag-definition-3-back"&gt;&lt;a class="simple-footnote" href="#sf-vim-notes-goto-tag-definition-3" title="The more powerful the tool, the more worthwhile it is to take a closer look at what it can and can’t do."&gt;3&lt;/a&gt;&lt;/sup&gt; My options seemed to be between
&lt;a href="https://github.com/ycm-core/YouCompleteMe"&gt;YouCompleteMe&lt;/a&gt; and
&lt;a href="https://github.com/dense-analysis/ale"&gt;&lt;span class="caps"&gt;ALE&lt;/span&gt;&lt;/a&gt;. [Update!&lt;sup id="sf-vim-notes-goto-tag-definition-4-back"&gt;&lt;a class="simple-footnote" href="#sf-vim-notes-goto-tag-definition-4" title="YCM and ALE work fine for goto definition and linting, but they don’t give me satisfactory autocompletion. neoclide/coc.nvim looks like it might offer some improvements. neoclide/coc.nvim"&gt;4&lt;/a&gt;&lt;/sup&gt;]&lt;/p&gt;
&lt;p&gt;I can’t remember everything I read and tried, but I trust my conclusions.
Looking in my &lt;code&gt;.vimrc&lt;/code&gt; I see that I have &lt;code&gt;&lt;leader&gt;x&lt;/leader&gt;&lt;/code&gt; mapped to &lt;code&gt;:YcmCompleter
GoTo&lt;/code&gt; and it works just fine, even when a module is imported from somewhere
outside the current project. The tool was working and ready to use, I just
hadn’t internalized it yet.&lt;/p&gt;
&lt;h2 id="commands-to-remember"&gt;Commands to remember:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;leader&gt;x&lt;/leader&gt;&lt;/code&gt; - GoTo definition - YCMs best guess at an ‘intelligent’ goto
command, whether its a declaration or a definition.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;f2&gt;&lt;/f2&gt;&lt;/code&gt; - Toggle tagbar&lt;/li&gt;
&lt;/ul&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-vim-notes-goto-tag-definition-1"&gt;&lt;code&gt;:help jumplist&lt;/code&gt; &lt;a class="simple-footnote-back" href="#sf-vim-notes-goto-tag-definition-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-vim-notes-goto-tag-definition-2"&gt;&lt;code&gt;:help changelist&lt;/code&gt; &lt;a class="simple-footnote-back" href="#sf-vim-notes-goto-tag-definition-2-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-vim-notes-goto-tag-definition-3"&gt;The more powerful the
tool, the more worthwhile it is to take a closer look at what it can and can’t
do. &lt;a class="simple-footnote-back" href="#sf-vim-notes-goto-tag-definition-3-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-vim-notes-goto-tag-definition-4"&gt;&lt;span class="caps"&gt;YCM&lt;/span&gt; and
&lt;span class="caps"&gt;ALE&lt;/span&gt; work fine for goto definition and linting, but they don’t give me
satisfactory autocompletion. &lt;code&gt;neoclide/coc.nvim&lt;/code&gt; looks like it might offer some
improvements.
&lt;a href="https://www.vimfromscratch.com/articles/vim-for-python/"&gt;neoclide/coc.nvim&lt;/a&gt; &lt;a class="simple-footnote-back" href="#sf-vim-notes-goto-tag-definition-4-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>Python Notes</title><link href="https://johnmathews.eu/python-notes-2.html" rel="alternate"/><published>2021-03-17T09:12:00+01:00</published><updated>2021-03-17T09:12:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-17:/python-notes-2.html</id><summary type="html"/><content type="html">&lt;h1 id="95_call__"&gt;__call__()&lt;/h1&gt;
&lt;p&gt;In Python, every time you call a function or method such as &lt;code&gt;my_function()&lt;/code&gt; or
&lt;code&gt;my_class.my_method()&lt;/code&gt; the interpreter will replace the &lt;code&gt;(&lt;/code&gt; with
&lt;code&gt;.__call__(&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Prefixer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then use &lt;em&gt;prefixer&lt;/em&gt; like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;simonsays&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Prefixer&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Simon says: "&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; simonsays&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"jump up high!"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;'Simon says: jump up high!'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Every time you call a function or method, you’re really just calling a built in
&lt;code&gt;__call__&lt;/code&gt; method.&lt;/p&gt;
&lt;h1 id="there-should-be-one-and-preferably-only-one-obvious-way-to-do-something"&gt;There should be one, and preferably only one, obvious way to do something&lt;/h1&gt;
&lt;p&gt;It’s in the ‘zen of Python’, which is a set of guidelines that help make
design decisions. It’s a choice that Python made, and other languages do it differently.&lt;/p&gt;
&lt;p&gt;There are different
&lt;a href="https://johnmathews.eu/python-notes.html#levels-of-python-code"&gt;levels&lt;/a&gt; to
languages and this applies more to the idiom level than the design pattern
level. It applies even less at the architectural level where there can be
several equally good ways of organizing business logic and data representations.&lt;/p&gt;
&lt;p&gt;Perl has the “&lt;span class="caps"&gt;TMTOWTDI&lt;/span&gt;” (tim towtdi) principle - “There’s More Than One Way To Do
It”. Perl’s philosophy is to give users more than one way to do something.&lt;/p&gt;</content><category term="Technical/Developer Tools"/><category term="python"/><category term="learning notes"/></entry><entry><title>More VIM Notes</title><link href="https://johnmathews.eu/more-vim-notes.html" rel="alternate"/><published>2021-03-04T14:44:00+01:00</published><updated>2021-03-04T14:44:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-04:/more-vim-notes.html</id><summary type="html"/><content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;q:&lt;/code&gt; - opens the command line window. Good for yanking and viewing previous commands&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:UltiSnipsEdit&lt;/code&gt; - opens the ultiSnips file for the current buffers filetype.
    See which snippets are defined.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://thevaluable.dev/vim-advanced/"&gt;The Valuable Dev&lt;/a&gt;&lt;/em&gt; has the following gems that I’d like to start using.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gf&lt;/code&gt; - edit the file at the file path under the cursor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gx&lt;/code&gt; - open the file at the file path under the cursor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;[m&lt;/code&gt;, &lt;code&gt;]m&lt;/code&gt; - move to the start or end of a method &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@:&lt;/code&gt; - repeat the last command&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:&lt;c-f&gt;&lt;/c-f&gt;&lt;/code&gt; - open command history list&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; will indent a line. &lt;code&gt;.&lt;/code&gt; will repeat the operation, so &lt;code&gt;&amp;gt;&amp;gt;..&lt;/code&gt; would indent
    a line 3 times.&lt;/p&gt;
&lt;p&gt;You can use this along with a count, which will do the indention for &lt;code&gt;n&lt;/code&gt; number
of lines (with the current line being the top line). &lt;code&gt;3&amp;gt;&amp;gt;..&lt;/code&gt; will indent 3
lines 3 blocks to the right.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;c-y&gt;&lt;/c-y&gt;&lt;/code&gt; - moves screen up one line, and moves the cursor if it would go off
    the screen&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;c-e&gt;&lt;/c-e&gt;&lt;/code&gt; - moves the screen down one lines, and moves the cursor if the would
    go off screen&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;c-f&gt;&lt;/c-f&gt;&lt;/code&gt; - move screen down one page, with cursor at top of screen&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;c-b&gt;&lt;/c-b&gt;&lt;/code&gt; - move screen up one page, with cursor at bottom of screen&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.vimfromscratch.com/articles/vim-for-python/"&gt;Vim for Python&lt;/a&gt;&lt;/em&gt; has some great notes on linting and code completion plugins that
I’ve either copied or was more or less doing already.&lt;/p&gt;</content><category term="Technical/Developer Tools"/><category term="tips"/><category term="vim"/></entry><entry><title>Two Years Of Vim</title><link href="https://johnmathews.eu/two-years-of-vim.html" rel="alternate"/><published>2021-03-04T10:44:00+01:00</published><updated>2021-03-04T10:44:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-04:/two-years-of-vim.html</id><summary type="html"/><content type="html">&lt;p&gt;I’ve been feeling very comfortable with my Vim + Tmux setup recently.
Navigating around shells and files isn’t taking much mental effort anymore. Wohoo!&lt;/p&gt;
&lt;p&gt;It’s taken about 2 years of working full time with vim to get to the stage
where the commands are so intuitive that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I pepper text files outside of vim (email, notes, etc) with vim keys
     accidentally - &lt;code&gt;j&lt;/code&gt; &lt;code&gt;k&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; etc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I can’t remember what the command is to do something if I’m not actually
     doing it. When I need to do an action, I do it from muscle
     memory and I only pay attention to the underlying key press if something
     goes wrong.&lt;/p&gt;
&lt;p&gt;This is noticeable when trying to find an unbound key combination for some
 new action, or when reading an article about vim and thinking “that’s new”
 when actually I’ve been doing it without noticing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A pleasant surprise has been that it doesn’t take much effort to
     rebind a single command and retrain myself to use it. This is presumably
     because the mental effort for all the other commands has become negligible.
     In the early days, retraining a key combination took a lot more effort
     because I was already making an effort to get used to doing things in Vim.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I can work even when my vision is blurry (and my speech slurred and my head
     heavy) because I can use text objects and navigation commands to get to
     where I know text is. I’m not saying I &lt;em&gt;should&lt;/em&gt; work when I’m that tired,
     but I can, if I’m already familiar with the code/file.. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>nohup and Background Processes</title><link href="https://johnmathews.eu/nohup-and-background-processes.html" rel="alternate"/><published>2021-03-02T13:10:00+01:00</published><updated>2021-03-02T13:10:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-02:/nohup-and-background-processes.html</id><summary type="html"/><content type="html">&lt;h1 id="stop-stuff-from-stopping"&gt;Stop stuff from stopping&lt;/h1&gt;
&lt;p&gt;If you run a command in a terminal session and the terminal session is
disconnected, the processes running in it will also be terminated.&lt;/p&gt;
&lt;p&gt;I discovered this when I was trying to download a ~500gb database
overnight. I logged in the next morning expecting to see a completed download, but
found I only had half the file.&lt;/p&gt;
&lt;h1 id="use-nohup-to-ignore-hup-signals"&gt;Use &lt;code&gt;nohup&lt;/code&gt; to ignore &lt;code&gt;HUP&lt;/code&gt; signals&lt;/h1&gt;
&lt;p&gt;One solution to this seems to be to use &lt;code&gt;nohup&lt;/code&gt;, a command that
ignores the &lt;code&gt;HUP&lt;/code&gt; signal. It stops your programme from stopping if the terminal
session its running in is stopped.&lt;/p&gt;
&lt;p&gt;By convention, the &lt;code&gt;HUP&lt;/code&gt; signal is the method used by a terminal to warn
dependent processes that it is about to logout.&lt;/p&gt;
&lt;p&gt;You probably want to run &lt;code&gt;nohup&lt;/code&gt; in the background. You might want to prevent
it from creating &lt;code&gt;nohup.out&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="close-or-redirect-fd0-fd2"&gt;Close or redirect fd0 - fd2&lt;/h1&gt;
&lt;p&gt;On Linux,  &lt;code&gt;nohup&lt;/code&gt; automatically closes &lt;code&gt;stdin&lt;/code&gt;. If you’re using MacOS or &lt;span class="caps"&gt;BSD&lt;/span&gt;
this doesn’t automatically happen, so you might want to redirect it yourself.
This is because if a background process tries to read anything from &lt;code&gt;stdin&lt;/code&gt;
then it will pause itself whilst it waits for you to bring it to the foreground
and type some input. This is probably a waste of time.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;nohup&lt;/code&gt; detects that you have redirected &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; then it won’t
create &lt;code&gt;nohup.out&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As with all commands, if you put &lt;code&gt;&amp;amp;&lt;/code&gt; at the end of the command, it will run in
the background. You can bring it to the foreground by running &lt;code&gt;fg&lt;/code&gt;, or see a
list of jobs by running &lt;code&gt;jobs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you redirect input to /dev/null (&lt;code&gt;) you will stop the program
from receiving keyboard (stdin) input, but you won’t prevent it from accessing
the terminal directly. Also you haven’t removed the program from the shell’s
process group.&lt;/code&gt;&lt;/p&gt;
&lt;h1 id="stopping-signals-using-disown"&gt;Stopping signals using &lt;code&gt;disown&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;If you want to remove a program from the shell’s process group, then
immediately after you’ve run the command to start your programme, run &lt;code&gt;disown&lt;/code&gt;
with no arguments. This will make the background process no longer associated
with the shell job and it wont have any signals forwarded to it by the shell.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;disown&lt;/code&gt;ed process gets nothing (no signals) sent to it by the shell. But
without a &lt;code&gt;nohup&lt;/code&gt; it will still be sent a &lt;code&gt;HUP&lt;/code&gt; signal sent via other means,
such as a manual &lt;code&gt;kill&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;nohup&lt;/code&gt;ed process will ignore any and all &lt;code&gt;HUP&lt;/code&gt; signal, no matter how they
are sent.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/10408816/how-do-i-use-the-nohup-command-without-getting-nohup-out"&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="update-2021-03-31"&gt;Update (2021-03-31):&lt;/h1&gt;
&lt;p&gt;Use &lt;code&gt;w&lt;/code&gt; to see who is logged in and what they are doing. It’s summary of every
user logged into a computer, what each user is currently doing, and the
load all the current activity.&lt;/p&gt;
&lt;p&gt;It’s a combination of &lt;code&gt;who&lt;/code&gt;, &lt;code&gt;uptime&lt;/code&gt;, and &lt;code&gt;ps -a&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="process-groups"&gt;Process Groups&lt;/h2&gt;
&lt;p&gt;A collection of one or more processes. It’s used to control the distribution of
a signal. When a signal is directed to a process group, the signal is delivered
to each process that is a member of the group.&lt;/p&gt;
&lt;h2 id="sessions"&gt;Sessions&lt;/h2&gt;
&lt;p&gt;A collection of one or more process groups. A process may not create a process
group that belongs to another session. A process is not permitted
to join a process group that is a member of another session. A process
is not permitted to migrate from one session to another.&lt;/p&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>File Descriptors and /dev/null</title><link href="https://johnmathews.eu/file-descriptors.html" rel="alternate"/><published>2021-03-02T11:36:00+01:00</published><updated>2021-03-02T11:36:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-02:/file-descriptors.html</id><summary type="html"/><content type="html">&lt;h2 id="devnull"&gt;/dev/null&lt;/h2&gt;
&lt;p&gt;In Linux everything is a file, including virtual devices like keyboards. Processes
(programmes) can request access to or from these devices.&lt;/p&gt;
&lt;p&gt;The only difference between these virtual device “files” and real files, is
that for a virtual device the &lt;span class="caps"&gt;OS&lt;/span&gt; generates the data that goes into the file,
instead of reading the data from storage.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/dev/null&lt;/code&gt; is a virtual device that looks like a file and is used to write
output into a black hole that is discarded, lost forever and never seen. It
isn’t written to the terminal.&lt;/p&gt;
&lt;h2 id="file-descriptors"&gt;File Descriptors&lt;/h2&gt;
&lt;p&gt;File descriptors are integer values assigned to a file. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;stdin&lt;/strong&gt; has a file descriptor of 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;stdout&lt;/strong&gt; has a file descriptor of 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;stderr&lt;/strong&gt; has a file descriptor of 2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Two outputs are generated whenever a &lt;span class="caps"&gt;CLI&lt;/span&gt; is run &lt;code&gt;stdout&lt;/code&gt; and
&lt;code&gt;stderr&lt;/code&gt;. By default, both these data streams are associated with the
terminal. You can use file descriptors to redirect them.&lt;/p&gt;
&lt;p&gt;If a command exits successfully, the exit status is 0.&lt;/p&gt;
&lt;p&gt;If it exits unsuccessfully, the exit status will be something else.&lt;/p&gt;
&lt;p&gt;If you don’t specify which file descriptor you want to use, bash will use
&lt;code&gt;stdout&lt;/code&gt; by default.&lt;/p&gt;
&lt;p&gt;The following redirects &lt;code&gt;stdout&lt;/code&gt; away from the terminal and into &lt;code&gt;/dev/null&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; “Hello World” &amp;gt; log.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will redirect &lt;code&gt;stderr&lt;/code&gt; into a file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ asdfadsa &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt; error.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you run a command that generates lots of error messages along with “good”
messages, you can redirect all the error messages (&lt;code&gt;stderr&lt;/code&gt;) into &lt;code&gt;/dev/null&lt;/code&gt;
so that you can only see the useful &lt;code&gt;stdout&lt;/code&gt; messages. e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ grep -r hello /sys/ &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt; /dev/null
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you want to run a command and only see the errors, (&lt;code&gt;stderr&lt;/code&gt;) then you can
filter out all the &lt;code&gt;stdout&lt;/code&gt; by redirecting the &lt;code&gt;stdout&lt;/code&gt; messages to
&lt;code&gt;/dev/null&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ping google.com &lt;span class="m"&gt;1&lt;/span&gt;&amp;gt; /dev/null
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="redirect-all-output-into-devnull-if-you-want-a-command-to-run-quietly"&gt;Redirect all output into /dev/null if you want a command to run quietly,&lt;/h2&gt;
&lt;p&gt;Redirect all the output. The command below redirects &lt;code&gt;stdout&lt;/code&gt; to &lt;code&gt;/dev/null&lt;/code&gt;
(the default file descriptor is 1 if it isn’t specified) and then redirects
file descriptor 2 into file descriptor 1.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ grep -r hello /sys/ &amp;gt; /dev/null &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="read-input-from-a-file-instead-of-the-terminal"&gt;Read input from a file instead of the terminal&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;infile &lt;="" pre=""&gt;&lt;/infile&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="direct-stderr-to-append-to-a-particular-file"&gt;Direct stderr to append to a particular file&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&amp;gt;logfile
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="combining-file-descriptors"&gt;Combining file descriptors&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; means send &lt;code&gt;stderr&lt;/code&gt; wherever &lt;code&gt;stdout&lt;/code&gt; is going. This means that you’ve
combined &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; into one data stream and you can’t separate them
anymore. It also means you can pipe &lt;code&gt;stderr&lt;/code&gt; the same as you can &lt;code&gt;stdout&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="input"&gt;Input&lt;/h1&gt;
&lt;p&gt;You can redirect &lt;code&gt;stdin&lt;/code&gt; similarly. If you run &lt;code&gt; then if the program
attempt to read from &lt;code&gt;stdin&lt;/code&gt; then it will get end-of-file. &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The merge (or redirect) syntax (for example &lt;code&gt;&amp;lt;&amp;amp;2&lt;/code&gt;) won’t work, because you can
only redirect in the same direction.&lt;/p&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>Microservices, Docker, Azure</title><link href="https://johnmathews.eu/microservices_events_docker.html" rel="alternate"/><published>2021-02-02T13:31:00+01:00</published><updated>2021-02-02T13:31:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-02-02:/microservices_events_docker.html</id><summary type="html"/><content type="html">&lt;p&gt;This is a great presentation about microservices and event driven architectures.&lt;/p&gt;
&lt;div class="relative" style="padding-top: 56.25%"&gt;
&lt;iframe allow="autoplay; encrypted-media" allowfullscreen="" class="absolute inset-0 w-full h-full" frameborder="0" src="https://www.youtube.com/embed/sSm2dRarhPo"&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;And this is a comprehensive overview of Azure&lt;/p&gt;
&lt;div class="relative" style="padding-top: 56.25%"&gt;
&lt;iframe allow="autoplay; encrypted-media" allowfullscreen="" class="absolute inset-0 w-full h-full" frameborder="0" src="https://www.youtube.com/embed/NKEFWyqJ5XA"&gt;
&lt;/iframe&gt;
&lt;/div&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>Notes From “Mastering Vim Quickly”</title><link href="https://johnmathews.eu/notes-from-mastering-vim-quickly.html" rel="alternate"/><published>2021-01-21T16:22:00+01:00</published><updated>2021-01-21T16:22:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-21:/notes-from-mastering-vim-quickly.html</id><summary type="html"/><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#verbs"&gt;Verbs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#registers"&gt;Registers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#insert-mode"&gt;Insert Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#normal-mode"&gt;Normal Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#command-mode"&gt;Command Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#visual-block-mode-ltc-vgt"&gt;Visual Block Mode &lt;c-v&gt;&lt;/c-v&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ranges"&gt;Ranges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#searching"&gt;Searching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#undo"&gt;Undo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#splits"&gt;Splits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#macros"&gt;Macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#other"&gt;Other&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="verbs"&gt;Verbs&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; - delete char under cursor and enter Insert Mode.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt; - replace char under cursor.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c/hello&lt;/code&gt; - change until next occurrence of ‘hello’&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="registers"&gt;Registers&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;"ayy&lt;/code&gt; yank the entire row into register &lt;code&gt;a&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"Ay&lt;/code&gt; yank to register A and append the new text to the existing contents of
    the register.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:registers&lt;/code&gt; - preview the contents of your registers.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="insert-mode"&gt;Insert Mode&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&lt;c-w&gt;&lt;/c-w&gt;&lt;/code&gt; - delete back one word.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-u&gt;&lt;/c-u&gt;&lt;/code&gt; - delete back to the start of the line or start of current insert.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cgn&lt;/code&gt; - if you are searching for a word (either by using &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;#&lt;/code&gt;)
   and you want to change each instance of the search result, use &lt;code&gt;&lt;verb&gt;gn&lt;/verb&gt;&lt;/code&gt; to
   &lt;em&gt;change&lt;/em&gt; or &lt;em&gt;delete&lt;/em&gt; and then go to the next result. This will let you use
   the &lt;code&gt;.dot&lt;/code&gt; operator to repeat both the steps (moving and changing).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-r&gt; 0&lt;/c-r&gt;&lt;/code&gt; - paste. &lt;code&gt;&lt;c-r&gt;&lt;c-p&gt;0&lt;/c-p&gt;&lt;/c-r&gt;&lt;/code&gt; if there are new-line chars causing trouble.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="normal-mode"&gt;Normal Mode&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&lt;c-a&gt;&lt;/c-a&gt;&lt;/code&gt; or &lt;code&gt;&lt;c-x&lt; code=""&gt; increase or decrease a number.&lt;/c-x&lt;&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="command-mode"&gt;Command Mode&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;set ft?&lt;/code&gt; - find out which filetype is loaded.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="visual-block-mode-ltc-vgt"&gt;Visual Block Mode &lt;code&gt;&lt;c-v&gt;&lt;/c-v&gt;&lt;/code&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Select a column of numbers you want to increment, then &lt;code&gt;g&lt;c-a&gt;&lt;/c-a&gt;&lt;/code&gt; will turn
   them into an incremented list.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="ranges"&gt;Ranges&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;:put =range(1,10)&lt;/code&gt; - insert a list of ascending numbers.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:for i in range(1,100) | put ='192.168.1.'.i | endfor&lt;/code&gt; - use a loop to
   generate a long list.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="searching"&gt;Searching&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;g#&lt;/code&gt; or &lt;code&gt;g*&lt;/code&gt; for partial matches, like &lt;code&gt;#&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt; for exact matches. &lt;/li&gt;
&lt;li&gt;Search for the word under the cursor, or similar:&lt;ol&gt;
&lt;li&gt;Press &lt;code&gt;/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-r&gt;&lt;/c-r&gt;&lt;/code&gt; &lt;code&gt;&lt;c-w&gt;&lt;/c-w&gt;&lt;/code&gt; - this will copy and paste the word under the cursor
     into the search box. Edit it as necessary.&lt;/li&gt;
&lt;li&gt;After you’ve done your search, &lt;code&gt;&lt;c-o&gt;&lt;/c-o&gt;&lt;/code&gt; to jump back to where your cursor
     was before.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Find and replace whole words only: &lt;code&gt;:s/&lt;old_word\&gt;/new/g&lt;/old_word\&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Find and replace either old-word1 or old_word2: &lt;code&gt;:s/(old_word1\|old_word2\)/new/g&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;g &lt;c-g&gt;&lt;/c-g&gt;&lt;/code&gt; - show some stats about current bugger - word count, line count,
   char count.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="undo"&gt;Undo&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;g-&lt;/code&gt; and &lt;code&gt;g+&lt;/code&gt; - undo branches.&lt;/li&gt;
&lt;li&gt;Under changes within a period of time:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:earlier 2d&lt;/code&gt; - undo changes in the last 2 days&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:later 5m&lt;/code&gt; - redo all changes in the last 5 minutes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:earlier 3f&lt;/code&gt; - undo all changes in the last three buffer writes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; seconds, &lt;code&gt;m&lt;/code&gt; minutes, &lt;code&gt;h&lt;/code&gt; hours, &lt;code&gt;d&lt;/code&gt; days, &lt;code&gt;f&lt;/code&gt; saves&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:g/my_string/normal @a&lt;/code&gt; - Use the global command to execute macro &lt;code&gt;a&lt;/code&gt; on
    all lines of the current buffer containing string ‘my_string’&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:g/good/s/bad/ugly/g&lt;/code&gt; - For every line containing “good” substitute all
    “bad” with “ugly”&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="splits"&gt;Splits&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&lt;c-w&gt; r&lt;/c-w&gt;&lt;/code&gt; - rotate the splits from left to right but only if they are split
    vertically. &lt;code&gt;&lt;c-w&gt; R&lt;/c-w&gt;&lt;/code&gt; - rotate the splits from right to left. &lt;code&gt;&lt;c-w&gt; H&lt;/c-w&gt;&lt;/code&gt; -
    move the current split to the far left and make it full height. &lt;code&gt;&lt;c-w&gt; J&lt;/c-w&gt;&lt;/code&gt; -
    move the current split to the bottom of the screen and use the full width.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:only&lt;/code&gt; - close all splits except the current split.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="macros"&gt;Macros&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;:g/pattern/norm @o&lt;/code&gt; - do the macro stored in buffer &lt;code&gt;O&lt;/code&gt; on all lines that
    match the pattern “pattern”&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="other"&gt;Other&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&lt;c-o&gt;&lt;/c-o&gt;&lt;/code&gt; in Insert Mode will jump you into Command Mode for one command only
    and then put you back into Insert Mode automatically.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;.dot&lt;/code&gt; command only repeats commands that changes the buffer content. It
    wont repeat navigation commands.&lt;/li&gt;
&lt;/ol&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>Notes From “Powerful Python”</title><link href="https://johnmathews.eu/python-notes.html" rel="alternate"/><published>2021-01-21T14:55:00+01:00</published><updated>2021-01-21T14:55:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-21:/python-notes.html</id><summary type="html"/><content type="html">&lt;p&gt;The parts of Aaron Maxwell’s &lt;a href="https://twitter.com/powerfulpython"&gt;Power Python&lt;/a&gt;
newsletter that I don’t want to forget:&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#emergent-abstractions"&gt;Emergent Abstractions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#practioner-engineer-scientist"&gt;Practioner, Engineer, Scientist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sentinel-values"&gt;Sentinel Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#levels-of-python-code"&gt;Levels of Python Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#read-peps"&gt;Read PEPs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="emergent-abstractions"&gt;Emergent Abstractions&lt;/h2&gt;
&lt;p&gt;Get used to expecting and letting abstractions emerge from projects. If you
find yourself repeatedly solving similar problems in similar ways, what can you
do that will simplify the code and the implementation&lt;sup id="sf-python-notes-1-back"&gt;&lt;a class="simple-footnote" href="#sf-python-notes-1" title=" Abstraction as a principal of OOP"&gt;1&lt;/a&gt;&lt;/sup&gt;?&lt;/p&gt;
&lt;p&gt;Is it a couple of convenience methods on some helper class?&lt;/p&gt;
&lt;p&gt;The below code snippet gives you three ways of instantiating the twitter &lt;span class="caps"&gt;API&lt;/span&gt; client:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A generic “normal” way&lt;/li&gt;
&lt;li&gt;A specialized way that looks for certain environment variables&lt;/li&gt;
&lt;li&gt;A specialized way that looks for a configuration file&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="c1"&gt;# so you can get the environment variables&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;twitter&lt;/span&gt; &lt;span class="c1"&gt;# https://pypi.org/project/python-twitter/&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApiClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumer_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumer_secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;access_token_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;access_token_secret&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;consumer_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;consumer_secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;access_token_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;access_token_secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;from_environ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'TWITTER_CONSUMER_KEY'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'TWITTER_CONSUMER_SECRET'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'TWITTER_ACCESS_TOKEN_KEY'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'TWITTER_ACCESS_TOKEN_SECRET'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;from_config_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;config_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# ...&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="practioner-engineer-scientist"&gt;Practioner, Engineer, Scientist&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Practioner&lt;/strong&gt; - You can use a thing (a framework, a tool)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Engineer&lt;/strong&gt; - You can use a thing and if you needed to, you could recreate it&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scientist&lt;/strong&gt; - You can create frameworks and paradigms that have never existed before&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Aim for the engineer level.&lt;/p&gt;
&lt;h2 id="sentinel-values"&gt;Sentinel Values&lt;/h2&gt;
&lt;p&gt;Instead of setting your sentinel value to something that is not quite
impossible, like &lt;code&gt;None&lt;/code&gt; or &lt;code&gt;"None"&lt;/code&gt; set it to &lt;code&gt;object()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is better because it creates a unique instance of the &lt;code&gt;object&lt;/code&gt; class and
there can be no ambiguity about where it came from.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A sentinel value is a value you can set a variable to.&lt;/li&gt;
&lt;li&gt;It’s special because it differs from all other legal or possible values that the variable could have.&lt;/li&gt;
&lt;li&gt;It’s used as a signal or as a canary that something has happened.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="levels-of-python-code"&gt;Levels of Python Code&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Syntax&lt;/em&gt; - understand what indentation is important, sometimes you need
    parenthesis, etc&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Idiom&lt;/em&gt; - the building blocks of a program. “Paragraphs” of code that
    follow common patterns, like for loops, or context managers.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Design Pattern&lt;/em&gt; - Less well defined that Idioms, but more useful.
        - Creational Patterns, like factories
        - Structural Patterns, like Adapters or Proxies
        - Behavioural Patterns, like &lt;code&gt;Visitor&lt;/code&gt; or &lt;code&gt;Strategy&lt;/code&gt;
    These tend to be the same across different languages.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Architectural&lt;/em&gt; - the large-scale structure of your software system. The
   language itself doesn’t make a lot of difference, an application would have
   the same architecture whether it is written in Python or Java. The interface
   between different components would be different, but the “organs” of the
   body would essentially be the same.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="read-peps"&gt;Read PEPs&lt;/h2&gt;
&lt;p&gt;A Python Enhancement Proposal is a document that’s written to propose a new
feature of Python.&lt;/p&gt;
&lt;p&gt;It fully details the proposed feature, the arguments for and against it, and
lots of sample code.&lt;/p&gt;
&lt;p&gt;If the &lt;span class="caps"&gt;PEP&lt;/span&gt; is accepted into a future version of Python, the &lt;span class="caps"&gt;PEP&lt;/span&gt; becomes
the authoritative document for that feature and how to use it.&lt;/p&gt;
&lt;p&gt;PEPs tend to be written by the best programmers in the world, so hang out with them.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-python-notes-1"&gt;
&lt;a href="https://johnmathews.eu/principles-of-oop.html#2-abstraction"&gt;Abstraction&lt;/a&gt; as a
principal of &lt;span class="caps"&gt;OOP&lt;/span&gt; &lt;a class="simple-footnote-back" href="#sf-python-notes-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>Debugging the more_categories plugin for Pelican</title><link href="https://johnmathews.eu/debugging-more-categories-pelican-plugin.html" rel="alternate"/><published>2021-01-19T12:00:00+01:00</published><updated>2021-01-19T12:00:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-19:/debugging-more-categories-pelican-plugin.html</id><summary type="html"/><content type="html">&lt;p&gt;I’ve realised that one of the plugins I use to make this blog is not working
correctly. I use the &lt;code&gt;more_categories&lt;/code&gt; plugin to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;add subcategories&lt;/li&gt;
&lt;li&gt;assign multiple categories to articles.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Subcategories aren’t working and Pelican thinks each article just has
categories than contain forward slashes.&lt;/p&gt;
&lt;p&gt;In his “Powerful Python” emails, Aaron Maxwell recommends looking at the source
code for popular python libraries to see how really good Python is written, and
how talented developers write code and solve problems.&lt;/p&gt;
&lt;p&gt;This is a good opportunity to look at the code that powers the plugin and see
if if I can:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Understand the source code&lt;/li&gt;
&lt;li&gt;Locate the source of the problem&lt;/li&gt;
&lt;li&gt;Fix the problem&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I don’t know if Pelican is amazingly good quality or not, I get the feeling it
could do with more developer resources, but I’ve got a real reason and
motivation to look at the underlying code so I’m going to give it a shot.&lt;/p&gt;
&lt;p&gt;The documentation is sparse which doesn’t help, I get the impression that
whoever wrote it feels like Pelican is simple and it’s obvious what’s going on
&lt;sup id="sf-debugging-more-categories-pelican-plugin-1-back"&gt;&lt;a class="simple-footnote" href="#sf-debugging-more-categories-pelican-plugin-1" title="I guess it’s the “curse of knowledge”"&gt;1&lt;/a&gt;&lt;/sup&gt;. It’s not obvious to me.&lt;/p&gt;
&lt;h2 id="pelican-plugins"&gt;Pelican Plugins&lt;/h2&gt;
&lt;p&gt;Every plugin has to have a &lt;code&gt;register()&lt;/code&gt; function, here it is for the
&lt;code&gt;more-categories&lt;/code&gt; plugin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_generator_context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_categories&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_generator_finalized&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_categories&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I understand the idea of signals from Django, and generators are discussed a
bit in the &lt;a href="https://docs.getpelican.com/en/latest/internals.html#how-to-implement-a-new-generator"&gt;documentation&lt;/a&gt;. So what else is happening…&lt;/p&gt;
&lt;p&gt;As I write down my understanding of the plugin, I’m aware that my understanding
is definitely incomplete and probably wrong. I hope that as I progress I will
see the mistakes in what I’ve already written.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;get_categories()&lt;/code&gt; is called first, and it takes two arguments, &lt;code&gt;generator&lt;/code&gt; and
&lt;code&gt;metadata&lt;/code&gt;. The entire function is 3 lines so here it is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_categories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;categories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'category'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;','&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'categories'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'category'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'categories'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It looks like it gets the category from the metadata for each article.
Presumably by the time this function is called the articles have already been
parsed and a &lt;code&gt;metadata&lt;/code&gt; object has already been created and populated with
metadata about the articles, including categories.&lt;/p&gt;
&lt;p&gt;The first row of &lt;code&gt;get_categories()&lt;/code&gt; splits up the categories if multiple
categories are listed. &lt;code&gt;metadata&lt;/code&gt; must be a dictionary, and there must be a
metadata dict for each article, otherwise you couldn’t just get get the value
assoiciated with the dictionary key and then split the string on commas.&lt;/p&gt;
&lt;p&gt;This means that this function is called once for each article.&lt;/p&gt;
&lt;p&gt;I don’t know what &lt;code&gt;text_type&lt;/code&gt; does yet. Maybe it ensures that the output is
always a string. It’s imported from &lt;code&gt;six&lt;/code&gt; which I remember seeing being a
dependecy of some other packages.&lt;/p&gt;
&lt;p&gt;.. Having checked the
&lt;a href="https://six.readthedocs.io/#six.text_type"&gt;documentation&lt;/a&gt; for &lt;code&gt;six&lt;/code&gt; it looks like I was
right - it represents unicode textual data in both &lt;code&gt;python2&lt;/code&gt; and &lt;code&gt;python3&lt;/code&gt;.
Pelican was originally written in Python2 I guess.&lt;/p&gt;
&lt;p&gt;Next step is to write a new key-value pair to the metadata dictionary for each
article. This plugin adds functionality to python by enabling &lt;code&gt;categories&lt;/code&gt;
and not just a &lt;code&gt;category&lt;/code&gt; for each article. It seems clear that adding a
&lt;code&gt;categories&lt;/code&gt; key to the metadata dict is an obvious way to do this. The value
for the &lt;code&gt;categories&lt;/code&gt; key is a &lt;code&gt;list&lt;/code&gt; where each item is an instance of the 
&lt;code&gt;Category&lt;/code&gt; class. This class is instantiated using two arguments, &lt;code&gt;name&lt;/code&gt; which
is the string from the previous row, and &lt;code&gt;generator.settings&lt;/code&gt; which is
currently not understood.&lt;/p&gt;
&lt;p&gt;.. printing the contents of &lt;code&gt;generator.settings&lt;/code&gt; shows that its a dictionary of
all the settings. Easily assumed and good to confirm.&lt;/p&gt;
&lt;p&gt;I’ll dig into the &lt;code&gt;Category&lt;/code&gt; class in a moment, but first lets quickly cover
the last row of the function. The &lt;code&gt;category&lt;/code&gt; attribute of the articles metadata
is simply updated with the first item in the categories list (&lt;code&gt;categories&lt;/code&gt;
must be a list because it can be indexed.)&lt;/p&gt;
&lt;h2 id="class-category"&gt;class Category():&lt;/h2&gt;
&lt;p&gt;This class is the only class defined by the plugin (which is only 96 lines of
code). It has 6 methods, 5 of them are decorated, and it has no constants.&lt;/p&gt;
&lt;p&gt;The decorators are &lt;code&gt;property&lt;/code&gt; [3], &lt;code&gt;_name.setter&lt;/code&gt; [1] and &lt;code&gt;URLWrapper.name.setter&lt;/code&gt; [1].
&lt;code&gt;URLWrapper&lt;/code&gt; is imported from &lt;code&gt;pelican.urlwrappers&lt;/code&gt; and I don’t know what that
does beyond “wrapping URLs”.&lt;/p&gt;
&lt;h3 id="property"&gt;@property&lt;/h3&gt;
&lt;p&gt;Decorators are functions that takes methods or functions as inputs. Using
&lt;code&gt;property&lt;/code&gt; along with &lt;code&gt;setter&lt;/code&gt; decorators lets a class have a property assigned
to it whilst ensuring that arbitrary conditions or logic is upheld. If the &lt;code&gt;@property&lt;/code&gt;
decorator is over a method called &lt;code&gt;foo&lt;/code&gt;, then there would need to be a
decorator called &lt;code&gt;foo.setter&lt;/code&gt; on a method somewhere in the class.&lt;/p&gt;
&lt;p&gt;That doesn’t seem entirely right though, because in our &lt;code&gt;Category&lt;/code&gt; class, we
have a &lt;code&gt;@property&lt;/code&gt; decorator over a &lt;code&gt;_name&lt;/code&gt; method, and also a &lt;code&gt;@_name.setter&lt;/code&gt;
decorator over another method called &lt;code&gt;_name&lt;/code&gt;. But the other methods with
&lt;code&gt;@property&lt;/code&gt; decorators (&lt;code&gt;slug&lt;/code&gt; and &lt;code&gt;ancestors&lt;/code&gt;) do not have any associated setter
decorators or methods.&lt;/p&gt;
&lt;p&gt;The setter for &lt;code&gt;_name&lt;/code&gt; seems to create parent categories if the string contains slashes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@_name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setter&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;parentname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsplit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__class__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parentname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shortname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, &lt;code&gt;self.parent&lt;/code&gt; becomes an instance of the category class, that is
instantiated using &lt;code&gt;parentname&lt;/code&gt; and &lt;code&gt;self.settings&lt;/code&gt;. This is recursive to
however many levels of subcategories are specified.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ancestors&lt;/code&gt; and &lt;code&gt;as_dict&lt;/code&gt; methods seem more confusing. &lt;code&gt;ancestors&lt;/code&gt; isn’t
called or mentioned within the class definition, but is called from the
&lt;code&gt;create_categories&lt;/code&gt; function which is called after the &lt;code&gt;get_categories&lt;/code&gt;
function returns. I don’t understand why it needs an &lt;code&gt;@property&lt;/code&gt; decorator though.&lt;/p&gt;
&lt;p&gt;The class inherits from &lt;code&gt;URLWrapper&lt;/code&gt; so that is probably the next best place to
look… Indeed, looking at the definition of &lt;code&gt;URLWrapper&lt;/code&gt; shows that the
&lt;code&gt;as_dict&lt;/code&gt; method is overriding the definition in the base class.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-debugging-more-categories-pelican-plugin-1"&gt;I guess it’s the “curse of knowledge” &lt;a class="simple-footnote-back" href="#sf-debugging-more-categories-pelican-plugin-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>Python: Becoming A Better Python Developer</title><link href="https://johnmathews.eu/becoming-a-better-python-developer.html" rel="alternate"/><published>2021-01-18T11:25:00+01:00</published><updated>2021-01-18T11:25:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-18:/becoming-a-better-python-developer.html</id><summary type="html"/><content type="html">&lt;p&gt;I’ve been subscribed to Aaron Maxwell’s “Powerful Python” newsletter for over a
year and I really like it. His emails are opinionated and candid, and
singularly focussed. He seems passionate about what he does and I like that.&lt;/p&gt;
&lt;p&gt;Ultimately, the emails are designed to drive sign-ups for his courses which I
suspect would be very good, but there is a lot of value in the free emails.
Thanks Aaron. I realised that the emails are sequential and each subscriber
gets the same sequence of messages regardless of when they signed up. There is
the ‘first’ message, and then the ‘second’, and they kind of progress and flow.&lt;/p&gt;
&lt;p&gt;This means that there are more benefits to paying attention than for usual
email subscriptions. Even though the emails arrive when I’m at a
supermarket, or making dinner for my kids, it’s good to try and read it
properly later.&lt;/p&gt;
&lt;p&gt;After being subscribed for several months, I unsubscribed and resubscribed. Now
that I know how reliable and high quality this advice is I’m going to
prioritise working through the examples and doing some of what I missed the
first time. I’ve gone back to the beginning to reinforce the parts I know and
to try again with what eluded me the first time.&lt;/p&gt;
&lt;p&gt;Three kinds of practice projects to become a better developer:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A web app - use &lt;code&gt;Django&lt;/code&gt; if you don’t know which framework to user. Done this.&lt;/li&gt;
&lt;li&gt;A command line tool - use the &lt;code&gt;argparse&lt;/code&gt; module, because it’s in the standard
   library. Haven’t done this yet, I guess now is a good time to start. It
   seems like the simplest and quickest of the three kinds of project, and I
   can see how useful it could be - it lets you use the app in many different
   contexts, outside the python eco-system and anywhere command line tools can
   be used (everywhere).&lt;/li&gt;
&lt;li&gt;A machine learning model - I’ve already studied this, from theory (&lt;code&gt;numpy&lt;/code&gt;)
   to frameworks (&lt;code&gt;tensorflow&lt;/code&gt;). I’m happy to see it’s included.&lt;/li&gt;
&lt;/ol&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>Using Vim with large codebases</title><link href="https://johnmathews.eu/vim-for-large-projects.html" rel="alternate"/><published>2021-01-15T15:02:00+01:00</published><updated>2021-01-15T15:02:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-15:/vim-for-large-projects.html</id><summary type="html"/><content type="html">&lt;p&gt;I use Vim as my text editor and &lt;span class="caps"&gt;IDE&lt;/span&gt;. I like that its free, open
source and customizable. Below are some of the most useful
plugins and features I’ve started using this year when I was building Moneybar
and learning how to use Django.&lt;/p&gt;
&lt;p&gt;There’s a copy of my &lt;code&gt;.vimrc&lt;/code&gt; at the end. &lt;/p&gt;
&lt;p&gt;I’m happy to invest time and effort learning how to make the most of
Vim and its plugins. I’m confident that I’ll still be using it twenty
years from now.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Filetype plugins - if you want some settings to be active only for
     particular filetypes, like &lt;code&gt;.py&lt;/code&gt; (python) or &lt;code&gt;.txt&lt;/code&gt; (text) then create a file in
     &lt;code&gt;~/.vim/ftplugin/&lt;filetype&gt;.vim&lt;/filetype&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Vim will look in this file when it opens a buffer of the corresponding
 file type. Good for formatting options like line length, tab spaces, vim
 commands that are language specific. &lt;/p&gt;
&lt;p&gt;You can’t activate plugins in these files though. All the plugins have to be
 activated in your &lt;code&gt;.vimrc&lt;/code&gt; in the usual way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;janko-m/vim-test&lt;/code&gt; - this plugin lets you runs tests without leaving vim.
   You can run the test that’s nearest the cursor, or all the tests in the
   current buffer. It’s very customizable. I wish it could be a bit faster, but
   I could probably improve that myself by changing some settings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dense-analysis/ale&lt;/code&gt; - The incredible Asyncronous Linting Engine (&lt;span class="caps"&gt;A.L.&lt;/span&gt;E)
   applies fixers and linters to various filetypes, when you want and how you want.
   Super useful for writing tidy code and catching mistakes before the code is run.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;junegunn/fzf&lt;/code&gt; and &lt;code&gt;junegunn/fzf.vim&lt;/code&gt; - It took a little getting used to at
   first, but now I can’t imagine not using a tool like this (this could be
   said about so many vim-related things). Use &lt;code&gt;fzf&lt;/code&gt; to switch between open
   buffers, open a new file, search for files using the filename, or search
   within all the files in the project for specific text. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;majutsushi/tagbar&lt;/code&gt; - This plugin opens a sidebar which contains a list of
   of functions and classes and methods (tags). You can use it to see which
   methods a class contains, and jump to the part of the buffer where a tag
   is defined.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is my &lt;code&gt;.vimrc&lt;/code&gt; during January 2021.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;" ========== Global ==========&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;nocompatible&lt;/span&gt;              &lt;span class="c"&gt;" always put it at the top of .vimrc. effects mappings, undo, etc.&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;utf&lt;span class="m"&gt;-8&lt;/span&gt;            &lt;span class="c"&gt;" utf-8 encoding&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; termguicolors
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;t_Co&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;256&lt;/span&gt;                  &lt;span class="c"&gt;" number of colors&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;noerrorbells&lt;/span&gt; &lt;span class="nb"&gt;vb&lt;/span&gt; &lt;span class="nb"&gt;t_vb&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;     &lt;span class="c"&gt;" no error bells, yes screnflash.&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;linespace&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;scrolloff&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;               &lt;span class="c"&gt;" minimum number of screen lines above and below the cursor&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;shortmess&lt;/span&gt;&lt;span class="p"&gt;-=&lt;/span&gt;S              &lt;span class="c"&gt;" show how many times a search result occurs in current buffer, and index of current match&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="k"&gt;number&lt;/span&gt; &lt;span class="nb"&gt;relativenumber&lt;/span&gt;     &lt;span class="c"&gt;" Line numbers&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;splitbelow&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;splitright&lt;/span&gt;
&lt;span class="c"&gt;" set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;undofile&lt;/span&gt;                  &lt;span class="c"&gt;" Maintain undo history between sessions&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;undodir&lt;/span&gt;&lt;span class="p"&gt;=~&lt;/span&gt;&lt;span class="sr"&gt;/.vim/&lt;/span&gt;undo       &lt;span class="c"&gt;" put all the undo files in this dir&lt;/span&gt;

&lt;span class="k"&gt;filetype&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;                   &lt;span class="c"&gt;" enables filetype detection&lt;/span&gt;
&lt;span class="k"&gt;filetype&lt;/span&gt; plugin indent &lt;span class="k"&gt;on&lt;/span&gt;     &lt;span class="c"&gt;" detection on, plugin on, indent on. To see the current status, type: :filetype&lt;/span&gt;
&lt;span class="nb"&gt;syntax&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;                 &lt;span class="c"&gt;" syntax highlighting - try 'syntax on/enable'&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;noesckeys&lt;/span&gt;           &lt;span class="c"&gt;" might break stuff, should make &lt;esc&gt; delay smaller&lt;/esc&gt;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;timeoutlen&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;350&lt;/span&gt;            &lt;span class="c"&gt;" timeoutlen is used for mapping delays&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;ttimeoutlen&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;             &lt;span class="c"&gt;" ttimeoutlen is used for key code delays&lt;/span&gt;

&lt;span class="c"&gt;"Search/Find/Highlight ======================================&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;incsearch&lt;/span&gt;  &lt;span class="nb"&gt;ignorecase&lt;/span&gt;  &lt;span class="nb"&gt;smartcase&lt;/span&gt;  &lt;span class="nb"&gt;hlsearch&lt;/span&gt;
&lt;span class="nb"&gt;highlight&lt;/span&gt; Search guibg&lt;span class="p"&gt;=&lt;/span&gt;purple guifg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'NONE'&lt;/span&gt;
&lt;span class="nb"&gt;highlight&lt;/span&gt; Search cterm&lt;span class="p"&gt;=&lt;/span&gt;none ctermbg&lt;span class="p"&gt;=&lt;/span&gt;green ctermfg&lt;span class="p"&gt;=&lt;/span&gt;black
&lt;span class="nb"&gt;highlight&lt;/span&gt; CursorColumn guibg&lt;span class="p"&gt;=&lt;/span&gt;blue guifg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;red&lt;/span&gt;
&lt;span class="nb"&gt;highlight&lt;/span&gt; CursorColumn ctermbg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;red&lt;/span&gt; ctermfg&lt;span class="p"&gt;=&lt;/span&gt;blue
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="sr"&gt;//&lt;/span&gt; :&lt;span class="k"&gt;nohlsearch&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; # #``
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; * *``

&lt;span class="c"&gt;" close buffers properly go to previous buffer, then delete the buffer you were just in.&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;bd&lt;/span&gt; :&lt;span class="k"&gt;bp&lt;/span&gt;\&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="k"&gt;bd&lt;/span&gt; #&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;inoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;bd&lt;/span&gt; :&lt;span class="k"&gt;bp&lt;/span&gt;\&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="k"&gt;bd&lt;/span&gt; #&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" Spell check ==============================================&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;spelllang&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;en&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;ss&lt;/span&gt; :&lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="k"&gt;spell&lt;/span&gt;&lt;span class="p"&gt;!&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;sf&lt;/span&gt; z&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" ========== Set leader and local leader ===================&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; mapleader&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"\&lt;space&gt;"&lt;/space&gt;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; localleader&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"\\"&lt;/span&gt;

&lt;span class="c"&gt;" insert 1 space to the right, without leaving normal mode&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;localleader&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;space&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Space&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;Right&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" Flash the cursor row (and column) colors are set after color scheme ========&lt;/span&gt;
&lt;span class="c"&gt;" nnoremap &lt;leader&gt;f :call Flash()&lt;cr&gt;&lt;/cr&gt;&lt;/leader&gt;&lt;/span&gt;
&lt;span class="c"&gt;" function! Flash()&lt;/span&gt;
&lt;span class="c"&gt;"     " set cursorline cursorcolumn&lt;/span&gt;
&lt;span class="c"&gt;"     set cursorline&lt;/span&gt;
&lt;span class="c"&gt;"     redraw&lt;/span&gt;
&lt;span class="c"&gt;"     sleep 110m&lt;/span&gt;
&lt;span class="c"&gt;"     set nocursorline&lt;/span&gt;
&lt;span class="c"&gt;" endfunction&lt;/span&gt;

&lt;span class="c"&gt;" Edit/Reload the .vimrc file&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;ve&lt;/span&gt; :&lt;span class="k"&gt;e&lt;/span&gt; $MYVIMRC&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;vr :&lt;span class="k"&gt;so&lt;/span&gt; $MYVIMRC&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

augroup VimReload
    autocmd&lt;span class="p"&gt;!&lt;/span&gt;
    autocmd &lt;span class="nb"&gt;BufWritePost&lt;/span&gt; $MYVIMRC source $MYVIMRC
augroup END

&lt;span class="c"&gt;" Yank to clipboard&lt;/span&gt;
&lt;span class="nb"&gt;vnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;"+y&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; has&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"clipboard"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;unnamed &lt;span class="c"&gt;" copy to the system clipboard&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; has&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"unnamedplus"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;" X11 support&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;+=&lt;/span&gt;unnamedplus
  &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;

&lt;span class="c"&gt;" Go into NORMAL mode&lt;/span&gt;
&lt;span class="nb"&gt;inoremap&lt;/span&gt; jk &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" view working directory&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;pwd&lt;/span&gt; :&lt;span class="k"&gt;cd&lt;/span&gt; %:&lt;span class="k"&gt;p&lt;/span&gt;:&lt;span class="k"&gt;h&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" toggle line wrap&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;lw&lt;/span&gt; :&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;nowrap&lt;/span&gt;&lt;span class="p"&gt;!&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" toggle line numbers&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;ln :&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;relativenumber&lt;/span&gt;&lt;span class="p"&gt;!&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" Insert current datetime&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;dt A &lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;hh&lt;/span&gt; &lt;span class="s2"&gt;"=strftime("&lt;/span&gt;\%Y&lt;span class="p"&gt;-&lt;/span&gt;\%&lt;span class="k"&gt;m&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;\%&lt;span class="k"&gt;d&lt;/span&gt;"&lt;span class="p"&gt;)&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;gp&lt;/span&gt;

&lt;span class="c"&gt;" map w to `&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; ` &lt;span class="k"&gt;w&lt;/span&gt;

&lt;span class="c"&gt;" Swap : and ;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; ; :
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; : ;
&lt;span class="nb"&gt;vnoremap&lt;/span&gt; ; :
&lt;span class="nb"&gt;vnoremap&lt;/span&gt; : ;

&lt;span class="c"&gt;" Navigation &amp;amp; movemement&lt;/span&gt;
&lt;span class="c"&gt;" save buffer if it has been changed&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="nb"&gt;ww&lt;/span&gt; :&lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;" close Vim, but not if there are unsaved changes&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;qa&lt;/span&gt; :&lt;span class="k"&gt;qa&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;" save all changes&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;wa&lt;/span&gt; :&lt;span class="k"&gt;wa&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;" close buffer&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; qq :&lt;span class="k"&gt;bp&lt;/span&gt;\&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="k"&gt;bd&lt;/span&gt; #&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;wq&lt;/span&gt; :&lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="k"&gt;bp&lt;/span&gt;\&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="k"&gt;bd&lt;/span&gt; #&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;" switch buffers&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; :&lt;span class="k"&gt;bn&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; _ :&lt;span class="k"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" Split navigations&lt;/span&gt;
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;W&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;H&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;j&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;W&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;J&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;k&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;W&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;K&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;W&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;L&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;ww&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;W&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;W&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;wq&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;W&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Q&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" split (pane) resize&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;k&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;resize&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;j&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;resize&lt;/span&gt; &lt;span class="m"&gt;-2&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;vertical&lt;/span&gt; &lt;span class="k"&gt;resize&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;vertical&lt;/span&gt; &lt;span class="k"&gt;resize&lt;/span&gt; &lt;span class="m"&gt;-2&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" open help in vertical split by default&lt;/span&gt;
cabbrev vhelp &lt;span class="k"&gt;vert&lt;/span&gt; help

&lt;span class="c"&gt;" Natural cursor movement over wrapped lines&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;j&lt;/span&gt; gj
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;k&lt;/span&gt; gk

&lt;span class="c"&gt;" Insert blank lines in normal mode&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;o&lt;/span&gt; &lt;span class="k"&gt;o&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;k&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;O O&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;j&lt;/span&gt;

&lt;span class="c"&gt;"*****************************&lt;/span&gt;
&lt;span class="c"&gt;"========== PLUGINS ==========&lt;/span&gt;
&lt;span class="c"&gt;"*****************************&lt;/span&gt;

&lt;span class="k"&gt;call&lt;/span&gt; plug#begin&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'~/.vim/plugged'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;" numbers as text objects&lt;/span&gt;
Plug &lt;span class="s1"&gt;'MisanthropicBit/vim-numbers'&lt;/span&gt;


&lt;span class="c"&gt;"run shell commands async in vim8"&lt;/span&gt;
Plug &lt;span class="s1"&gt;'skywind3000/asyncrun.vim'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:asyncrun_open &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;

&lt;span class="c"&gt;" When using :python or :!python, access the packages in venv&lt;/span&gt;
&lt;span class="c"&gt;" :VirtualEnvList&lt;/span&gt;
&lt;span class="c"&gt;" :VirtualEnvActivate &lt;tab&gt;&lt;/tab&gt;&lt;/span&gt;
Plug &lt;span class="s1"&gt;'jmcantrell/vim-virtualenv'&lt;/span&gt;

&lt;span class="c"&gt;" force quickfix to be full widtth&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; qf &lt;span class="k"&gt;wincmd&lt;/span&gt; J

&lt;span class="c"&gt;" testing - many languages and test runners&lt;/span&gt;
Plug &lt;span class="s1"&gt;'janko-m/vim-test'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; test#strategy &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"asyncrun_background"&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; test#python#runner &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'pytest'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; test#python#pytest#&lt;span class="k"&gt;options&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'-x'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; test#&lt;span class="k"&gt;vim&lt;/span&gt;#term_position &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"belowright"&lt;/span&gt;

&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;t&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;LEADER&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;n&lt;/span&gt; :TestNearest&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;t&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;LEADER&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;f&lt;/span&gt; :TestFile&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;t&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;LEADER&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;s :TestSuite&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;t&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;LEADER&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt; :TestLast&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;t&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;LEADER&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;g&lt;/span&gt; :TestVisit&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" toggle the quickfix window&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; ToggleQuickFix&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; empty&lt;span class="p"&gt;(&lt;/span&gt;filter&lt;span class="p"&gt;(&lt;/span&gt;getwininfo&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;'v:val.quickfix'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;copen&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;
    &lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="nb"&gt;norelativenumber&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;cclose&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;cc&lt;/span&gt; :&lt;span class="k"&gt;call&lt;/span&gt; ToggleQuickFix&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;


&lt;span class="c"&gt;" generates an index (or tag) file of language objects found in source files&lt;/span&gt;
&lt;span class="c"&gt;" &lt;c-]&gt; jump to definition&lt;/c-]&gt;&lt;/span&gt;
&lt;span class="c"&gt;" &lt;c-o&gt; jump back&lt;/c-o&gt;&lt;/span&gt;
&lt;span class="c"&gt;" g] see a list of multiple matches&lt;/span&gt;
&lt;span class="c"&gt;" &lt;c-t&gt;&lt;/c-t&gt;&lt;/span&gt;
Plug &lt;span class="s1"&gt;'universal-ctags/ctags'&lt;/span&gt;

&lt;span class="c"&gt;" (re)generate tags file in the bg&lt;/span&gt;
Plug &lt;span class="s1"&gt;'ludovicchabant/vim-gutentags'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:gutentags_ctags_exclude &lt;span class="p"&gt;=&lt;/span&gt; [&lt;span class="s1"&gt;'.json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'.mypy_cache/**'&lt;/span&gt;]

&lt;span class="c"&gt;" sidebar that displays the ctags-generated tags of the current file, ordered by their scope&lt;/span&gt;
Plug &lt;span class="s1"&gt;'majutsushi/tagbar'&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;F2&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :TagbarToggle&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;F2&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :TagbarToggle&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" add python library code to tags file, goto def with &lt;c-]&gt;&lt;/c-]&gt;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; pyEnvLib &lt;span class="p"&gt;=&lt;/span&gt; $VIRTUAL_ENV
&lt;span class="k"&gt;let&lt;/span&gt; pyEnvLib .&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/lib/python3.8/'&lt;/span&gt;

&lt;span class="c"&gt;" Async linting engine&lt;/span&gt;
Plug &lt;span class="s1"&gt;'dense-analysis/ale'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ale_lint_on_enter &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ale_lint_on_save &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="c"&gt;" ALE completion&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ale_completion_enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;omnifunc&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;ale#completion#OmniFunc
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ale_completion_autoimport &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;at :ALEToggle&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;af :ALEFix&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;aj :ALENext&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;ak :ALEPrevious&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" iSort&lt;/span&gt;
Plug &lt;span class="s1"&gt;'fisadev/vim-isort'&lt;/span&gt;
&lt;span class="c"&gt;" track the snippets engine&lt;/span&gt;
Plug &lt;span class="s1"&gt;'sirver/ultisnips'&lt;/span&gt;
&lt;span class="c"&gt;" Snippets are separated from the engine. Add this if you want them:&lt;/span&gt;
Plug &lt;span class="s1"&gt;'honza/vim-snippets'&lt;/span&gt;
&lt;span class="c"&gt;" Trigger configuration. Do not use &lt;tab&gt; if you use https://github.com/Valloric/YouCompleteMe.&lt;/tab&gt;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:UltiSnipsExpandTrigger&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;c-a&gt;"&lt;/c-a&gt;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:UltiSnipsJumpForwardTrigger&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;c-b&gt;"&lt;/c-b&gt;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:UltiSnipsJumpBackwardTrigger&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;c-z&gt;"&lt;/c-z&gt;&lt;/span&gt;
&lt;span class="c"&gt;" If you want :UltiSnipsEdit to split your window.&lt;/span&gt;
&lt;span class="c"&gt;" let g:UltiSnipsEditSplit="vertical"&lt;/span&gt;

Plug &lt;span class="s1"&gt;'Valloric/YouCompleteMe'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'davidhalter/jedi'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'maksimr/vim-jsbeautify'&lt;/span&gt;

&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;x&lt;/span&gt;  :YcmCompleter GoTo&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;" the subcommands add entries to Vim's 'jumplist' so you can use&lt;/span&gt;
&lt;span class="c"&gt;" 'CTRL-O' to jump back to where you were before invoking the command (and&lt;/span&gt;
&lt;span class="c"&gt;" 'CTRL-I' to jump forward; see ':h jumplist' for details)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_confirm_extra_conf &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_autoclose_preview_window_after_completion&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_collect_identifiers_from_tags_files &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_use_ultisnips_completer &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_seed_identifiers_with_syntax &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_complete_in_comments &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_complete_in_strings &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_collect_identifiers_from_tags_files &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;


&lt;span class="c"&gt;" autoclose parens, brackets etc&lt;/span&gt;
&lt;span class="c"&gt;" Plug 'townk/vim-autoclose'&lt;/span&gt;

&lt;span class="c"&gt;" vim-tmux focus events&lt;/span&gt;
Plug &lt;span class="s1"&gt;'tmux-plugins/vim-tmux-focus-events'&lt;/span&gt;

&lt;span class="c"&gt;" Code folding&lt;/span&gt;
&lt;span class="c"&gt;" Plug 'konfekt/fastfold'&lt;/span&gt;

&lt;span class="c"&gt;" match m of n https://vimawesome.com/plugin/indexedsearch&lt;/span&gt;
&lt;span class="c"&gt;" Plug 'henrik/vim-indexed-search'&lt;/span&gt;

&lt;span class="c"&gt;" adds vertical lines to easily show indent levels&lt;/span&gt;
Plug &lt;span class="s1"&gt;'yggdroot/indentline'&lt;/span&gt;

&lt;span class="c"&gt;" Fugitive&lt;/span&gt;
Plug &lt;span class="s1"&gt;'tpope/vim-fugitive'&lt;/span&gt;

&lt;span class="c"&gt;" Marks&lt;/span&gt;
Plug &lt;span class="s1"&gt;'kshenoy/vim-signature'&lt;/span&gt;

&lt;span class="c"&gt;" Latex Vimtex&lt;/span&gt;
Plug &lt;span class="s1"&gt;'lervag/vimtex'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:tex_flavor &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'latex'&lt;/span&gt;
autocmd Filetype tex &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;updatetime&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:livepreview_previewer &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'open -a Preview'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:tex_IgnoredWarnings &lt;span class="p"&gt;=&lt;/span&gt;
    \&lt;span class="s1"&gt;'Underfull'&lt;/span&gt;.&lt;span class="s2"&gt;"\n"&lt;/span&gt;.
    \&lt;span class="s1"&gt;'Overfull'&lt;/span&gt;.&lt;span class="s2"&gt;"\n"&lt;/span&gt;.
    \&lt;span class="s1"&gt;'specifier changed to'&lt;/span&gt;.&lt;span class="s2"&gt;"\n"&lt;/span&gt;.
    \&lt;span class="s1"&gt;'You have requested'&lt;/span&gt;.&lt;span class="s2"&gt;"\n"&lt;/span&gt;.
    \&lt;span class="s1"&gt;'Missing number, treated as zero.'&lt;/span&gt;.&lt;span class="s2"&gt;"\n"&lt;/span&gt;.
    \&lt;span class="s1"&gt;'There were undefined references'&lt;/span&gt;.&lt;span class="s2"&gt;"\n"&lt;/span&gt;.
    \&lt;span class="s1"&gt;'Citation %.%# undefined'&lt;/span&gt;.&lt;span class="s2"&gt;"\n"&lt;/span&gt;.
    \&lt;span class="s1"&gt;'Double space found.'&lt;/span&gt;.&lt;span class="s2"&gt;"\n"&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:Tex_IgnoreLevel &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;

&lt;span class="c"&gt;" Rainbow parenthesis&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; blacklist &lt;span class="p"&gt;=&lt;/span&gt; [&lt;span class="s1"&gt;'html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'md'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'wiki'&lt;/span&gt;]
autocmd &lt;span class="nb"&gt;BufWritePre&lt;/span&gt; * &lt;span class="k"&gt;if&lt;/span&gt; index&lt;span class="p"&gt;(&lt;/span&gt;blacklist&lt;span class="p"&gt;,&lt;/span&gt; &amp;amp;&lt;span class="nb"&gt;ft&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; Plug &lt;span class="s1"&gt;'luochen1990/rainbow'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:rainbow_active &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:rainbow_conf &lt;span class="p"&gt;=&lt;/span&gt; {
    \&lt;span class="s1"&gt;'guifgs'&lt;/span&gt;: [&lt;span class="s1"&gt;'green'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'magenta1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'gold'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'red'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'deepskyblue'&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
    \&lt;span class="s1"&gt;'guis'&lt;/span&gt;: [&lt;span class="s1"&gt;'bold'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'standout'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'undercurl'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'italic'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'strikethrough'&lt;/span&gt;]
    \}

&lt;span class="c"&gt;" Set color scheme.&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;background&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;dark&lt;/span&gt;

Plug &lt;span class="s1"&gt;'chriskempson/base16-vim'&lt;/span&gt;
&lt;span class="c"&gt;" colorscheme base16-default-dark&lt;/span&gt;
&lt;span class="k"&gt;colorscheme&lt;/span&gt; badwolf
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:badwolf_darkgutter &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:badwolf_html_link_underline &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:badwolf_css_props_highlight &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="c"&gt;" colorscheme modifications&lt;/span&gt;
&lt;span class="nb"&gt;highlight&lt;/span&gt; Comment ctermfg&lt;span class="p"&gt;=&lt;/span&gt;cyan guifg&lt;span class="p"&gt;=&lt;/span&gt;cyan
&lt;span class="nb"&gt;highlight&lt;/span&gt; pythonComment ctermfg&lt;span class="p"&gt;=&lt;/span&gt;cyan guifg&lt;span class="p"&gt;=&lt;/span&gt;cyan
&lt;span class="nb"&gt;highlight&lt;/span&gt; LineNr ctermfg&lt;span class="p"&gt;=&lt;/span&gt;cyan guifg&lt;span class="p"&gt;=&lt;/span&gt;cyan
&lt;span class="k"&gt;hi&lt;/span&gt; nontext &lt;span class="nb"&gt;term&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt; ctermfg&lt;span class="p"&gt;=&lt;/span&gt;Cyan guifg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;#80a0ff&lt;/span&gt; &lt;span class="k"&gt;gui&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt;
&lt;span class="k"&gt;hi&lt;/span&gt; vimLineComment &lt;span class="nb"&gt;term&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt; ctermfg&lt;span class="p"&gt;=&lt;/span&gt;Cyan guifg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;#80a0ff&lt;/span&gt; &lt;span class="k"&gt;gui&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt;
&lt;span class="c"&gt;" SpecialKey - use :set list to toggle visibility of EOL, CR, etc&lt;/span&gt;
&lt;span class="k"&gt;hi&lt;/span&gt; specialKey &lt;span class="nb"&gt;term&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt; ctermfg&lt;span class="p"&gt;=&lt;/span&gt;Cyan guifg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;#80a0ff&lt;/span&gt; &lt;span class="k"&gt;gui&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt;

&lt;span class="c"&gt;" colors for flashing cursorline and cursorcolumn&lt;/span&gt;
&lt;span class="k"&gt;hi&lt;/span&gt; CursorLine   cterm&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;NONE&lt;/span&gt; ctermbg&lt;span class="p"&gt;=&lt;/span&gt;green ctermfg&lt;span class="p"&gt;=&lt;/span&gt;black guibg&lt;span class="p"&gt;=&lt;/span&gt;green guifg&lt;span class="p"&gt;=&lt;/span&gt;black
&lt;span class="k"&gt;hi&lt;/span&gt; CursorColumn cterm&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;NONE&lt;/span&gt; ctermbg&lt;span class="p"&gt;=&lt;/span&gt;green ctermfg&lt;span class="p"&gt;=&lt;/span&gt;black guibg&lt;span class="p"&gt;=&lt;/span&gt;green guifg&lt;span class="p"&gt;=&lt;/span&gt;black

&lt;span class="c"&gt;" query what kind of syntax is this color? - wc&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="nb"&gt;wc&lt;/span&gt; :echo &lt;span class="s2"&gt;"hi&amp;lt;"&lt;/span&gt; . synIDattr&lt;span class="p"&gt;(&lt;/span&gt;synID&lt;span class="p"&gt;(&lt;/span&gt;line&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="k"&gt;col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; . &lt;span class="s1"&gt;'&amp;gt; trans&amp;lt;'&lt;/span&gt; . synIDattr&lt;span class="p"&gt;(&lt;/span&gt;synID&lt;span class="p"&gt;(&lt;/span&gt;line&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="k"&gt;col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; .&lt;span class="s2"&gt;"&amp;gt; lo&amp;lt;"&lt;/span&gt; . synIDattr&lt;span class="p"&gt;(&lt;/span&gt;synIDtrans&lt;span class="p"&gt;(&lt;/span&gt;synID&lt;span class="p"&gt;(&lt;/span&gt;line&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="k"&gt;col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; . &lt;span class="s2"&gt;"&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" fuzzy file, buffer, tag finder&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;rtp&lt;/span&gt;&lt;span class="p"&gt;+=&lt;/span&gt;&lt;span class="sr"&gt;/usr/&lt;/span&gt;local&lt;span class="sr"&gt;/opt/&lt;/span&gt;fzf

&lt;span class="c"&gt;" ensure you have the latest version&lt;/span&gt;
Plug &lt;span class="s1"&gt;'junegunn/fzf'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; { &lt;span class="s1"&gt;'do'&lt;/span&gt;: { &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; fzf#install&lt;span class="p"&gt;()&lt;/span&gt; } }
Plug &lt;span class="s1"&gt;'junegunn/fzf.vim'&lt;/span&gt;

&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;e&lt;/span&gt; :Files&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;r&lt;/span&gt; :Buffers&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;t&lt;/span&gt; :Tags&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;ff&lt;/span&gt; :Rg&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;" nnoremap &lt;silent&gt; &lt;leader&gt;ff :Ag&lt;cr&gt;&lt;/cr&gt;&lt;/leader&gt;&lt;/silent&gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;la&lt;/span&gt; :BLines&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;ll&lt;/span&gt; :Lines&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;' :Marks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;fh :Helptags&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;fs&lt;/span&gt; :Snippets&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;fc :Commits&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;fbc :BCommits&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;hh&lt;/span&gt; :History&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt;: :History:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt;&lt;span class="sr"&gt;/ :History/&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" let $FZF_DEFAULT_OPTS = '--layout=reverse --info=inline'&lt;/span&gt;
&lt;span class="c"&gt;" let $FZF_DEFAULT_COMMAND="rg --files --hidden"&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:fzf_buffers_jump &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:fzf_layout &lt;span class="p"&gt;=&lt;/span&gt; { &lt;span class="s1"&gt;'down'&lt;/span&gt;: &lt;span class="s1"&gt;'~50%'&lt;/span&gt; }
&lt;span class="c"&gt;" let g:fzf_preview_window = ''&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:fzf_preview_window &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'right:0%'&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; s:copy_results&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; joined_lines &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt;:&lt;span class="nb"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"\n"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; len&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt;:&lt;span class="nb"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; joined_lines .&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"\n"&lt;/span&gt;
  &lt;span class="k"&gt;endif&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; @&lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; joined_lines
&lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:fzf_action &lt;span class="p"&gt;=&lt;/span&gt; {
  \ &lt;span class="s1"&gt;'ctrl-t'&lt;/span&gt;: &lt;span class="s1"&gt;'tab split'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'ctrl-x'&lt;/span&gt;: &lt;span class="s1"&gt;'split'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'ctrl-v'&lt;/span&gt;: &lt;span class="s1"&gt;'vsplit'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'ctrl-o'&lt;/span&gt;: &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'s:copy_results'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  \ }

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:fzf_colors &lt;span class="p"&gt;=&lt;/span&gt;
\ { &lt;span class="s1"&gt;'fg'&lt;/span&gt;:      [&lt;span class="s1"&gt;'fg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Normal'&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'bg'&lt;/span&gt;:      [&lt;span class="s1"&gt;'bg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Normal'&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'hl'&lt;/span&gt;:      [&lt;span class="s1"&gt;'fg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Comment'&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'fg+'&lt;/span&gt;:     [&lt;span class="s1"&gt;'fg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'CursorLine'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'CursorColumn'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Normal'&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'bg+'&lt;/span&gt;:     [&lt;span class="s1"&gt;'bg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'CursorLine'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'CursorColumn'&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'hl+'&lt;/span&gt;:     [&lt;span class="s1"&gt;'fg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Statement'&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'info'&lt;/span&gt;:    [&lt;span class="s1"&gt;'fg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'PreProc'&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'prompt'&lt;/span&gt;:  [&lt;span class="s1"&gt;'fg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Conditional'&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'pointer'&lt;/span&gt;: [&lt;span class="s1"&gt;'fg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Exception'&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'marker'&lt;/span&gt;:  [&lt;span class="s1"&gt;'fg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Keyword'&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'spinner'&lt;/span&gt;: [&lt;span class="s1"&gt;'fg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Label'&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'header'&lt;/span&gt;:  [&lt;span class="s1"&gt;'fg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Comment'&lt;/span&gt;] }


&lt;span class="c"&gt;" grep in vim - shows results in a split window&lt;/span&gt;
Plug &lt;span class="s1"&gt;'mileszs/ack.vim'&lt;/span&gt;

&lt;span class="c"&gt;" session tracking&lt;/span&gt;
Plug &lt;span class="s1"&gt;'tpope/vim-obsession'&lt;/span&gt;

&lt;span class="c"&gt;" pairs of handy bracket mapping&lt;/span&gt;
Plug &lt;span class="s1"&gt;'tpope/vim-unimpaired'&lt;/span&gt;

&lt;span class="c"&gt;" https://vimawesome.com/plugin/surround-vim&lt;/span&gt;
Plug &lt;span class="s1"&gt;'tpope/vim-surround'&lt;/span&gt;

&lt;span class="c"&gt;" repeat commands from plugin mappings&lt;/span&gt;
Plug &lt;span class="s1"&gt;'tpope/vim-repeat'&lt;/span&gt;

&lt;span class="c"&gt;" vinegar&lt;/span&gt;
Plug &lt;span class="s1"&gt;'tpope/vim-vinegar'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:netrw_liststyle &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;

&lt;span class="c"&gt;" CSV&lt;/span&gt;
Plug &lt;span class="s1"&gt;'chrisbra/csv.vim'&lt;/span&gt;

&lt;span class="c"&gt;" nerdtree&lt;/span&gt;
Plug &lt;span class="s1"&gt;'scrooloose/nerdtree'&lt;/span&gt;

&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;n&lt;/span&gt; :NERDTreeToggle&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:nerdtree_tabs_autoclose&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; NERDTreeAutoDeleteBuffer &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="c"&gt;" Automatically delete the buffer of the file you just deleted&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:nerdtree_tabs_open_on_gui_startup&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="c"&gt;" 2 - open nerdtree only if directory was given as startup argument&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:nerdtree_tabs_smart_startup_focus&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="c"&gt;" always focus file window after startup&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; NERDTreeShowHidden&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="c"&gt;" Status bars&lt;/span&gt;
Plug &lt;span class="s1"&gt;'vim-airline/vim-airline'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'vim-airline/vim-airline-themes'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline_powerline_fonts &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:hybrid_custom_term_colors &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:hybrid_reduced_contrast &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline_statusline_ontop&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline_section_y&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt; &lt;span class="c"&gt;" remove encoding status&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline_skip_empty_sections &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline_theme&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'badwolf'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#fugitiveline#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#tmuxline#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#gutentags#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#virtualenv#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#ale#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#csv#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#tagbar#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#vimtex#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#&lt;span class="nb"&gt;tabline&lt;/span&gt;#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#&lt;span class="nb"&gt;tabline&lt;/span&gt;#formatter &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'unique_tail_improved'&lt;/span&gt;

&lt;span class="c"&gt;" comments&lt;/span&gt;
Plug &lt;span class="s1"&gt;'scrooloose/nerdcommenter'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:NERDSpaceDelims &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:NERDCompactSexyComs &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:NERDDefaultAlign &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'left'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:NERDCommentEmptyLines &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:NERDTrimTrailingWhitespace &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="c"&gt;" markdown. tabular is required&lt;/span&gt;
Plug &lt;span class="s1"&gt;'plasticboy/vim-markdown'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'godlygeek/tabular'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vim_markdown_fenced_languages &lt;span class="p"&gt;=&lt;/span&gt; [&lt;span class="s1"&gt;'python=py'&lt;/span&gt;]
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vim_markdown_follow_anchor &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vim_markdown_conceal_code_blocks &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vim_markdown_folding_disabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vim_markdown_conceal &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:tex_conceal &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vim_markdown_math &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vim_markdown_new_list_item_indent &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vim_markdown_strikethrough &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="c"&gt;" writing prose&lt;/span&gt;
Plug &lt;span class="s1"&gt;'reedes/vim-pencil'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'junegunn/goyo.vim'&lt;/span&gt;

augroup pencil
  autocmd&lt;span class="p"&gt;!&lt;/span&gt;
  autocmd &lt;span class="nb"&gt;FileType&lt;/span&gt; wiki&lt;span class="p"&gt;,&lt;/span&gt;md&lt;span class="p"&gt;,&lt;/span&gt;txt &lt;span class="k"&gt;call&lt;/span&gt; pencil#init&lt;span class="p"&gt;()&lt;/span&gt;
  autocmd &lt;span class="nb"&gt;FileType&lt;/span&gt; wiki&lt;span class="p"&gt;,&lt;/span&gt;md&lt;span class="p"&gt;,&lt;/span&gt;txt :PencilSoft
augroup END

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:pencil#wrapModeDefault &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'soft'&lt;/span&gt; 

autocmd&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;User&lt;/span&gt; GoyoEnter 
autocmd&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;User&lt;/span&gt; GoyoLeave

&lt;span class="c"&gt;" Ensure :q to quit even when Goyo is active&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; s:goyo_enter&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;b&lt;/span&gt;:quitting &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;b&lt;/span&gt;:quitting_bang &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
  autocmd &lt;span class="nb"&gt;QuitPre&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;b&lt;/span&gt;:quitting &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  cabbrev &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;q&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;b&lt;/span&gt;:quitting_bang &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;bar&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;q&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;
  &lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="nb"&gt;wrap&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="c"&gt;" Quit Vim if this is the only remaining buffer&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; s:goyo_leave&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;b&lt;/span&gt;:quitting &amp;amp;&amp;amp; len&lt;span class="p"&gt;(&lt;/span&gt;filter&lt;span class="p"&gt;(&lt;/span&gt;range&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; bufnr&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'$'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="s1"&gt;'buflisted(v:val)'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;b&lt;/span&gt;:quitting_bang
      &lt;span class="k"&gt;qa&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="k"&gt;qa&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;
  &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

autocmd&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;User&lt;/span&gt; GoyoEnter &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;goyo_enter&lt;span class="p"&gt;()&lt;/span&gt;
autocmd&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;User&lt;/span&gt; GoyoLeave &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;goyo_leave&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;g&lt;/span&gt; :Goyo&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" python linting&lt;/span&gt;
&lt;span class="c"&gt;" F7 checks flake8&lt;/span&gt;
Plug &lt;span class="s1"&gt;'nvie/vim-flake8'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'vim-scripts/pylint.vim'&lt;/span&gt;

&lt;span class="c"&gt;"Flagging Unnecessary Whitespace&lt;/span&gt;
&lt;span class="nb"&gt;highlight&lt;/span&gt; BadWhitespace ctermbg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;red&lt;/span&gt; guibg&lt;span class="p"&gt;=&lt;/span&gt;darkred

Plug &lt;span class="s1"&gt;'sheerun/vim-polyglot'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:polyglot_disabled &lt;span class="p"&gt;=&lt;/span&gt; [&lt;span class="s1"&gt;'latex'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'html'&lt;/span&gt;]
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:python_highlight_all &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:graphql_javascript_tags &lt;span class="p"&gt;=&lt;/span&gt; []

&lt;span class="c"&gt;" javaScript&lt;/span&gt;
Plug &lt;span class="s1"&gt;'pangloss/vim-javascript'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:javascript_plugin_jsdoc &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:javascript_plugin_flow &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c"&gt;" format .JSON files by using the jq cli tool&lt;/span&gt;
&lt;span class="k"&gt;com&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; JQ %&lt;span class="p"&gt;!&lt;/span&gt;jq

&lt;span class="c"&gt;" HTML/JINJA&lt;/span&gt;
Plug &lt;span class="s1"&gt;'glench/vim-jinja2-syntax'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'valloric/matchtagalways'&lt;/span&gt;
&lt;span class="c"&gt;" Plug 'alvan/vim-closetag'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:closetag_filenames &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"*.html, *.xhtml, *.phtml"&lt;/span&gt;

&lt;span class="k"&gt;call&lt;/span&gt; plug#&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>Data Science vs Web Development: Larger Code Bases</title><link href="https://johnmathews.eu/larger-code-bases.html" rel="alternate"/><published>2021-01-14T13:40:00+01:00</published><updated>2021-01-14T13:40:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-14:/larger-code-bases.html</id><summary type="html"/><content type="html">&lt;h2 id="code-structure"&gt;Code Structure&lt;/h2&gt;
&lt;p&gt;One of the most immediate and basic differences between working as a data
scientist or as a web developer is the number of files the codebase
is spread across and the amount of code within each file.&lt;/p&gt;
&lt;p&gt;Web applications tend to be very modular - there are a lot of different things
going on in a modern web app and generally they all need to be able to be
modified or updated independently of each other. This requirement encourages
modular code base architecture with the code broken down into testable units.&lt;/p&gt;
&lt;p&gt;When working on a data science project you often have a well defined and quite narrow pipe line. Each stage of a pipeline has well defined inputs and outputs.&lt;/p&gt;
&lt;p&gt;This seems to have the consequence of making data science projects tend towards a handful of files each with a substantial amount of unique (not boilerplate) code. In web development there seems to be more boilerplate, many more
files spread across a tree of directories, and the average number of lines of code per file is significantly lower.&lt;/p&gt;
&lt;h2 id="ide-features"&gt;&lt;span class="caps"&gt;IDE&lt;/span&gt; features&lt;/h2&gt;
&lt;p&gt;These differences mean that code organization tools and &lt;span class="caps"&gt;IDE&lt;/span&gt; features play very
different roles within each industry. In web development you really need to be able to jump between different files (or buffers) quickly, and search for text across multiple files. Writing idiomatically becomes more important, and writing code within discreet testable units becomes essential so that things don’t break without being noticed.&lt;/p&gt;
&lt;p&gt;In data science, linting feels more optional, and searching for text within  methods or functions outside the current module is rarer.&lt;/p&gt;
&lt;p&gt;I didn’t appreciate this until I paused my work as a Data Scientist and began building non-trivial web apps. &lt;/p&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>Test Driven Development</title><link href="https://johnmathews.eu/test-driven-development.html" rel="alternate"/><published>2021-01-06T17:50:00+01:00</published><updated>2021-01-06T17:50:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-06:/test-driven-development.html</id><summary type="html"/><content type="html">&lt;p&gt;Test Driven Development was mind-bending when I first grappled with it: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;Write a test for the code before you write the code”&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;Assert that your code matches your expectations by understanding &lt;em&gt;all&lt;/em&gt; the inputs and &lt;em&gt;all&lt;/em&gt; the outputs for &lt;em&gt;every&lt;/em&gt; function or method I write”. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Last summer I was building a web app and began to break things unintentionally
when adding new features. This soon led to lots of clicking around different
pages to test if stuff was still working each time I made an update.&lt;/p&gt;
&lt;p&gt;This led to me thinking there must be a better way, which eventually brought
me to Test Driven Development (&lt;span class="caps"&gt;TDD&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;It should have just led me to writing tests, which it did. But googling
whatever I googled got me down the &lt;span class="caps"&gt;TDD&lt;/span&gt; rabbit hole rather than just the “write
some tests” rabbit hole. Write tests for your code before you write the code.
Write tests for bugs you’ve fixed to check they stay fixed. Write tests as a
kind of documentation to show what stuff is supposed to be doing. Errr…&lt;/p&gt;
&lt;p&gt;Django was a big enough pile of abstractions as it was. Views, ORMs, mixins,
serializers… Trying to add factories and fixtures into that took some getting
used to. But eventually I made some progress, and now I quite enjoy running
coverage reports to keep coverage &lt;em&gt;close&lt;/em&gt; to 100%&lt;sup id="sf-test-driven-development-1-back"&gt;&lt;a class="simple-footnote" href="#sf-test-driven-development-1" title="Which is fun and all, but testing for the sake of it doesn’t necessarily stop bad things happening. Its very possible to write a test that covers the code you’ve just written without ensuring that only the intended behaviours happen."&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Some of the main things I’ve learnt about writing tests:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use PyTest as much as possible rather than other testing libraries - its &lt;code&gt;assert&lt;/code&gt; statements are more intuitive than Django’s own testing framework, and you can use it in any Python codebase, not just Django. It has lots of extensions and seems good at getting the job done fairly easily.&lt;/li&gt;
&lt;li&gt;Write tests as you go. I haven’t (yet) reached the elevated level of writing
   tests before I write the code to be tested, though I see why that would
   sometimes be useful. I do think writing tests sooner rather than later is
   best though, ideally as soon as you’ve got a basic version of your feature working.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;Coverage&lt;/code&gt; to show you which code is covered by your tests, and which
   branches or edge cases are not. But be warned, it doesn’t tell you if the
   test is useful or not, only that it passes and which methods or functions it uses.&lt;/li&gt;
&lt;li&gt;Fixtures are great for keeping tests fairly &lt;span class="caps"&gt;DRY&lt;/span&gt;. &lt;code&gt;Freezegun&lt;/code&gt; is great for
   testing anything to do with dates and times. &lt;/li&gt;
&lt;li&gt;Static type checkers, like &lt;code&gt;Mypy&lt;/code&gt;, get more attractive in proportion to
   codebase complexity and size.&lt;/li&gt;
&lt;/ol&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-test-driven-development-1"&gt;Which is fun and all, but
testing for the sake of it doesn’t necessarily stop bad things happening. Its very possible to write a test that covers the code you’ve just
written without ensuring that &lt;em&gt;only&lt;/em&gt; the intended behaviours happen. &lt;a class="simple-footnote-back" href="#sf-test-driven-development-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Developer Tools"/><category term="python"/><category term="django"/><category term="testing"/><category term="web-app"/></entry><entry><title>API Design Principles</title><link href="https://johnmathews.eu/api-design.html" rel="alternate"/><published>2021-01-04T16:59:00+01:00</published><updated>2021-01-04T16:59:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-04:/api-design.html</id><summary type="html"/><content type="html">&lt;p&gt;Some super brief notes I made about &lt;span class="caps"&gt;API&lt;/span&gt; design:&lt;/p&gt;
&lt;h2 id="background"&gt;Background&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It’s more of an art than a science&lt;/li&gt;
&lt;li&gt;RESTful (REpresentational State Transfer) &lt;span class="caps"&gt;API&lt;/span&gt; design is an architectural style.&lt;/li&gt;
&lt;li&gt;Alternative &lt;span class="caps"&gt;API&lt;/span&gt; architectures:&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;SOAP&lt;/span&gt; (Simple Object Access Protocol) is a heavier style.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GraphQL&lt;/code&gt; - doesnt overfetch. Graph query language made by Facebook.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;APIs are everywhere (not just web APIs). They’re an &lt;a href="https://johnmathews.eu/principles-of-oop.html#2-abstraction"&gt;abstraction&lt;/a&gt; that hides an implementation. &lt;code&gt;Django&lt;/code&gt; model managers are an &lt;span class="caps"&gt;API&lt;/span&gt; (and also part of Django’s &lt;span class="caps"&gt;ORM&lt;/span&gt;), JavaScript is an &lt;span class="caps"&gt;API&lt;/span&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="restful-apis"&gt;RESTful APIs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Web APIs (all &lt;span class="caps"&gt;REST&lt;/span&gt; APIs?) expose a databases to clients&lt;/li&gt;
&lt;li&gt;A rest api is a &lt;span class="caps"&gt;URL&lt;/span&gt; route (endpoint) that returns &lt;span class="caps"&gt;JSON&lt;/span&gt; or &lt;span class="caps"&gt;XML&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;POST&lt;/span&gt;, &lt;span class="caps"&gt;GET&lt;/span&gt;, &lt;span class="caps"&gt;PUT&lt;/span&gt;, &lt;span class="caps"&gt;PATCH&lt;/span&gt;, &lt;span class="caps"&gt;DELETE&lt;/span&gt;, corresponds to Create, Read, Update/Replace, Update/Modify, Delete (&lt;span class="caps"&gt;HTTP&lt;/span&gt; methods correspond to &lt;span class="caps"&gt;CRUD&lt;/span&gt; methods)&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;METHODS&lt;/span&gt;:&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;PUT&lt;/span&gt; (create or update) is idempotent, &lt;span class="caps"&gt;POST&lt;/span&gt; is not idempotent (keep on creating, updating)&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;PATCH&lt;/span&gt; - partial update&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;GET&lt;/span&gt;, &lt;span class="caps"&gt;HEAD&lt;/span&gt;, &lt;span class="caps"&gt;OPTIONS&lt;/span&gt; and &lt;span class="caps"&gt;TRACE&lt;/span&gt; methods are idempotent cos they are only designed for retrieving data.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;DELETE&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;HEAD&lt;/span&gt; - almost identical to &lt;span class="caps"&gt;GET&lt;/span&gt;, but without any body. Good for checking what a request would return, i.e. Before downloading a large amount of data, &lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;OPTIONS&lt;/span&gt; - returns data describing what other methods and operations the server supports at the given &lt;span class="caps"&gt;URL&lt;/span&gt;. More loosely defined than other verbs. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="qualitative-advice"&gt;Qualitative Advice&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;span class="caps"&gt;HTTP&lt;/span&gt; verbs to make requests more meaningful&lt;/li&gt;
&lt;li&gt;Use sensible resource names. Naming things is hard, so think about this a bit
    before starting.&lt;ul&gt;
&lt;li&gt;Use identifiers in your URLs, not the query string.&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Good&lt;/strong&gt;: &lt;code&gt;/users/12345&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Poor&lt;/strong&gt;: &lt;code&gt;/api?type=user&amp;amp;id=23&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use the hierarchical structure of the &lt;span class="caps"&gt;URL&lt;/span&gt; to imply the structure of the &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Design (names and structure of things) for the user/client, not for the database.&lt;ul&gt;
&lt;li&gt;Resource names should be nouns not verbs&lt;/li&gt;
&lt;li&gt;Use plurals consistently, not collection verbiage. Good: customers/123 Bad: customer_list/123&lt;/li&gt;
&lt;li&gt;Use case-insensitivity.&lt;/li&gt;
&lt;li&gt;Use camel case or snake case consistency&lt;/li&gt;
&lt;li&gt;Short is better than long, but be clear&lt;/li&gt;
&lt;li&gt;Spend time on design before writing code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use &lt;span class="caps"&gt;HTTP&lt;/span&gt; response codes to indicate status&lt;/li&gt;
&lt;li&gt;Prefer &lt;span class="caps"&gt;JSON&lt;/span&gt; over &lt;span class="caps"&gt;XML&lt;/span&gt;. (Hotline does &lt;span class="caps"&gt;HTML&lt;/span&gt;..)&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;XML&lt;/span&gt; requires schemas for validation and namespaces. Don’t support this complexity at the beginning (or ever) unless required. If it is required, make the &lt;span class="caps"&gt;XML&lt;/span&gt; as similar to &lt;span class="caps"&gt;JSON&lt;/span&gt; as possible.&lt;/li&gt;
&lt;li&gt;Put links in the &lt;span class="caps"&gt;HTTP&lt;/span&gt; link header, or use a &lt;span class="caps"&gt;JSON&lt;/span&gt; representation of this.&lt;/li&gt;
&lt;li&gt;Use the &lt;span class="caps"&gt;HTTP&lt;/span&gt; location header to contain a link on resource creation, or for &lt;span class="caps"&gt;GET&lt;/span&gt; with pagination, use first, last, next, prev.&lt;/li&gt;
&lt;li&gt;Connectedness - return links in the response which link to useful resources. At minimum, a link to show how the data was received, or posted.&lt;/li&gt;
&lt;li&gt;Idempotence - clients making the same repeated requests create the same result on the server side. I.e. making repeated requests has the same result as making a similar request, server side. On the client side, a response code may change, of course. &lt;/li&gt;
&lt;/ul&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>Principles Of Object Orientated Programming</title><link href="https://johnmathews.eu/principles-of-oop.html" rel="alternate"/><published>2021-01-04T16:27:00+01:00</published><updated>2021-01-04T16:27:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-04:/principles-of-oop.html</id><summary type="html"/><content type="html">&lt;p&gt;I recently interviewed for a lead developer role at &lt;a href="https://labdigital.nl/en/"&gt;Lab Digital&lt;/a&gt;&lt;sup id="sf-principles-of-oop-1-back"&gt;&lt;a class="simple-footnote" href="#sf-principles-of-oop-1" title="Unfortunately, I didn’t get the job. They wanted a senior Python developer with experience with Infrastructure As Code, and also working at an agency. Can’t win them all."&gt;1&lt;/a&gt;&lt;/sup&gt; and thought it would be sensible to review some of the fundamental aspects of Object Orientated Programming (&lt;span class="caps"&gt;OOP&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;You might think that’s a unusual way to prepare for an interview, and you’d be right. Nothing close to these notes arose during the interview, but I find this stuff interesting. If I’m motivated enough to study it, then I think that’s a good enough reason by itself, without a specific reason. These are some brief notes.&lt;/p&gt;
&lt;p&gt;Object Orientated Programming has four key aspects:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Encapsulation (Hiding information)&lt;/li&gt;
&lt;li&gt;Abstraction (Hiding the implementation)&lt;/li&gt;
&lt;li&gt;Inheritance&lt;/li&gt;
&lt;li&gt;Polymorphism&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="1-encapsulation"&gt;1. Encapsulation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Each object keeps its state private, inside a class.&lt;/li&gt;
&lt;li&gt;Instance variables/properties/attributes are kept private and accessor methods are made public.&lt;/li&gt;
&lt;li&gt;Other objects don’t have direct access to this state. They can only call a list of public functions (methods).&lt;/li&gt;
&lt;li&gt;The object manages its own state via methods, no other class can touch it unless explicitly (not default) allowed.&lt;/li&gt;
&lt;li&gt;Private variables.&lt;/li&gt;
&lt;li&gt;Public methods.&lt;/li&gt;
&lt;li&gt;You can define classes within classes, and functions within functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2-abstraction"&gt;2. Abstraction&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A natural extension of encapsulation&lt;/li&gt;
&lt;li&gt;A concept or idea that is not associated with any particular instance.&lt;/li&gt;
&lt;li&gt;Expresses the intent of the class, rather than a specific implementation.&lt;/li&gt;
&lt;li&gt;Programs are often extremely large and separate objects communicate with each other a lot. This makes maintaining large programs difficult, and abstraction tries to solve this.&lt;/li&gt;
&lt;li&gt;Applying abstraction means that each object should only expose a high-level mechanism for using it.&lt;ul&gt;
&lt;li&gt;This mechanism should hide internal implementation details. It should only reveal operations relevant for the other objects.&lt;/li&gt;
&lt;li&gt;This mechanism should be easy to use and should rarely change over time. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implementation changes — for example, a software update — rarely affect the abstraction you use.&lt;/li&gt;
&lt;li&gt;e.g. a coffee machine. It does a lot of stuff and makes quirky noises under the hood. But all you have to do is put in coffee and press a button.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="3-inheritance"&gt;3. Inheritance&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;span class="caps"&gt;OOP&lt;/span&gt;, objects are often similar, sharing similar logic. But they are not 100% the same.&lt;/li&gt;
&lt;li&gt;Create a (child) class by deriving from another (parent) class. This way, we form a hierarchy.&lt;/li&gt;
&lt;li&gt;child class reuses all fields and methods of the parent class (common part) and can implement its own unique part using method or attribute overloading.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="4-polymorphism"&gt;4. Polymorphism&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Gives a way to use a class exactly like its parent so there’s no confusion with mixing types. But each child class keeps its own methods as they are.&lt;/li&gt;
&lt;li&gt;This typically happens by defining a (parent) interface to be reused. It outlines a bunch of common methods. Then, each child class implements its own version of these methods.&lt;/li&gt;
&lt;li&gt;Any time a collection (such as a list) or a method expects an instance of the parent (where common methods are outlined), the language takes care of evaluating the right implementation of the common method — regardless of which child is passed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’d like to be so familiar with the following features that I can use them without referring to notes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Getters and setters.&lt;/li&gt;
&lt;li&gt;Instance methods compared to class methods.&lt;/li&gt;
&lt;li&gt;Inheritance, mixins, and decorators.&lt;/li&gt;
&lt;li&gt;The “magic” within the &lt;code&gt;Django&lt;/code&gt; source code that requires &lt;code&gt;mypy&lt;/code&gt; to use extensions in order to do its static type checking correctly.&lt;/li&gt;
&lt;/ol&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-principles-of-oop-1"&gt;Unfortunately, I didn’t get the job. They wanted a senior Python developer with experience with &lt;code&gt;Infrastructure As Code&lt;/code&gt;, and also working at an agency. Can’t win them all. &lt;a class="simple-footnote-back" href="#sf-principles-of-oop-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>Unix: Utilities To Analyse And Update Multiple Text Files</title><link href="https://johnmathews.eu/using-unix-utilities-to-analyse-and-update-multiple-files.html" rel="alternate"/><published>2021-01-04T13:02:00+01:00</published><updated>2021-01-04T13:02:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-04:/using-unix-utilities-to-analyse-and-update-multiple-files.html</id><summary type="html"/><content type="html">&lt;p&gt;As part of the redesign of this blog I wanted to make an article’s category more meaningful. Previously, I simply picked a handful of categories and then assigned a single category to each post. This method becomes limiting when an article is relevant to multiple categories.&lt;/p&gt;
&lt;p&gt;Also, using nested categories seems like a good way of grouping similar content and allowing more nuanced filtering of interests.&lt;/p&gt;
&lt;p&gt;As I considered how to update the categories of existing articles, I realised this would be a good opportunity to practice analyzing and updating text files using unix utilities.&lt;/p&gt;
&lt;p&gt;Here is how I reviewed and updated the categories of my existing articles:&lt;/p&gt;
&lt;p&gt;I use Pelican to generate the static files for this site. It converts markdown into &lt;span class="caps"&gt;HTML&lt;/span&gt;. Metadata for each article is set at the beginning of a file, the title is set by typing &lt;code&gt;Title: ...&lt;/code&gt; and similarly the category is set by typing &lt;code&gt;Category: ...&lt;/code&gt; on its own line.&lt;/p&gt;
&lt;p&gt;To locate, analyse and update my existing categories, I would therefore need to
find all the markdown files which have a row that begins with &lt;code&gt;Category:&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grep -h ‘Category:’ **/*.md&lt;/code&gt; - prints each search result. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;grep -h ‘Category:’ **/*.md | sort&lt;/code&gt; - prints and sorts each search result.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grep -h ‘Category:’ **/*.md | sort | uniq -c&lt;/code&gt; prints and sorts each search
result, then counts how many occurrences of each unique result there are.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I had some repeat results though because some rows had white space at the end,
so in order to make these the same, I needed to remove trailing whitespace:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grep -h 'Category:' **/*.md | sed 's/[[:space:]]//g' | sort | uniq -c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This gave me the following results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt; Category:
&lt;span class="m"&gt;2&lt;/span&gt; Category:Data
&lt;span class="m"&gt;16&lt;/span&gt; Category:Disintermediation
&lt;span class="m"&gt;2&lt;/span&gt; Category:Engineering
&lt;span class="m"&gt;2&lt;/span&gt; Category:Front-end
&lt;span class="m"&gt;15&lt;/span&gt; Category:General
&lt;span class="m"&gt;15&lt;/span&gt; Category:Startups
&lt;span class="m"&gt;8&lt;/span&gt; Category:Tools
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Category is repeated and isn’t needed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grep -h 'Category:' **/*.md | sed 's/[[:space:]]//g' | sort | uniq -c | sort |
sed 's/Category://g'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This gives me the following output, which is acceptable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; Data
&lt;span class="m"&gt;2&lt;/span&gt; Engineering
&lt;span class="m"&gt;2&lt;/span&gt; Front-end
&lt;span class="m"&gt;6&lt;/span&gt;
&lt;span class="m"&gt;8&lt;/span&gt; Tools
&lt;span class="m"&gt;15&lt;/span&gt; General
&lt;span class="m"&gt;15&lt;/span&gt; Startups
&lt;span class="m"&gt;16&lt;/span&gt; Disintermediation
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="new-categories"&gt;New Categories&lt;/h2&gt;
&lt;p&gt;The next stage was to begin updating these categories with the new, nested
categories. I’ve decided to try splitting the categories into technical and
non-technical groups.&lt;/p&gt;
&lt;p&gt;I can imagine splitting &lt;code&gt;Technical &amp;gt; Data&lt;/code&gt; even more in
future, perhaps having &lt;code&gt;Data Analytics&lt;/code&gt;, &lt;code&gt;Data Science&lt;/code&gt;, and &lt;code&gt;Data Engineering&lt;/code&gt; as
sub categories.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Technical&lt;ul&gt;
&lt;li&gt;Data&lt;/li&gt;
&lt;li&gt;Developer Tools&lt;/li&gt;
&lt;li&gt;Web&lt;/li&gt;
&lt;li&gt;Cryptocurrency&lt;/li&gt;
&lt;li&gt;Civil Engineering&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Not technical&lt;ul&gt;
&lt;li&gt;Entrepreneurship&lt;/li&gt;
&lt;li&gt;Family&lt;/li&gt;
&lt;li&gt;Self&lt;/li&gt;
&lt;li&gt;Career&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I &lt;code&gt;cd&lt;/code&gt; into the directory containing the markdown files, and then to change
all the articles with &lt;code&gt;Category: Tools&lt;/code&gt; to &lt;code&gt;Category: Technical/Developer
Tools&lt;/code&gt; I did:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grep -l 'Category: Tools' *.md | xargs sed -i 's/Category: Tools/Category: Technical\/Developer Tools/g'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If I want to see a list of files containing &lt;code&gt;Category: General&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grep -H 'Category: General' *.md&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If I want to see just the file names, then:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grep -l 'Category: General' *.md&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="update"&gt;Update&lt;/h1&gt;
&lt;p&gt;Since writing this post I’ve modified the categories a few times. The commands I
run to switch out categories are as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;oldName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Lifestyle&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;newName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Living
grep -l &lt;span class="s2"&gt;"Category: .*Non-technical/&lt;/span&gt;&lt;span class="nv"&gt;$oldName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; content/articles/*.md &lt;span class="p"&gt;|&lt;/span&gt; xargs sed -i &lt;span class="s1"&gt;''&lt;/span&gt; &lt;span class="s2"&gt;"s/Non-technical\/&lt;/span&gt;&lt;span class="nv"&gt;$oldName&lt;/span&gt;&lt;span class="s2"&gt;/Non-technical\/&lt;/span&gt;&lt;span class="nv"&gt;$newName&lt;/span&gt;&lt;span class="s2"&gt;/g"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Double quotes are not the same as single quotes. You need to use them if you
    want to access variables or commands inside a string.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.*&lt;/code&gt; is a wildcard operator allowing any number of characters. It’s
    required when an article belongs to multiple categories.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>A faster shell</title><link href="https://johnmathews.eu/shell.html" rel="alternate"/><published>2019-02-14T11:32:00+01:00</published><updated>2019-02-14T11:32:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2019-02-14:/shell.html</id><summary type="html">&lt;p&gt;zsh was loading significantly slower than bash, so I used profiling to see what was slowing things&amp;nbsp;down&lt;/p&gt;</summary><content type="html">&lt;p&gt;Opening up a new shell was annoyingly slow. Not terrible, but enough to notice. Its a niggle.&lt;/p&gt;
&lt;p&gt;I wanted to find out which components were causing the most delay, so I used
&lt;code&gt;time&lt;/code&gt; to measure how long it took to launch a shell. Even though shells
might appear to be part of the low level ‘guts’ of a computer, each shell is
just an executable and can be treated as such.&lt;/p&gt;
&lt;p&gt;To measure the startup speed of your shell, do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="k"&gt;$(&lt;/span&gt;seq &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; /usr/bin/time &lt;span class="nv"&gt;$SHELL&lt;/span&gt; -i -c exit&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="zsh profile" src="https://johnmathews.eu/images/zsh_startup_speed.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;This shows that it takes 0.84 seconds to start &lt;code&gt;zsh&lt;/code&gt; - not terrible, but not great:&lt;/p&gt;
&lt;p&gt;You can compare the performance of different shells by replacing &lt;code&gt;$SHELL&lt;/code&gt; with
&lt;code&gt;zsh&lt;/code&gt;, &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;fish&lt;/code&gt; etc.&lt;/p&gt;
&lt;p&gt;Here are the results if I used &lt;code&gt;BASH&lt;/code&gt; instead of &lt;code&gt;zsh&lt;/code&gt; - 9.3x faster! (but
without useful tools and plugins):
&lt;img alt="bash profile" src="https://johnmathews.eu/images/bash_startup_speed.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;Now that I can measure how long it takes to start, it would be useful to know
which proccesses are causing the greatest delays. This could be done with
something like &lt;code&gt;zsh -xv&lt;/code&gt; which enables verbose output and xtrace. This creates
a tonne of output, but doesnt inlcude timestamps. All I really want is
a summary of how much time each subproccess required to run, i.e. an order blind profiler.&lt;/p&gt;
&lt;p&gt;Add &lt;code&gt;zmodload zsh/zprof&lt;/code&gt; at the start of &lt;code&gt;.zshrc&lt;/code&gt; and &lt;code&gt;zprof&lt;/code&gt; at the very end.
Now when I start &lt;code&gt;zsh&lt;/code&gt; I see the following:&lt;/p&gt;
&lt;p&gt;&lt;img alt="zsh startup components" src="https://johnmathews.eu/images/zsh_order_blind_profiling.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;Next steps - make virtualenvwrapper run faster, or asyncronously, or
not at all…&lt;/p&gt;
&lt;p&gt;Update:
&lt;code&gt;virtualenvwrapper&lt;/code&gt; is the biggest cause of slow loading. Using the &lt;a href="https://virtualenvwrapper.readthedocs.io/en/latest/install.html"&gt;lazy
loading&lt;/a&gt; option decreased loading time by 0.3s&lt;/p&gt;
&lt;p&gt;&lt;img alt="zsh profile" src="https://johnmathews.eu/images/zsh_startup_speed_lazy_load.jpg"/&gt;&lt;/p&gt;</content><category term="Technical/Developer Tools"/><category term="shell"/><category term="unix"/><category term="zsh"/><category term="bash"/><category term="profiling"/></entry><entry><title>Ry’s Git Tutorial</title><link href="https://johnmathews.eu/rys-git-tutorial.html" rel="alternate"/><published>2018-06-01T17:11:00+02:00</published><updated>2018-06-01T17:11:00+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2018-06-01:/rys-git-tutorial.html</id><summary type="html">&lt;p&gt;Ry&amp;rsquo;s Git Tutorial is a great way to learn Git. Learn by doing as you create and maintain a simple&amp;nbsp;website.&lt;/p&gt;</summary><content type="html">&lt;p&gt;For tracking changes to a collection of files, Git is the ubiquitous solution. It’s free, robust, comprehensive, and there is a plethora of resources that are easy to find.&lt;/p&gt;
&lt;p&gt;I usually find the commands difficult to remember though, and the concepts which Git is built on often seem counter-intuitive to me. This means I spend a lot of time searching for answers and trying to remember how I can use Git to experiment with a project without fear of losing any hard won progress.&lt;/p&gt;
&lt;p&gt;Ry’s Git Tutorial by Ryan Hodson is the best way to learn Git that I have come across. Its simple, practical, and clear. The reader learns how to use Git yy creating and maintaining a simple website. This gives the Git commands a meaningful context, which makes them a lot easier to remember and use in the future.&lt;/p&gt;
&lt;p&gt;The tutorial was first published in 2012 and the website which originally hosted the examples no longer exists. Each tutorial chapter starts with a link to download the project files up to that point, so the reader doesn’t need to start at the beginning but can jump into any part of the guide. Unfortunately these links are dead now.&lt;/p&gt;
&lt;p&gt;Therefore I’m hosting the tutorial here so that it continues to be useful. If the author would like to get in touch, please do. I’d like to keep this great resource available so that others can benefit from it.&lt;/p&gt;
&lt;p&gt;Download the .epub file &lt;a href="https://johnmathews.eu/Ry’s Git Tutorial.epub"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Download the example files for each module below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter2.zip"&gt;Chapter 2: Undoing Changes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter3.zip"&gt;Chapter 3: Branches I&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter4.zip"&gt;Chapter 4: Branches &lt;span class="caps"&gt;II&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter5.zip"&gt;Chapter 5: Rebasing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter6.zip"&gt;Chapter 6: Rewriting History&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter7.zip"&gt;Chapter 7: Remotes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter8.zip"&gt;Chapter 8: Centralized Workflows&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter9.zip"&gt;Chapter 9: Distributed Workflows&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter10.zip"&gt;Chapter 10: Patch Workflows&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter11.zip"&gt;Chapter 11: Tips &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Tricks&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter12.zip"&gt;Chapter 12: Plumbing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter13.zip"&gt;end&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Technical/Developer Tools"/><category term="Git"/><category term="Rys"/><category term="Tutorial"/><category term="Ryan Hodson"/></entry><entry><title>Vim!</title><link href="https://johnmathews.eu/vim.html" rel="alternate"/><published>2016-12-01T22:32:00+01:00</published><updated>2016-12-01T22:32:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2016-12-01:/vim.html</id><summary type="html"/><content type="html">&lt;p&gt;Vim is a text editor renowned for its efficiency and its use of keyboard
shortcuts. It’s based on the Vi text editor from the 1970’s. It was first
released in 1991 and is still being developed today. It comes pre-installed on
Unix systems (including MacOS) and can be run from the terminal.&lt;/p&gt;
&lt;p&gt;Vim is famous in another way too - for being difficult to learn. I found some
good and remarkably creative tools to begin learning its concepts and controls.
This was necessary because there is no &lt;span class="caps"&gt;GUI&lt;/span&gt;. There is a
&lt;em&gt;game&lt;/em&gt; &lt;a href="http://vim-adventures.com/"&gt;here&lt;/a&gt;, and there is &lt;a href="http://www.openvim.com/"&gt;this interactive
tutorial&lt;/a&gt;. There’s also a built-in vim tutorial - just
type ‘vimtutor’ into Terminal.&lt;/p&gt;
&lt;p&gt;Vim is designed so that you don’t need to take your hands off your keyboard and
use a mouse. It has the ‘insert’ mode where you enter text as usual, and the
‘command’ mode where you can make use of a comprehensive and flexible shortcut
language to move around, edit and search the text. With no &lt;span class="caps"&gt;GUI&lt;/span&gt; or toolbar, it’s
a very different approach to text editing than I’m used to.&lt;/p&gt;
&lt;p&gt;You can run Vim from the terminal, but there are also versions that run as
apps. MacVim on MacOS has the option to show a tool bar of simple commands like
a normal program, and lets the arrow keys move the cursor in addition to &lt;span class="caps"&gt;VIM&lt;/span&gt;’s
‘hjkl’ functionality. This makes getting started a little simpler.&lt;/p&gt;
&lt;p&gt;There are also a lot of plugins to extend Vim’s functionality and turn it from
a text editor into an &lt;span class="caps"&gt;IDE&lt;/span&gt;. &lt;a href="https://realpython.com/blog/python/vim-and-python-a-match-made-in-heaven/"&gt;This
post&lt;/a&gt; walks
you through setting up Vim as a Python &lt;span class="caps"&gt;IDE&lt;/span&gt; and explains how to manage various add-ons.&lt;/p&gt;
&lt;p&gt;I recommend Daniel Mieslers &lt;a href="https://danielmiessler.com/study/vim/"&gt;blog post&lt;/a&gt;
for a quick overview of how to use Vim.&lt;/p&gt;</content><category term="Technical/Developer Tools"/><category term="Vim"/></entry><entry><title>Autumn, BIN and $PATH</title><link href="https://johnmathews.eu/autumn-bin-and-path.html" rel="alternate"/><published>2016-12-01T21:53:00+01:00</published><updated>2016-12-01T21:53:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2016-12-01:/autumn-bin-and-path.html</id><summary type="html"/><content type="html">&lt;p&gt;Two small things have been learnt recently: the importance of &lt;span class="caps"&gt;PATH&lt;/span&gt; and
the contents of various &lt;span class="caps"&gt;BIN&lt;/span&gt; folders.&lt;/p&gt;
&lt;p&gt;Autumn 2016 has not gone as planned. Whilst studying for a couple of
exams plans were put on hold and hobbies were ceased. Now that life is
returning to normal, I have opportunity to post again.&lt;/p&gt;
&lt;h2 id="path"&gt;&lt;span class="caps"&gt;PATH&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;html&gt;$&lt;/html&gt;&lt;span class="caps"&gt;PATH&lt;/span&gt; is a variable (string) which contains a series of folder
locations separated by “:”. Each of these folders contains programmes.
When you type the name of a programme into terminal without specifying
its location, the &lt;span class="caps"&gt;OS&lt;/span&gt; looks sequentially in each of the folder locations
listed in &lt;html&gt;$&lt;/html&gt;&lt;span class="caps"&gt;PATH&lt;/span&gt; to see if the programme is there, and then executes it.&lt;/p&gt;
&lt;h2 id="bin"&gt;&lt;span class="caps"&gt;BIN&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Bin as in Binary, not Bin as in Trash.&lt;/p&gt;
&lt;p&gt;The bin folders contain binary files, which are programmes ready to be run.&lt;/p&gt;
&lt;p&gt;If I run “echo &lt;html&gt;$&lt;/html&gt;&lt;span class="caps"&gt;PATH&lt;/span&gt;” from the Terminal, I see 9 folders called bin,
and its only by convention that they contain binaries. They are just
normal folders, which the &lt;span class="caps"&gt;OS&lt;/span&gt; is set to look in when asked to run an application.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;/Users/John/anaconda3/bin:/Library/Frameworks/Python.framework/Versions/&lt;/span&gt;
&lt;span class="err"&gt;3.5/bin:/Users/John/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/&lt;/span&gt;
&lt;span class="err"&gt;Library/TeX/texbin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Technical/Developer Tools"/><category term="Unix"/></entry><entry><title>Jupyter (iPython) notebooks + Pandas</title><link href="https://johnmathews.eu/Jupyter-ipython-notebooks-pandas.html" rel="alternate"/><published>2016-08-03T13:04:00+02:00</published><updated>2016-08-03T13:04:00+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2016-08-03:/Jupyter-ipython-notebooks-pandas.html</id><summary type="html"/><content type="html">&lt;p&gt;When working with more data than can fit in an Excel file, or when you
want to be sure the data won’t be edited, you usually need to interact with
the data by writing scripts.&lt;/p&gt;
&lt;p&gt;One of the biggest time sinks (for me) when working with these tools
(&lt;span class="caps"&gt;ACL&lt;/span&gt;, &lt;span class="caps"&gt;SQL&lt;/span&gt;, Python) is debugging, and working out exactly where in the
chain of individual commands something unexpected happened. Even with
only a modest page of code, I can quickly find myself rerunning the
entire script multiple times and commenting-out and uncommenting
multiple lines in order to understand what’s really going on. If you
have a time consuming task at the start of your script, such as a
summarise and sort command, the extra time required can be even greater.
This leads to interrupted flow and concentration.&lt;/p&gt;
&lt;p&gt;Pandas is a python package to manipulate large datasets, the Jupyter
notebook is an application which allows the user to run a python script
in chunks, and output the results of each chunk before continuing. You
can re-run a previous chunk without returning to the beginning, and
change the code as you go along. This is amazingly flexible and intuitive.&lt;/p&gt;
&lt;p&gt;I recently worked through an exceptionally good Pandas tutorial recorded
at PyCon 2015. “&lt;a href="https://youtu.be/5JnMutdy6Fw"&gt;Pandas from the ground
up&lt;/a&gt;” is well structured, clear, has good
scope and the resources are available to download from
&lt;a href="https://github.com/brandon-rhodes/pycon-pandas-tutorial"&gt;github&lt;/a&gt;.
Brandon Rhodes gives you a good working foundation for using Pandas and
the Jupyter notebook to manipulate datasets using Python.&lt;/p&gt;</content><category term="Technical/Developer Tools"/><category term="Data"/><category term="Jupyter Notebook"/><category term="Pandas"/><category term="Python"/></entry></feed>