<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>John Mathews - Technical/Web</title><link href="https://johnmathews.eu/" rel="alternate"/><link href="https://johnmathews.eu/feeds/technical/web.atom.xml" rel="self"/><id>https://johnmathews.eu/</id><updated>2021-06-22T14:30:07+02:00</updated><entry><title>Building my own site analytics</title><link href="https://johnmathews.eu/building-my-own-site-analytics.html" rel="alternate"/><published>2021-06-22T14:30:07+02:00</published><updated>2021-06-22T14:30:07+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-06-22:/building-my-own-site-analytics.html</id><summary type="html"/><content type="html">&lt;h2 id="motivation"&gt;Motivation&lt;/h2&gt;
&lt;p&gt;I’ve built a simple website analytics feature for this site, you can see it at
&lt;a href="https://johnmathews.eu/analytics.html"&gt;/analytics&lt;/a&gt;. You can page views per day,
unique &lt;span class="caps"&gt;IP&lt;/span&gt; addresses per day, and views per page per day.&lt;/p&gt;
&lt;h3&gt;Alternatives&lt;/h3&gt;
&lt;h4&gt;Google Analytics&lt;/h4&gt;
&lt;p&gt;Google Analytics felt like massive overkill. It has so many data-points that the
useful metrics are harder to focus on. Also, I’d like this site to load quickly
and &lt;span class="caps"&gt;GA&lt;/span&gt; makes it slower.&lt;/p&gt;
&lt;h4&gt;Cloudflare Analytics&lt;/h4&gt;
&lt;p&gt;Then I tried CloudFlare Analytics, which was certainly more light-weight, but
I’m not sure the metrics are accurate. CloudFlare rounds metrics to the nearest
10 and uses a sampling method which for a site with very lite traffic
isn’t a great feature, I think.&lt;/p&gt;
&lt;h3&gt;Design Considerations&lt;/h3&gt;
&lt;p&gt;I know from my work visualizing data and building dashboards that the metrics
presented will alter the users perception of the underlying reality. If I
present a particular metric as if its important, it becomes very difficult for a
regular user of the dashboard to not be influenced by this design, and
implicitly consider the metric as a Key Indicator.&lt;/p&gt;
&lt;p&gt;The way they think about their impact on the business, the value they produce,
or the dynamics of the underlying system (product quality, performance, growth,
etc) would be directly influenced by the design decisions I make like which
metrics are available, and how easy they are to access.&lt;/p&gt;
&lt;p&gt;For this reason, I wanted to see fewer metrics, not more. I also wanted to
arrange them myself. In Google Analytics it can be fun clicking around on all
the things and seeing lots of options, but its not really useful once the
novelty has worn off.&lt;/p&gt;
&lt;p&gt;The only metrics I’m mildly interested in are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How many people are reading my site&lt;/li&gt;
&lt;li&gt;What are they reading&lt;/li&gt;
&lt;li&gt;How much are they reading.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’d like to be able to infer weather I have a few people who read a lot, or a lot of people
who read a little? (Or, as is the case, a few people who read a little.)&lt;/p&gt;
&lt;h2 id="method"&gt;Method&lt;/h2&gt;
&lt;p&gt;Mostly I made my own analytics system because it was a fun challenge with a
nice tangible result. Building it required connecting a few technologies -
Serverless Computing (Cloud Functions on &lt;span class="caps"&gt;GCP&lt;/span&gt;), NoSQL databases (DataStore),
JavaScript, &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers.&lt;/p&gt;
&lt;p&gt;I think that unique &lt;span class="caps"&gt;IP&lt;/span&gt; addresses is a good enough proxy for unique readers, even
though I’m not considering crawlers, bots, or &lt;span class="caps"&gt;RSS&lt;/span&gt; subscribers.&lt;/p&gt;
&lt;p&gt;The analytics “engine” works because each time a page is loaded a JavaScript
snippet sends a request to a Cloud Function on Google Cloud Platform. The
function parses the request to extract the current &lt;span class="caps"&gt;URL&lt;/span&gt; and the &lt;span class="caps"&gt;IP&lt;/span&gt; address. This
is then added to a DataStore database along with the current date and time.&lt;/p&gt;
&lt;p&gt;Viewing the analytics is as simple (and as complicated) as making a request to
the database, parsing the data and visualizing it conveniently. For example,
group the data by days and count the distinct &lt;span class="caps"&gt;IP&lt;/span&gt; Addresses to figure out how
many people are visiting each day.&lt;/p&gt;
&lt;p&gt;It’s not a perfect solution, there are edge cases I’m not considering. But its
mostly right and didn’t take much effort. The hardest part was figuring out
&lt;code&gt;chart.js&lt;/code&gt;, the most frustrating part was iteratively improving the Cloud Functions.&lt;/p&gt;
&lt;p&gt;I haven’t figured out how to easily test the functions locally - it would
require setting up a nosql database and creating flask requests and responses. I
just watched Peaky Blinders for a couple of minutes whilst each new version of
the Cloud Function was deploying.&lt;/p&gt;
&lt;p&gt;Eventually I’ll want to group the metrics by week or month I expect, but it’s
simple enough to edit the code. It’ll be a good way of learning
and playing with cloud technologies and JavaScript.&lt;/p&gt;
&lt;p&gt;Unless someone decides to spam the site, I expect the costs to be less than
€1/month. This site is hosted using CloudFlare, so I suppose I could setup some
page rules to prevent malicious traffic.&lt;/p&gt;
&lt;h2 id="tasks-for-later"&gt;Tasks for later&lt;/h2&gt;
&lt;ul class="checklist"&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt;  Make &lt;code&gt;/analytics.html&lt;/code&gt; load faster - latency is caused by the Cloud Function initialising. Short of paying actual money for always-on resources I can’t see a way to reduce this. However it’s only an issue if you are the first person to view the page in the last ~10 minutes - this &lt;a href="https://mikhail.io/serverless/coldstarts/gcp/"&gt;blog post&lt;/a&gt; explains why.&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt;  Add loading spinners - I used the same snippets as in my &lt;a href="https://johnmathews.eu/portfolio-image-recognition.html"&gt;Machine Vision demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled="" type="checkbox"/&gt;  Group data by weeks or months as well as day&lt;/li&gt;
&lt;li&gt;&lt;input disabled="" type="checkbox"/&gt;  Identify bots and search engines - the analytics requires JavaScript to be running so I think some types of non-human activity is already filtered.&lt;/li&gt;
&lt;li&gt;&lt;input disabled="" type="checkbox"/&gt;  Aggregate the data (once per day) in a Cloud Function instead of repeatedly in the browser.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="questions"&gt;Questions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;I’d be interested to know if there is a way to track &lt;span class="caps"&gt;RSS&lt;/span&gt; subscribers. I know
    that the usual method is to inspect server logs, but this site is hosted on
    GitHub pages so I don’t think this is possible.&lt;/li&gt;
&lt;li&gt;To what extent does requiring JavaScript in order to log a page view filter out bots and crawlers?&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I’ve used the &lt;code&gt;chart.js&lt;/code&gt; library because its reasonably fast and lightweight. My
    preferred library would be &lt;code&gt;Plotly&lt;/code&gt; if it could be responsive and fast even
    if there are &amp;gt;10 charts to render.&lt;/p&gt;
&lt;p&gt;Has &lt;code&gt;plotly.js&lt;/code&gt; improved recently to the point where it wouldn’t cause a browser to lag if multiple plots are being rendered?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/analytics.html"&gt;&lt;strong&gt;Site Analytics&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="Technical/Web"/><category term="cloud-functions"/><category term="data"/></entry><entry><title>Over-Engineering this blog</title><link href="https://johnmathews.eu/over-engineering-this-blog.html" rel="alternate"/><published>2021-04-05T11:54:00+02:00</published><updated>2021-04-05T11:54:00+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-05:/over-engineering-this-blog.html</id><summary type="html"/><content type="html">&lt;p&gt;Over the last few weeks I’ve spent an unreasonable amount of time and energy
making unnecessary improvements to this blog.&lt;/p&gt;
&lt;p&gt;Some of these improvements are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Adding keyboard shortcuts (type &lt;code&gt;?&lt;/code&gt; to find out which).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://johnmathews.eu/adding-search.html"&gt;Implementing&lt;/a&gt;, then
   &lt;a href="https://johnmathews.eu/fuse-search.html"&gt;reimplementing&lt;/a&gt;, and then optimizing client
   side fuzzy search.&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;src-set&lt;/code&gt; to serve responsive images
   (&lt;a href="https://github.com/pelican-plugins/image-process"&gt;Image-Process&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Lazy loading images to make this site load faster.&lt;/li&gt;
&lt;li&gt;Compressing page files using &lt;code&gt;brotli&lt;/code&gt; and also &lt;code&gt;gzip&lt;/code&gt;
   (&lt;a href="https://github.com/kurtmckee/pelican_precompress"&gt;Precompress&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Trying (and ultimately failing) to avoid a “white flash” when dark mode is
   chosen and a new page loads (&lt;a href="https://github.com/tailwindlabs/tailwindcss/discussions/3904"&gt;Github
   discussion&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’m not really sure why I did it. It makes almost no difference to anyone but
me. It felt a bit compulsive.&lt;/p&gt;
&lt;p&gt;I like tinkering, and it’s nice to build something that will continue to work
with no maintenance. I tell myself that over the next few years I will gain the
benefits of these features even when I’ve forgotten I implemented them.&lt;/p&gt;
&lt;p&gt;It’s taught me a lot of JavaScript, which is a great language to be familiar
with - it’s everywhere. I would warmly encourage someone younger than myself to
pursue interests for the sake of curiosity and fun. And there is a very high
chance that even if no-one uses the shortcuts except me, my new javascript
skills will come in useful somewhere else.&lt;/p&gt;
&lt;p&gt;But even if they do I’m not sure its a good enough reason - things should be
built when they solve a present problem, not over-engineered for what-ifs and
maybes. &lt;a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it"&gt;&lt;span class="caps"&gt;YAGNI&lt;/span&gt;&lt;/a&gt;. I
wouldn’t let myself do this in a professional capacity. There is a tension
between being curious and being focussed.&lt;/p&gt;
&lt;p&gt;I’m not really sure that I need to justify myself. Its a hobby, I wanted to do
it, I enjoy tinkering with web technologies and learning new things.&lt;/p&gt;
&lt;p&gt;But also, I lost sleep over this - I stayed up too late, and let it put
pressure on other things.&lt;/p&gt;
&lt;p&gt;I know that being curious, and making room to play with interesting things, has
been one of the most useful approaches to personal development and up-skilling
myself. But there must be a limit..&lt;/p&gt;
&lt;p&gt;There is a tension between wasting my time and taking a risk, and it will take
a few years before I know for sure if these efforts were worthwhile, or not.&lt;/p&gt;
&lt;p&gt;If it’s not fun, don’t do it.&lt;/p&gt;
&lt;p&gt;Successful business owners seem to be very good at leaving things alone once
they’re “good enough”, and not being perfectionists. In fact, I think that
being a perfectionist is antithetical to being an entrepreneur. I am not a
perfectionist, I’m just really curious and have a big appetite for learning.&lt;/p&gt;
&lt;p&gt;But this “appetite for learning” stops me from focussing. I let myself become
distracted by adding new features to this blog, when instead I should zoom out
a bit and think about working towards a more substantial and meaningful goal,
to the exclusion of more minor goals.&lt;/p&gt;
&lt;p&gt;I think that good entrepreneurs are very focussed, to a fault. I am not that
focussed. I am too distracted by life.&lt;/p&gt;
&lt;p&gt;It’s a balancing act, there is a tension between being emotionally and
physically present with my family and friends, and ignoring as many things as
possible so that I can focus on doing something meaningful that is necessarily hard.&lt;/p&gt;</content><category term="Technical/Web"/><category term="blog"/><category term="javascript"/><category term="self-reflection"/></entry><entry><title>Fuse Search</title><link href="https://johnmathews.eu/fuse-search.html" rel="alternate"/><published>2021-04-05T10:45:00+02:00</published><updated>2021-04-05T10:45:00+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-05:/fuse-search.html</id><summary type="html"/><content type="html">&lt;h2 id="adding-search-made-the-site-feel-faster-and-more-accessible"&gt;Adding search made the site feel faster and more accessible&lt;/h2&gt;
&lt;p&gt;I’ve reimplemented search on this site using &lt;a href="https://fusejs.io/"&gt;fuse.js&lt;/a&gt;
instead of &lt;a href="https://github.com/tinysearch/tinysearch"&gt;tinySearch&lt;/a&gt;. You can read
about how I implemented tinysearch &lt;a href="https://johnmathews.eu/adding-search.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When I first implemented search I was surprised how much faster and more accessible
the site began to feel. I could quickly access any content by typing a few
words, I didn’t need to scroll or follow a link.&lt;sup id="sf-fuse-search-1-back"&gt;&lt;a class="simple-footnote" href="#sf-fuse-search-1" title="It also immediately gave me the idea to add keyboard shortcuts. Type ? to see what happened"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;This means I can find content without having to think about how to get there -
I don’t need to break my flow or concentration. It might sound like a
trivially small consideration, but lowering friction or cognitive load in small
ways can make the difference between using or not using something when you’re
already working hard or concentrating on something else. &lt;/p&gt;
&lt;p&gt;For example, if I want to look up my notes about using the &lt;code&gt;nohup&lt;/code&gt; command, I
can quickly go to the site, type &lt;code&gt;/&lt;/code&gt; (the keyboard shortcut for search), type
“nohup” and hit enter. This is all muscle-memory level impulses. I don’t need
to think about the content, think about its category or when I posted it,
then scroll down and scan a list, or use a mouse to click on intermediate links.
Win. Working at the speed of thought rather than the speed of input is a big deal.&lt;/p&gt;
&lt;h2 id="why-i-switched-from-tinysearch-to-fusejs"&gt;Why I switched from tinySearch to Fuse.js&lt;/h2&gt;
&lt;p&gt;Before implementing &lt;code&gt;fuse.js&lt;/code&gt;, this site had a search feature powered by
TinySearch. I wouldn’t have had enough knowledge to implement fuse.js
if I hadn’t already learnt some JavaScript whilst setting-up tinySearch.&lt;/p&gt;
&lt;p&gt;TinySearch had an example for Pelican Blogs, and a simple and clear readme. By using
tinySearch first I saw an example of how to build the &lt;span class="caps"&gt;JSON&lt;/span&gt; array that becomes
the search index, and how to implement the javascript that’s required for
client side search.&lt;/p&gt;
&lt;p&gt;Also, in the course of developing and over-engineering this blog I’ve become
much more proficient and comfortable with JavaScript (and jQuery) in general. &lt;/p&gt;
&lt;p&gt;Fuse.js is really quite simple to set up once you’re familiar with JavaScript.
It’s much more flexible than tinySearch; you  can choose search
weights for different fields, accuracy thresholds, and some parameters for the
fuzzy search algorithm.&lt;/p&gt;
&lt;p&gt;The general approach is to instantiate an instance of &lt;code&gt;Fuse&lt;/code&gt; by calling Fuse
with a &lt;span class="caps"&gt;JSON&lt;/span&gt; array for it to parse, along with some options. You then give the
instance a string and get back an array of results which you can do whatever you
want with.&lt;/p&gt;
&lt;p&gt;The accuracy of the search results is higher with &lt;code&gt;fuse.js&lt;/code&gt; and the speed is
still acceptable. I did have to do some optimization of the search index that
Fuse generates, though.&lt;/p&gt;
&lt;h2 id="optimizing-the-search-index"&gt;Optimizing the search index&lt;/h2&gt;
&lt;p&gt;The “normal” search index that Fuse uses to return results is a &lt;span class="caps"&gt;JSON&lt;/span&gt; array of
all the content of all the articles that you want to be able to search. You can
generate it using a jinja template or any other way you want. (There simply
needs to be a &lt;span class="caps"&gt;JSON&lt;/span&gt; array that the browser downloads and does a fuzzy search
on). This gave me a file that was about &lt;span class="caps"&gt;4MB&lt;/span&gt;. Once I asked Fuse to search the
complete text of each article (not just the default first 600 chars, iirc) then
speed really suffered.&lt;/p&gt;
&lt;p&gt;I optimized the index file in the following three ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Removed any non-words. Some of my articles are jupyter notebooks that have
been converted to articles (the plugin to do this is one of the reasons why I
began using Pelican). When the index is built, lots of code and html gets
included, which isn’t helpful. Any “words” that are more than 20 chars I just delete.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Removed the 150 most common words. Any word that is in many articles is
not useful for distinguishing between different articles, so they can be
deleted from the index. They don’t add any meaning. I wrote a short pipeline of
shell commands using &lt;code&gt;tr&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;uiq&lt;/code&gt; to generate a file with a list of the
most common words. I then wrote a python script to update the original search
index by removing all the common words.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shortened any long words by only keeping the first 12 characters. If a
word was 15 characters long, I simply removed that last 3 chars. I figured this
would work fine because matching the first 12 characters would already be quite
unique and give a good result.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Doing these 3 optimizations reduced the file size by about 90%. Compressing the
&lt;span class="caps"&gt;JSON&lt;/span&gt; using &lt;code&gt;gzip&lt;/code&gt; or &lt;code&gt;brotli&lt;/code&gt; makes the files even smaller, and now the amount
of data transferred to the client seems reasonably small. (This is a static
site, and therefore search has to happen client side.)&lt;/p&gt;
&lt;p&gt;The browser would still begin to lag as the search string length increased. It
takes more time to search for a 10 character string than for a 5 character
string, and initially fuse was doing a search every time a character was typed.&lt;/p&gt;
&lt;p&gt;I wanted the site to feel as fast as possible and thought that if search was
paused whilst typing and occurred a short time after the last key was pressed
this would be an improvement. I added a short delay of 200ms to the function
call, and typing during the delay time resets the time. This reduced the lag
and made the search tool feel responsive. I learnt that this is called “debouncing”.&lt;/p&gt;
&lt;p&gt;There was some further complexity when I wanted to debounce characters used for
searching, but not the navigation or keyboard shortcuts. Getting the
debounce function to only run on some key presses was surprisingly complex. It
taught me a lot of JavaScript though, and it’s satisfying to have made a useful
user interface.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-fuse-search-1"&gt;It also immediately gave
me the idea to add keyboard shortcuts. Type &lt;code&gt;?&lt;/code&gt; to see what happened &lt;a class="simple-footnote-back" href="#sf-fuse-search-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Web"/><category term="Fuse"/><category term="Search"/><category term="Web"/></entry><entry><title>Adding Search</title><link href="https://johnmathews.eu/adding-search.html" rel="alternate"/><published>2021-03-12T17:27:00+01:00</published><updated>2021-03-12T17:27:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-12:/adding-search.html</id><summary type="html"/><content type="html">&lt;p&gt;I’ve added search to this blog. Results are generated as you type. Try it by
typing &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;cmd-k&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you look on the Pelican &lt;a href="https://github.com/pelican-plugins"&gt;plugins&lt;/a&gt; index
you’ll see that &lt;a href="https://github.com/pelican-plugins/tipue-search"&gt;Tipue search&lt;/a&gt;
is the only search tool with a ready-made Pelican plugin, but unfortunately the
project seems to have died and the projects &lt;a href="https://tipue.com/"&gt;website&lt;/a&gt; is
now something else.&lt;/p&gt;
&lt;p&gt;But searching a static site must be quite a common need and googling for
alternatives gave me a few choices. &lt;a href="https://lunrjs.com/"&gt;Lunr.js&lt;/a&gt; seems to be
the most popular, but it also seemed fairly complicated and like it was
probably more than I needed. I went with &lt;a href="https://github.com/tinysearch/tinysearch"&gt;Tiny
Search&lt;/a&gt; because it seemed to do what
I needed and was easy to setup. There’s even an example for
Pelican blogs.&lt;/p&gt;
&lt;p&gt;One hurdle to success was minimising the false positives. The default settings
seem to prioritise keeping the size of the index small (tiny) over giving a
good user experience. Maybe its because the amount of text on my site is
significanly less, or more, than the typical use case. Either way, after
checking the project’s issues on Github I found an issue that matched my
problem perfectly. The solution is to increase the tiny_magic variable at build time.&lt;/p&gt;
&lt;p&gt;According to the Readme, this requires using a container and building the index
using &lt;code&gt;docker run...&lt;/code&gt;. Unfortunately the Dockerfile wouldn’t complete without
errors. Checking the issues again and adding to the discussion resulted in an
alternative Dockerfile being suggested, which works. Woohoo! I could then build
the search index with a massive tiny_magic value (2048).&lt;/p&gt;
&lt;p&gt;Then something weird happened. I write in Vim and I use &lt;code&gt;fzf&lt;/code&gt; to find and open
files. I realised that &lt;code&gt;fzf&lt;/code&gt; had stopped working. After some investigating, I
realised it was only not working in the blog project, and that &lt;code&gt;fzf.vim&lt;/code&gt; calls
the &lt;code&gt;fzf&lt;/code&gt; &lt;span class="caps"&gt;CLI&lt;/span&gt; tool, which in turn calls the &lt;code&gt;ripgrep&lt;/code&gt; tool. The underlying
issue was that &lt;code&gt;ripgrep&lt;/code&gt;  wasn’t working, and after a few hours (sob) of
debugging, I found out that one of the things that makes &lt;code&gt;rg&lt;/code&gt; special is that
it ignores stuff in your .gitignore file. Sneakily, and without me  noticing,
the Docker image for constructing the tinysearch files had created a
.gitignore file with a single entry. The entry was *, which selects
everything. So &lt;code&gt;rg&lt;/code&gt; was ignoring everything, and giving no results. Which
meant I couldn’t find and open files.&lt;/p&gt;
&lt;p&gt;I still don’t know how (or which part of) the Dockerfile does this, so I’ve
created a .gitignore-master file which contains the correct content, and
after I generate a new search index I replace the new traitorous .gitignore
with the contents of .gitignore-master. I’ll come back to it later
when/if I have a better understanding of Dockerfile syntax, or Rust.&lt;/p&gt;
&lt;p&gt;Adding search to the site made the content feel a lot closer and more
accessible. Once it was working I immediately wanted to use some keyboard
shortcuts to open the search box and select results. Kind of like
&lt;a href="https://tailwindcss.com/"&gt;tailwindcss.com&lt;/a&gt; does it. It feels really fast and precise.&lt;/p&gt;
&lt;p&gt;Googling for some jquery packages, and also some vanilla javaScript showed me
enough to get things working. You can hit &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;ctrl-k&lt;/code&gt; or &lt;code&gt;cmd-k&lt;/code&gt; and bring up a search box
that populates results as you type!&lt;/p&gt;
&lt;p&gt;Only whole words are matched unfortunately, but its still a super useful
feature. The search index includes article content as well as article titles
and categories. I’d like to tweak a few of the keyboard shortcut behaviours,
and add the contents of various pages (which aren’t articles) to the search index.&lt;/p&gt;
&lt;h2 id="update"&gt;Update&lt;/h2&gt;
&lt;p&gt;I’ve reimplemented search using &lt;code&gt;fuse.js&lt;/code&gt;. You can read about it &lt;a href="https://johnmathews.eu/fuse-search.html"&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="Technical/Web"/><category term="blog"/><category term="search"/><category term="tinysearch"/><category term="web"/></entry><entry><title>Different Views For Different Users</title><link href="https://johnmathews.eu/different-views-for-different-users.html" rel="alternate"/><published>2021-01-19T10:32:00+01:00</published><updated>2021-01-19T10:32:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-19:/different-views-for-different-users.html</id><summary type="html"/><content type="html">&lt;p&gt;This blog serves a variety of purposes. It’s partly a journal of how I’m
teaching myself to be a developer and a data scientist, and it’s also a
personal blog, with articles about my interests and experiences.&lt;/p&gt;
&lt;p&gt;It’s unlikely that anyone is interested in every type of article, and I’d
like to make it easy for people to only read the content they’re interested in.
Therefore I thought I would separate the articles into two broad groups,
&lt;code&gt;technical&lt;/code&gt; and &lt;code&gt;non-technical&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you visit this blog for the first time by clicking a link to a technical
article, the site will then only show you the technical articles on the blog.
It’s the same for non-technical articles. If you want, you can change these
settings by clicking the paw icon&lt;sup id="sf-different-views-for-different-users-1-back"&gt;&lt;a class="simple-footnote" href="#sf-different-views-for-different-users-1" title="It’s a paw because cat’s have paws and cat is like category. I might change this to something more intuitive in future, like making the icon an N if the user is only seeing non-technical posts, T for technical, and A for all posts."&gt;1&lt;/a&gt;&lt;/sup&gt; in the navbar on the
blog index page.&lt;/p&gt;
&lt;p&gt;I did this mainly because I could. I like playing around with the blog. The &lt;span class="caps"&gt;JAM&lt;/span&gt;
stack feels accessible and its fun working with tailwind and with jQuery.&lt;/p&gt;
&lt;p&gt;I think that playing (being curious, lighthearted, and unhurried and not being
concerned with failure) is really important. Especially for adults who don’t
usually do it much. Most of my successes or big opportunities have been the
result of a process that started with playing around.&lt;/p&gt;
&lt;p&gt;Here is the list of requirements I used when adding the feature:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;:&lt;/p&gt;
&lt;ul class="checklist"&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; If user lands on a page and &lt;span class="caps"&gt;DOESNT&lt;/span&gt; have local setting - create local setting based on type of article being read&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; If user lands lands on a page and &lt;span class="caps"&gt;DOES&lt;/span&gt; have local setting which is contradicted - reset local setting to “all”&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; If user lands on index and &lt;span class="caps"&gt;DOES&lt;/span&gt; have local settings, only show articles that match the setting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Steps&lt;/strong&gt;:&lt;/p&gt;
&lt;ul class="checklist"&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; Index page: check if local storage option exists, print to console the result&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; Index page: make button group&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; Index page: make correct button active on page load by using localstorage&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; Index page: update active button on page click&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; Index page: filter/unfilter articles when button clicked&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; Index page: if local storage does exist, respect it&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; Index page: add 3 stage switch to hamburger menu&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; Index page: make hamburger menu behave intuitively on small screens&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; Index page: if local storage does not exist, pop up a modal asking for a choice&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; Article page: check if local storage option exists, print to console the result&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; Article page: if local storage doesn’t exist, create it according to article type&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; Article page: if local storage does exist and is contradicted, update article type to all&lt;/li&gt;
&lt;/ul&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-different-views-for-different-users-1"&gt;It’s a paw because cat’s have paws and
cat is like category. I might change this to something more intuitive in
future, like making the icon an &lt;code&gt;N&lt;/code&gt; if the user is only seeing non-technical
posts, &lt;code&gt;T&lt;/code&gt; for technical, and &lt;code&gt;A&lt;/code&gt; for all posts. &lt;a class="simple-footnote-back" href="#sf-different-views-for-different-users-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Web"/></entry><entry><title>3 Different Types Of Programming Problems</title><link href="https://johnmathews.eu/different-types-of-problem.html" rel="alternate"/><published>2021-01-18T13:00:00+01:00</published><updated>2021-01-18T13:00:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-18:/different-types-of-problem.html</id><summary type="html"/><content type="html">&lt;h2 id="three-categories-of-problem"&gt;Three categories of problem&lt;/h2&gt;
&lt;p&gt;Last year when I was creating &lt;a href="https://moneybar/nl"&gt;moneybar&lt;/a&gt; and
&lt;a href="https://pippip.email"&gt;pippip&lt;/a&gt; there were a few problems that took much more
effort to solve than all the others.&lt;/p&gt;
&lt;p&gt;I think I could group problems into 3 buckets, based on how much time they take
to solve. &lt;code&gt;Type 1&lt;/code&gt; takes less than 15 minutes to solve, &lt;code&gt;type 2&lt;/code&gt; takes between
15 and 45 minutes to solve, and &lt;code&gt;type 3&lt;/code&gt; takes more than 45 minutes (usualy
&lt;em&gt;much&lt;/em&gt; more).&lt;/p&gt;
&lt;h3&gt;Type 3:&lt;/h3&gt;
&lt;p&gt;When I start learning a hard thing (like web development), almost everything is
in the third bucket and it’s exhausting. You need to set aside big chunks of
time, you need to be focussed and undistracted, calm and wide awake, and you
need to be prepared for a long arduous journey.&lt;/p&gt;
&lt;p&gt;Probably your criteria for success should be “am I dead?” because then if
you’re asking the question you’re guaranteed to be successful and keeping
morale high is necessary for success.&lt;/p&gt;
&lt;h3&gt;Type 2:&lt;/h3&gt;
&lt;p&gt;Hopefully you can make good progress understanding the basics and internalizing
the relevant abstractions, and your problems quickly&lt;sup id="sf-different-types-of-problem-1-back"&gt;&lt;a class="simple-footnote" href="#sf-different-types-of-problem-1" title="on which timescale? Life is long, does it really matter if it takes 1 week or 1 month to learn something meaningful? Momentum, and having fun, is important though."&gt;1&lt;/a&gt;&lt;/sup&gt;
become &lt;code&gt;type 2&lt;/code&gt; problems. They each take from 15 to 45 minutes to solve.&lt;/p&gt;
&lt;p&gt;Maybe this is because you know enough to break some big general problem into
smaller problems (you are developing domain expertise) and your intuitions for
how to solve the problem are becoming better so your first or second attempts are
likely to be correct, rather than your fifth or sixth. &lt;/p&gt;
&lt;p&gt;Knowing how to google a problem so that you get the answer you need is also a
really important skill, which requires intuiting how an English speaking expert
would ask the question. This isn’t trivial but I don’t hear people discussing
this often.&lt;/p&gt;
&lt;p&gt;When most of my coding problems are &lt;code&gt;type 2&lt;/code&gt;, it feels like I’m learning most
efficiently and when I’m most productive&lt;sup id="sf-different-types-of-problem-2-back"&gt;&lt;a class="simple-footnote" href="#sf-different-types-of-problem-2" title="from a personal growth point of view. I suppose from an employers point of view they want all problems solved fast, type 1 problems."&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3&gt;Type 1:&lt;/h3&gt;
&lt;p&gt;After a while, the problems that need to be solved become &lt;code&gt;type 1&lt;/code&gt; problems.
They take less than 15 minutes to solve, because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All the big problems have been solved and now you’ve only got smaller problems left, and&lt;/li&gt;
&lt;li&gt;Your intuitions are good and your expertise has increased and you know where to look for
answers.&lt;sup id="sf-different-types-of-problem-3-back"&gt;&lt;a class="simple-footnote" href="#sf-different-types-of-problem-3" title="Open the right file, google the right query (and follow the link to stack overflow), make some changes, run your static type checker and linter, run your tests, and push. Done and on to the next item."&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="exceptional-problems"&gt;Exceptional problems:&lt;/h2&gt;
&lt;p&gt;But there seems to be a consistent exception to this model.&lt;sup id="sf-different-types-of-problem-4-back"&gt;&lt;a class="simple-footnote" href="#sf-different-types-of-problem-4" title="which is totally fine. It’s just a mental model, and the map is not the territory"&gt;4&lt;/a&gt;&lt;/sup&gt; Let’s
be silly and call them &lt;code&gt;type W&lt;/code&gt; problems. These are the problems that eat up
far too many hours, and are tiring to solve, even when you are (in most other
respects) an expert.&lt;/p&gt;
&lt;p&gt;For me, these tend to relate to blob storage solutions for web apps deployed
into production. I can think of several factors why this is so, and I’ll
describe the specifics before generalising.&lt;/p&gt;
&lt;p&gt;When a web app runs in production, the data is not stored on the web server
because the things that make a web-server cheap and efficient are not the
things that make a database or a file storage bucket cheap and efficient.&lt;/p&gt;
&lt;p&gt;Therefore they are stored somewhere else and you need some plumbing to join
everything together. There are some abstractions involved to make this work
easily and securely. However when developing locally, you are doing everything
on your laptop. You have a web-server, relational database and file system all
in the same place.&lt;/p&gt;
&lt;p&gt;This is a big, fundamental, architectural difference between your development
environment and your production environment. As a general rule, these are
supposed to be as similar as possible.&lt;/p&gt;
&lt;p&gt;These differences make it much easier to make something that works locally but
doesn’t work in production, and it’s very hard to test if a thing will work in
production without deploying it to your staging environment, which you are
likely less familiar with than your local development setup.&lt;/p&gt;
&lt;p&gt;Deploying to staging and debugging on staging is slower and harder than doing
the same thing locally. Logging (and filtering) will likely be more important. &lt;/p&gt;
&lt;h2 id="solving-exceptional-problems"&gt;Solving exceptional problems&lt;/h2&gt;
&lt;p&gt;So how do you solve these problems quickly and efficiently? What is it about
this problem that makes it so hard? Let’s examine what makes the problem
difficult to solve:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Iteration cycles are slow - I can’t test locally, I have to deploy to
     staging and this takes time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The problem occurs in a ‘high friction’ environment - its difficult to dig
     around and figure out what’s really going on when its hidden below 3
     different layers of abstraction, on a remote machine that I have limited
     access to via a web browser. I want to be able to dig and investigate
     quickly and easily using the same tools I use for writing and testing code
     locally. I’ve taken great efforts to set up my local development
     environment so that I can do this, and its stressful to switch to a
     different and more limited set of tools.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The problem is the result of several things interacting at once, and I can’t
     just test things one at a time. These things are probably very similar to
     the abstractions.&lt;/p&gt;
&lt;p&gt;Thinking clearly, learning, buidling, solving problems, all rely on being
 able to separate or untangle a seemingly complex situation into its
 component parts so that you can figure out what causes what. If you can’t
 isolate individual concerns or components, you have a black box that is
 keeping you ignorant.&lt;/p&gt;
&lt;p&gt;In web development, customized logging is usually a good way to being
 isolating and exploring particular components.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Having said all that, I think the best way to solve a problem is to prevent it
from occurring in the first place, but I’m not good enough to figure out how to
do that, yet.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-different-types-of-problem-1"&gt;on which timescale?
Life is long, does it really matter if it takes 1 week or 1 month to learn
something meaningful? Momentum, and having fun, is important though. &lt;a class="simple-footnote-back" href="#sf-different-types-of-problem-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-different-types-of-problem-2"&gt;from a personal growth point of
view. I suppose from an employers point of view they want all problems solved
fast, &lt;code&gt;type 1&lt;/code&gt; problems. &lt;a class="simple-footnote-back" href="#sf-different-types-of-problem-2-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-different-types-of-problem-3"&gt;Open the right file, google the right query (and follow the link to
stack overflow), make some changes, run your static type checker and linter,
run your tests, and push. Done and on to the next item. &lt;a class="simple-footnote-back" href="#sf-different-types-of-problem-3-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-different-types-of-problem-4"&gt;which is totally
fine. It’s just a mental model, and the map is not the territory &lt;a class="simple-footnote-back" href="#sf-different-types-of-problem-4-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Web"/></entry><entry><title>Notes on learning Django</title><link href="https://johnmathews.eu/learning-to-django.html" rel="alternate"/><published>2021-01-14T14:17:00+01:00</published><updated>2021-01-14T14:17:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-14:/learning-to-django.html</id><summary type="html"/><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#in-the-beginning"&gt;In the beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-personal-finances-dashboard"&gt;A personal finances dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#learning-django"&gt;Learning Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-best-moments"&gt;The best moments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="in-the-beginning"&gt;In the beginning&lt;/h2&gt;
&lt;p&gt;I came to web development via business analytics. I was working as an
accountant and Excel wasn’t good enough anymore, so I looked around for a way
to get started and came across &lt;a href="https://johnmathews.eu/Jupyter-ipython-notebooks-pandas.html"&gt;Jupyter
Notebooks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Notebooks are said to be a kind of “gateway drug” to programming, and I think
that’s true. They’re the easiest and fastest way to start programming that I’ve
come across.&lt;/p&gt;
&lt;p&gt;When you’re working in a notebook, its easy to get data, wrangle it, and show
some results. But as soon as you can create a chart or some summary table you
inevitably wonder how you can show this to people more easily, and publishing
the results to a website feels like the best most general and versatile solution.&lt;/p&gt;
&lt;p&gt;Unfortunately it’s also the hardest, and so begins a long series of compromises
and incremental progress. Learn to use a dashboarding &lt;span class="caps"&gt;API&lt;/span&gt;, and learn to create
static sites. But the end-goal, the ultimate solution, is a data driven web
app, with authentication, saved user preferences, scalable performance, and
automatically updated data sources.&lt;/p&gt;
&lt;h2 id="a-personal-finances-dashboard"&gt;A personal finances dashboard&lt;/h2&gt;
&lt;p&gt;When I moved to the Netherlands, I wanted to use a personal finances dashboard
to check weekly expenses. There wasn’t a web-app that would do this (though
there are a couple of apps that are trying) so I built my own dashboard. Then a
few friends asked if they could use it too. They couldn’t because it was just a
dashboard and not a web app, but I thought this was a good reason to jump into
web development.&lt;/p&gt;
&lt;p&gt;It was a much bigger task than I anticipated. (And that’s &lt;span class="caps"&gt;OK&lt;/span&gt;.)&lt;/p&gt;
&lt;p&gt;It took several attempts and was super frustrating, I would dabble for a few
weeks, do a few tutorials, and then get completely lost when I tried to do
something by myself. I’d get disorientated working across many different files
and trying to visualise which part of the Model-View-Controller model, or the
request-response cycle I was currently working on.&lt;/p&gt;
&lt;p&gt;I came to realisea that the mental load seems so large at the beginning because
“web-development” is really a whole stack of technologies and abstractions
combined (or stacked) together. Many of these have to be used together at the
same time before you can see &lt;em&gt;any evidence of success at all&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id="learning-django"&gt;Learning Django&lt;/h2&gt;
&lt;p&gt;I think the hardest things about Django are not actually Django. You’ll need to
comfortable with classes and inheritance. You’ll also need to be comfortable
with working across multiple files, and have some tools for searching across
all you open buffers, or all the files in the project, at the same time. You’ll
also need to be comfortable with version control (Git) and using the command
line. Get familiar with stack traces too.&lt;/p&gt;
&lt;p&gt;If you’re familiar enough with all these things, so that using them doesn’t
feel new, but ideally feels familiar and comfortable, then I think you’ll make
quite quick progress with Django.&lt;/p&gt;
&lt;p&gt;Django uses the Model-View-Controller model. Models are how django maps Python
objects to items in your database (oh yeah, you need to be familiar with &lt;span class="caps"&gt;SQL&lt;/span&gt;
too…), Views are where requests are processed (also Middleware) and turned
into Responses, which are then combined with templates (unless your building an
&lt;span class="caps"&gt;API&lt;/span&gt;). You might notice I haven’t mentioned what a Controller is - get used to
information feeling incomplete whilst you’re learning the ropes. It’ll become
clear soon enough.&lt;/p&gt;
&lt;h2 id="the-best-moments"&gt;The best moments&lt;/h2&gt;
&lt;p&gt;The ‘curse of knowledge’ states that once you’ve learnt something you can’t
imagine or remember what it’s like to not know it. Before that happens
completely, I want to record some of the ‘ahah!’ moments of ‘learning Django’.&lt;/p&gt;
&lt;p&gt;For context, I stopped working as a freelance data scientist in April and after
a few weeks wondering if django and PostgreSQL and python was the way to go
(yes it is. use boring technology), I began working full-time on what would
become &lt;a href="https://moneybar.nl"&gt;MoneyBar.nl&lt;/a&gt;. I called it ‘myeuros’ in the beginning.&lt;/p&gt;
&lt;p&gt;The learning curve felt steep. I wanted to do things “right” the first
time because I wasn’t building a toy, and although I felt that hindsight would
show this to be a mistake in terms of efficiency, I did it anyway because I
have a hunch that following my compulsions sometimes makes life harder in the
short term and better in the long term.&lt;/p&gt;
&lt;p&gt;The best moments are usually preceded by the most frustrating.&lt;/p&gt;
&lt;h3&gt;Adding a unique identifier to an existing authentication model&lt;/h3&gt;
&lt;p&gt;I used pydanny’s &lt;code&gt;cookiecutter-django&lt;/code&gt; template. Honestly, by the time I’d gone
through the quickstart process and googled the nouns in all the questions (what
is &lt;code&gt;Sentry&lt;/code&gt;, what is &lt;code&gt;Celery&lt;/code&gt; and what is a &lt;code&gt;task que&lt;/code&gt;, what is &lt;code&gt;whitenoise&lt;/code&gt;,
etc.) I was already tired. Play with it a few times and come back to it.&lt;/p&gt;
&lt;p&gt;Anyway, I wanted to start with authentication, because the project template has
that part kind of up and rnuning for you out of the box. &lt;code&gt;cookiecutter-django&lt;/code&gt;
uses the &lt;code&gt;Django Allauth&lt;/code&gt; package, which is awesome, and reliable, and fully
featured… and extremely abstracted. Good luck looking at the module code and
understanding it if youre not an expert.&lt;/p&gt;
&lt;p&gt;I wanted to give each user a unique &lt;span class="caps"&gt;ID&lt;/span&gt; - a &lt;code&gt;UUID&lt;/code&gt; when they signed up. This
would be used in query strings instead of usernames or incremental keys. This
was so hard the first time! And it turns out its not a trivial task, not if you
already have a few users in your (test) database. Sure you can reset the
database and start again, but experimenting like this is fairly complex.
Understanding how the python model classes (the &lt;span class="caps"&gt;ORM&lt;/span&gt;) maps to the relations in
the PostgreSQL databse was complex, and if I got confused, should I try to fix
it by changing python Models, or editing migrations, or working on the database
directly? Getting started is one of the hardest things.&lt;/p&gt;
&lt;p&gt;After I’d figured out authentication, I started creating models for other
simpler data (transactions and bank accounts I expect). This was much simpler
and faster. I remember driving home one evening thinking that if I could get
this far then success was inevitable.&lt;/p&gt;
&lt;h3&gt;Testing code&lt;/h3&gt;
&lt;p&gt;Before long, testing each part of the app by hand when I added or changed a
feature was no longer trivial. I needed to find some way of automatically
creating users and checking that they could log in and access views.&lt;/p&gt;
&lt;p&gt;I began working with &lt;code&gt;pytest&lt;/code&gt;, and really found it hard to wrap my head around
the idea accessing different parts of the app not by requests and responses but
by accessing class methods directly.&lt;/p&gt;
&lt;p&gt;I think its normal and good to code at the limit of your knowledge, where you
know just enough to make a thing “work”. But this approach falters when you
want to then test what you wrote. Or at least, the measure of “just enough”
really changes when you require tests to be written. You don’t just need to
make it work, you need to understand why it works, so that you can write tests
to assert that certain conditions pass and others fail.&lt;/p&gt;
&lt;p&gt;This feels really satisfying when it works, because you have proof that you
really have grasped a bigger picture. There are far fewer (relevant) black
boxes when you write tests. But it also makes learning slower, at least in the
short term. It means you might have two get comfortable with a handful of
abstractions, when you’ve already solved the problem you started with. This is
frustrating, and it takes discipline to slow down, take a deeper look at the
solution, and not just race on to the next feature.&lt;/p&gt;</content><category term="Technical/Web"/></entry><entry><title>Optimizing The Performance Of This Blog</title><link href="https://johnmathews.eu/site-performance.html" rel="alternate"/><published>2021-01-04T16:05:00+01:00</published><updated>2021-01-04T16:05:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-04:/site-performance.html</id><summary type="html"/><content type="html">&lt;p&gt;I’m coming to the end of redesigning this site. Now that the main changes have been
made its fun (and good practice) to optimize the site so that it loads quickly and
is optimized for &lt;span class="caps"&gt;SEO&lt;/span&gt; and accessibility.&lt;/p&gt;
&lt;p&gt;Lighthouse is a utility built into Chrome that runs a technical audit on a
webpage and assesses a wide range of features. It also provides details about how to improve the page.&lt;/p&gt;
&lt;p&gt;My site is hosted on Github Pages and is accessed via Cloudflare, which gives me a lot of performance
gains including minified &lt;span class="caps"&gt;HTML&lt;/span&gt; and &lt;span class="caps"&gt;CSS&lt;/span&gt;, caching, and super fast server response times. &lt;/p&gt;
&lt;p&gt;I’m using Github Pages and Cloudflare for free and I think its
amazing that I can get the benefits of these services without needed to pay
anything. If someone knows where to look and can teach themselves using free
resources, they could be read by anyone anywhere in the world. It’s amazing.&lt;/p&gt;
&lt;p&gt;Below are the lighthouse results for the blog’s index page and for a recent post.&lt;/p&gt;
&lt;p&gt;&lt;img alt="lighthouse score for index page" src="https://johnmathews.eu/images/lighthouse_index_page.png"/&gt;
&lt;img alt="lighthouse score for a blog article" src="https://johnmathews.eu/images/lighthouse_article_page.png"/&gt;&lt;/p&gt;</content><category term="Technical/Web"/></entry><entry><title>A New Blog Design</title><link href="https://johnmathews.eu/a-new-blog-design.html" rel="alternate"/><published>2020-12-18T14:37:00+01:00</published><updated>2020-12-18T14:37:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2020-12-18:/a-new-blog-design.html</id><summary type="html"/><content type="html">&lt;p&gt;The blog has a new design! Out with the old, and in with well-written &lt;span class="caps"&gt;HTML&lt;/span&gt;, an
improved &lt;span class="caps"&gt;CSS&lt;/span&gt; framework, maintainable code, dark mode, and articles with multiple categories.&lt;/p&gt;
&lt;p&gt;This website was my first ever project using &lt;span class="caps"&gt;HTML&lt;/span&gt; and &lt;span class="caps"&gt;CSS&lt;/span&gt;, and the codebase for
the original blog was terrible. It was poorly written and hard to maintain. I
remember when I was first building it and trying to figure out what a &lt;code&gt;&lt;div&gt;&lt;/div&gt;&lt;/code&gt; or
a &lt;code&gt;&lt;span&gt;&lt;/span&gt;&lt;/code&gt; really was.&lt;/p&gt;
&lt;p&gt;At times I felt like little more than a monkey randomly bashing keys, hitting
save and refreshing the browser tab. I felt guilty for spending any
non-essential time away from my wife and daughter. I wondered if any benefits
would actually materialize that would outweigh the costs of not rushing home to
take care of a new-born and relieve a tired and stressed mum.&lt;/p&gt;
&lt;p&gt;It took awhile, but eventually this blog became the most effective force
multiplier I’ve ever used.&lt;/p&gt;
&lt;p&gt;As I’ve learnt more about web development, the &lt;span class="caps"&gt;JAM&lt;/span&gt; stack has become increasingly
intuitive and familiar. A side effect was that as I became comfortable with
“good” dev work, working with this blog’s old code base became increasingly
uncomfortable. I wanted to update the blog so that it would be easy and fun to
use again. I want to be able to play with it quickly and efficiently.&lt;/p&gt;
&lt;p&gt;I wasn’t aiming for a radical re-design, I like that the focus is on text and
I’m not exploring any on-trend design choices. I think my original design
choices have held up well. I want a design that will work for many years, with
templates and code that is easy and intuitive to read, and design elements that
are easier to work with.&lt;/p&gt;
&lt;p&gt;I hope that I’ll be writing here more regularly over the next few months. It’s
been a busy year and there is lots to write about!&lt;/p&gt;</content><category term="Technical/Web"/></entry><entry><title>Blogging with Pelican: Design, Plugins, Sharing</title><link href="https://johnmathews.eu/pelican2.html" rel="alternate"/><published>2017-06-01T18:00:00+02:00</published><updated>2017-06-01T18:00:00+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2017-06-01:/pelican2.html</id><summary type="html">&lt;p&gt;My site is optimised for speed and clarity. I&amp;rsquo;ve added share buttons using a plugin which I modified and improved, and added meta tags to control how Twitter and Facebook show my articles in&amp;nbsp;feeds.&lt;/p&gt;</summary><content type="html">&lt;h2 id="design"&gt;Design&lt;/h2&gt;
&lt;p&gt;My approach to building my blog is to keep it as simple as possible, only adding features when they make a significant improvement to how the content is understood and used. Therefore I’ve done away with several features that would normally come baked into a WordPress theme. For example a footer full of links that would never be used, and a sidebar full of distractions. &lt;/p&gt;
&lt;p&gt;I opted for a single column design that hopefully presents text-heavy articles clearly and intuitively (please leave a comment and tell me what you think).&lt;/p&gt;
&lt;h2 id="plugins"&gt;Plugins&lt;/h2&gt;
&lt;p&gt;My use of plugins to extend Pelican’s functionality reflects this, there is the &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/neighbors"&gt;Neighbors&lt;/a&gt; plugin so that the next or previous post can be accessed from the bottom of a post without going back to the index, and the &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/tag_cloud"&gt;Tag Cloud&lt;/a&gt; plugin to reflect which subjects are written about the most (and provide a link to all relevant articles).&lt;/p&gt;
&lt;h2 id="speed"&gt;Speed&lt;/h2&gt;
&lt;p&gt;The speed of the site is important because a faster site is more enjoyable to use. Therefore I’ve minified the &lt;span class="caps"&gt;CSS&lt;/span&gt; and the JavaScript using the &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/assets"&gt;Assets&lt;/a&gt; plugin. I’ve also set the &lt;span class="caps"&gt;CSS&lt;/span&gt; and JavaScript to load asynchronously. Images are optimised using the &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/optimize_images"&gt;Optimize Images&lt;/a&gt; plugin so that their file size is as small as possible and they download quickly. The site uses CloudFlare’s free &lt;span class="caps"&gt;CDN&lt;/span&gt; features so hopefully no matter when you view the site from you get a decent page speed.&lt;/p&gt;
&lt;h2 id="jinja-templates"&gt;Jinja templates&lt;/h2&gt;
&lt;p&gt;I’ve also arranged the homepage so that posts are shown by their category and then by posting date. This may not work very well with a larger number of posts, but I’ll only consider that problem once it presents itself. Designing for hypotheticals or conditions that don’t yet exist is a waste of time. &lt;/p&gt;
&lt;p&gt;There are examples of how I’ve used Jinja templates below in the context of sharing my articles on Twitter and Facebook.&lt;/p&gt;
&lt;h2 id="plugin-share-post"&gt;Plugin: Share Post&lt;/h2&gt;
&lt;p&gt;I noticed that my posts were beginning to get tweeted about, so I thought it would be useful to have some sharing buttons at the bottom of each post for Twitter, Facebook and Email. Looking at the Pelican Plugins repo on Github showed there was (as usual) a plugin for this (called &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/share_post"&gt;Share Post&lt;/a&gt;), though I noted it hadn’t been updated for a couple of years.&lt;/p&gt;
&lt;p&gt;Installing and initial set-up was simple thanks to the readme on the git repo. You need to copy the plugin folder to the plugins directory, and add the name of the plugin to the list in pelicanconf.py. Then you need to copy paste some Jinja/&lt;span class="caps"&gt;HTML&lt;/span&gt; into the article.html template. That’s enough to make it work.&lt;/p&gt;
&lt;p&gt;I noted though that when I shared to Twitter the text to be tweeted was encapsulated in quotes and there was a ‘b’ at the front. I realised this was due to using Python 3.x when the plugin (which hadn’t been updated for 2 years) was likely written for Python 2.x. A quick google and the obligatory trip to &lt;span class="caps"&gt;SO&lt;/span&gt; showed me how to convert a bytes string to a normal text string. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Python 2&lt;/span&gt;
&lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%s%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Python 3&lt;/span&gt;
&lt;span class="n"&gt;tweet_as_byte&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%s%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet_as_byte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I also found that an article couldn’t be shared to twitter from a mobile device and this was due to the &lt;span class="caps"&gt;URL&lt;/span&gt; being incorrectly formatted. The new &lt;span class="caps"&gt;URL&lt;/span&gt; format required separate arguments for the &lt;span class="caps"&gt;URL&lt;/span&gt;, additional text and the twitter handle:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Incorrect&lt;/span&gt;
&lt;span class="n"&gt;twitter_link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'http://twitter.com/home?status=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;

&lt;span class="c1"&gt;# Correnct&lt;/span&gt;
&lt;span class="n"&gt;twitter_link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'http://twitter.com/share?url=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;text=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;via=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t_handle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="using-meta-data-to-specify-tweet-text"&gt;Using meta-data to specify tweet text&lt;/h2&gt;
&lt;p&gt;I thought it would be cool to add some default text to a tweet, as I’ve enjoyed this feature on other blogs when I’ve found a post I wanted to share on Twitter. - A user may know they want to share an article but if they’re in a hurry it might be hard to find the right words, so why not provide a ready-made tweet. The text is editable so it’s only a suggestion.&lt;/p&gt;
&lt;p&gt;The text would be different for each post so it makes sense to specify it when writing the article. The article ‘summary’ would be too long, and I know that Pelican supports arbitrary meta-data tags. I assumed that Jinja would pick up the data the same way it picks up the ‘standard’ meta-data and added a function to share_post.py.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;article_tweet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'tweet'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'html.parser'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once this function was working it was simply a case of calling the function and assigning the output to a variable I called “Tweet”, and then adding “Tweet” to the text string to be included in a tweets text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;article_tweet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tweet_as_byte&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet_as_byte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;t_handle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There was a bit of fiddling around to make sure that the number of spaces between each part of the tweet was correct, but nothing as complicated as when making &lt;a href="https://johnmathews.eu/time-until.html"&gt;Time Until&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="specifying-the-text-and-image-in-a-facebook-share"&gt;Specifying the text and image in a Facebook share&lt;/h2&gt;
&lt;p&gt;Sharing to Facebook worked without any formatting problems, but it bugged me that the opening text of the article was being used in the preview that was shared to Facebook when I had a summary already prepared and that would be much more useful to potential readers. For some articles I also had an article image that I wanted to see being used. &lt;/p&gt;
&lt;p&gt;Googling revealed that I needed to use particular meta tags in the webpage’s header if I wanted to control what Facebook would pickup. Facebook uses the “open graph” standards so I would need the headers in my article pages to include the following: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;`&lt;span class="c"&gt;&lt;!-- Open Graph data --&gt;&lt;/span&gt;`
`&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Title Here"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;`
`&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:type"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"article"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;`
`&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:url"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://www.example.com/"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;`
`&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:image"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://example.com/image.jpg"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;`
`&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Description Here"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I could see that I already had some meta tags being generated using the Jinja templates so I set about copy-pasting and modifying them to build the new tags. I had some issues with trailing white space or line breaks being included within the content string. This was solved like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;{# Adding '-' after and before the %'s strips white space and line breaks #}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;description&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;article.summary&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.summary&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;striptags&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;truncate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="o"&gt;)|&lt;/span&gt;&lt;span class="nf"&gt;e&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;else&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.content&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;striptags&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;truncate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="o"&gt;)|&lt;/span&gt;&lt;span class="nf"&gt;e&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;endif&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;description&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I also needed to use some blocks more than once, because a description tag was already included but Facebook wants an “og:description”, and Twitter wants a “Twitter:Description” too. All three of these tags will include the same text (generated in the Jinja2 snippet above). If a block only needs to be used once then it’s generated like this; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;meta content="&amp;lt;/span&amp;gt;&amp;lt;span class=" cp"="" name="description"/&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;description&lt;/span&gt; &lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;description&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;"&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But If you call “{% block description %}{% endblock description %}” again Jinja will throw you an error. The documentation (and &lt;span class="caps"&gt;SO&lt;/span&gt;) reveal that the solution is to use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;meta content="&amp;lt;/span&amp;gt;&amp;lt;span class=" cp"="" property="og:description"/&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;self.description&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;"&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This allows you to reuse blocks multiple times and keep your templates tidy.&lt;/p&gt;
&lt;p&gt;Finally, when I was testing Facebook to see if the correct text or image was being picked up I was initially frustrated to see that the new tags were not having any effect. This is because Facebook crawls your site and saves what it finds. If you want it to take a fresh look at your page with its new meta tags, you need to tell Facebook to crawl the page again, using the &lt;a href="https://developers.facebook.com/tools/debug/"&gt;Facebook linter/debugger&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;You can see the new sharing buttons below, please click them and see what happens!&lt;/p&gt;
&lt;p&gt;Note: My first article describing how I began to use Pelican is &lt;a href="https://johnmathews.eu/pelican.html"&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="Technical/Web"/><category term="Pelican"/><category term="Jinja"/><category term="Python"/><category term="Twitter"/><category term="Facebook"/><category term="Blog"/><category term="Static Site"/></entry><entry><title>Blogging with Pelican</title><link href="https://johnmathews.eu/pelican.html" rel="alternate"/><published>2017-04-28T01:21:00+02:00</published><updated>2017-04-28T01:21:00+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2017-04-28:/pelican.html</id><summary type="html">&lt;p&gt;I switched to Pelican from Wordpress so that I could design the blog I wanted. Creating a blog in Pelican is a great way to learn &lt;span class="caps"&gt;HTML&lt;/span&gt;, &lt;span class="caps"&gt;CSS&lt;/span&gt;, Jinja templates and&amp;nbsp;Git.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I began blogging in 2016, I became more aware of how blogs are designed. Many of my favorting blogs had simple designs which made it easier to focus on the content, and they loaded really fast. (E.g.  &lt;a href="https://unwiredcouch.com"&gt;unwiredcouch.com&lt;/a&gt; and &lt;a href="https://www.curiousgnu.com"&gt;CuriousGnu&lt;/a&gt;). I wanted this for my blog, too. I’d used Wordpress to build and publish my blog which was a great way to begin, but I felt I was compromising on its design and functionality. I wanted to have control over my blog’s features.&lt;/p&gt;
&lt;p&gt;This led me to static sites which contain only fixed content and are faster to load and easier to design than one built using a dynamic blogging platform such as Wordpress. Because I was already familiar with Python I chose &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; rather than another static site generator such as Jekyll.&lt;/p&gt;
&lt;p&gt;There are plenty of sites to tell you how to start blogging in Pelican, so here I will focus on my experience after the initial set-up. When I was learning how to begin, I found &lt;a href="http://mathamy.com/migrating-to-github-pages-using-pelican.html"&gt;Amy Hanlons&lt;/a&gt; blog particularly useful and clear.&lt;/p&gt;
&lt;h2 id="the-learning-curve"&gt;The learning curve&lt;/h2&gt;
&lt;p&gt;… was longer than I expected. Since setting out to switch from Wordpress to Pelican, I’ve taught myself enough of the following tools to hack this site together. I’m really happy about this because these tools could be used in future projects too.&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;I find &lt;span class="caps"&gt;HTML&lt;/span&gt; quirky but intuitive. Tags make sense, comments are laborious and learning by google is relatively quick. Whatever it is I’m trying to do (like add a link to jump back to the top of the page) someone will have posted the answer somewhere.&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;CSS&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Writing &lt;span class="caps"&gt;CSS&lt;/span&gt; feels a lot more concise that &lt;span class="caps"&gt;HTML&lt;/span&gt; but it also felt impossible to learn without taking a step back and reading an introductory course. Usually I learn by hacking new phrases together from existing examples so it was frustrating to go backwards before progressing. There was a lightbulb moment when I realised &lt;span class="caps"&gt;CSS&lt;/span&gt; Selectors were a thing, and realising &lt;span class="caps"&gt;CSS&lt;/span&gt; files get called in the header (usually) of an &lt;span class="caps"&gt;HTML&lt;/span&gt; file…&lt;/p&gt;
&lt;p&gt;I ended up using a trial subscription to &lt;a href="https://www.thinkful.com/bootcamp/web-development/"&gt;Thinkfuls&lt;/a&gt; Front-end developer course, which is pretty good at explaining how &lt;span class="caps"&gt;CSS&lt;/span&gt; is structured and how to arrange content on a page. If I still had access, I’d be completing the second half of the course :)&lt;/p&gt;
&lt;h3&gt;Jinja templates&lt;/h3&gt;
&lt;p&gt;Jinja is a tool written in Python to create &lt;span class="caps"&gt;HTML&lt;/span&gt; pages. It doesn’t look intuitive to me, but I’ve been able to get enough done by copy-pasting similar snippets from other parts of the theme I started with (&lt;a href="https://github.com/molivier/nest"&gt;Thanks Molivier!&lt;/a&gt;) to make the changes I wanted. I’d like to learn more as it seems really powerful.&lt;/p&gt;
&lt;h3&gt;Pelican&lt;/h3&gt;
&lt;p&gt;To build a website using Pelican, you need to run commands from the terminal. There are various commands but I found myself using only a few regularly. “Pelican-quickstart” will generate a project skeleton to get you started. “make devserver” will initialise a local server and generate output files so that I can view changes locally before uploading (its opposite is “make stopserver”). Finally “pelican content -s publishconf.py” generates the html and css for remote hosting. Some of the plugins I use such as “Assets” which minifies the &lt;span class="caps"&gt;CSS&lt;/span&gt; only work when publshconf.py is called, which confused me initially as I didn’t think it was working when I was only using “make devserver”.&lt;/p&gt;
&lt;h3&gt;Git&lt;/h3&gt;
&lt;p&gt;This really challenged me, and I still don’t feel like I know what I’m doing. Git is far more powerful than I need it to be, when all I want to do is undo some erroneous edits and upload a new version of the site to Github.&lt;/p&gt;
&lt;p&gt;I can stage and commit files, I can create local and remote repo’s from the command line. I can change a remote’s &lt;span class="caps"&gt;URL&lt;/span&gt;, reset a repo and force a push or a pull. That’s all. I haven’t tried to merge or to create a test branch, and if some part of the process goes wrong it usually takes hours to make it right again.&lt;/p&gt;
&lt;p&gt;This is one tool for which the awesome &lt;span class="caps"&gt;SO&lt;/span&gt; and Google cannot magic up the exact right answer immediatly, unfortunately.&lt;/p&gt;
&lt;p&gt;For example, there is still an output folder in the source repo that is… mysterious to me. Its not the real output, its a version frozen in time from a few weeks ago, and it has an “@” in its name. I don’t know how it got there. It was created one afternoon in a blur of frustrated google queries and copy/paste/hope terminal commands.&lt;/p&gt;
&lt;p&gt;I find git’s commands the least intuitive of all the tools I use, with its preceeding single dashes and double dashes, and random words thrown into the middle of otherwise reasonable commands.&lt;/p&gt;
&lt;p&gt;But Git is ubiquitous and Github is awesome, so I will learn it.&lt;/p&gt;
&lt;h2 id="github-pages-with-an-external-url"&gt;Github pages with an external &lt;span class="caps"&gt;URL&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;You’ll need to add a file called &lt;span class="caps"&gt;CNAME&lt;/span&gt; to the repo containing the output. &lt;span class="caps"&gt;CNAME&lt;/span&gt; should contain the address of your site in lowercase. Simple.&lt;/p&gt;
&lt;p&gt;You’ll also need to update the &lt;span class="caps"&gt;DNS&lt;/span&gt; records of your domain name to point the name at Github’s servers. For Github, you need two “A Records” with host type “@” and values “192.30.252.153” and “192.30.252.154” respectively. You also need a &lt;span class="caps"&gt;CNAME&lt;/span&gt; record with host type “www” and the value equal to “username.github.io”. It took about 12 hours for the changes to propagate, and during that time I had variable success loading the site.&lt;/p&gt;
&lt;h2 id="plugins"&gt;Plugins&lt;/h2&gt;
&lt;p&gt;One thing I didn’t want when moving away from Wordpress was a site bloated with features that didn’t make the content easier to read. However I found I still needed a few plugins to optimise my site and provide some basic functionality that doesn’t come with the vanilla Pelican.&lt;/p&gt;
&lt;h3&gt;iPython notebooks&lt;/h3&gt;
&lt;p&gt;Super useful, as all I need to do to publish a notebook as a webpage is copy the .ipynb file into the context directory and add a sidecar .ipynb-meta file with standard meta data. This functionality is one of the main reasons why Pelican is popular with data bloggers. (Though &lt;a href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; is another option).&lt;/p&gt;
&lt;h3&gt;Neighbors&lt;/h3&gt;
&lt;p&gt;At the end of a post there should be a link to the previous and next blog posts - I was surprised this wasn’t included as standard. After putting the plugin in the plugins folder and updating pelicanconf.py, you need to copy a couple of jinja snippets into a template, and maybe add some css to make the links look nice.&lt;/p&gt;
&lt;h3&gt;Optimise images&lt;/h3&gt;
&lt;p&gt;Make those images as small as possible to help make the site as fast as possible. Add the plugin, update pelicanconf.py, and thats all.&lt;/p&gt;
&lt;h3&gt;Assets&lt;/h3&gt;
&lt;p&gt;Before I started working with Pelican, minifying css and JavaScript would have been too advanced. But once &lt;a href="https://tools.pingdom.com/"&gt;Pingdom&lt;/a&gt; and Google &lt;a href="https://developers.google.com/speed/pagespeed/insights/"&gt;Pagespeed&lt;/a&gt; started criticising me for my multiple .css files, I accepted the challenge.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I’m super happy wth the websites design and speed. It’s designed the way I want it, and I’ve learnt a ton of useful stuff along the way.&lt;/p&gt;
&lt;p&gt;Update: My second post about blogging in Pelican is &lt;a href="https://johnmathews.eu/pelican2.html"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="Technical/Web"/><category term="Pelican"/><category term="Blog"/><category term="Python"/><category term="Static Site"/></entry><entry><title>Übersicht widget: Time Until</title><link href="https://johnmathews.eu/time-until.html" rel="alternate"/><published>2016-08-07T11:40:00+02:00</published><updated>2016-08-07T11:40:00+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2016-08-07:/time-until.html</id><summary type="html"/><content type="html">&lt;p&gt;In a &lt;a href="https://johnmathews.eu/ubersicht-widget-time-since.html"&gt;previous post&lt;/a&gt; I described how I was introduced to CoffeeScript via &lt;a href="http://tracesof.net/uebersicht/"&gt;Übersicht&lt;/a&gt;, the desktop widget app for &lt;span class="caps"&gt;OS&lt;/span&gt; X, and eventually published the “&lt;a href="http://tracesof.net/uebersicht-widgets/#time_since"&gt;Time Since&lt;/a&gt;” widget.&lt;/p&gt;
&lt;p&gt;Seeing a few people download the widget was really satisfying, and I was soon wondering what else I could publish. As a pragmatic engineer, it seemed clear to me what the next widget should do: If my first widget calculated the time since an event, the next should calculate the time until an event. I set out to create the companion to “Time Since” and
improve upon the underlying code.&lt;/p&gt;
&lt;p&gt;My first code design choice was to cut out the use of an Apple Script and calculated everything in one CoffeeScript file. It would be more efficient and easier to read.&lt;/p&gt;
&lt;p&gt;Unfortunately I soon began to realise why the original widget I’d based “Time Since” on had used AppleScript to calculate the time elapsed. Date-Times are fiddly to work with in many languages, and this is true in JavaScript also.&lt;/p&gt;
&lt;p&gt;My code began to look increasingly like spaghetti as I tried to achieve 6 key features:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Calculate the number of months and days between two dates
    (complicated by the varying number of days in different months)&lt;/li&gt;
&lt;li&gt;Add the option to specify the level of detail in the output text (to
    the minute, to the hour, to the day, etc.)&lt;/li&gt;
&lt;li&gt;Remove any 0 amounts from the output (“2 Months and 5 Hours” not “2
    Months, 0 Days and 5 Hours”)&lt;/li&gt;
&lt;li&gt;Add the option to abbreviate times (‘years’ → ‘y’, ‘hours’ → ‘h’,
    ‘and’ → ‘&amp;amp;’, etc.)&lt;/li&gt;
&lt;li&gt;Output a grammatically correct sentence (correct pluralisation and
    comma separated terms, with an “and” between the last two terms)&lt;/li&gt;
&lt;li&gt;Prepend and append users defined strings&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After a few frustrating hours, it was clear that it would be a lot easier to modify the existing AppleScript rather than reinvent the wheel in JavaScript. I decided to use it instead of using only JavaScript as I knew the AppleScript file could correctly consider the number of days in
the months between the 2 dates (feature 1), and it contains a function to pluralise the correct parts of the string (feature 5).&lt;/p&gt;
&lt;p&gt;The remaining features were added by using a combination of if statements and arrays. The if statements simply ask if an amount is equal to zero. If not, then it’s appended to an array of terms to include in the output. At the end of this code chunk it’s possible to ask how many non-zero terms to include in the output. An array with length one less than the number of output terms is created and filled with commas with an ‘and’ in the final position.&lt;/p&gt;
&lt;p&gt;The two arrays are combined in the correct order by looping through the index of the longer array and appending each term to a final array. The final array is the output.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span class="quo"&gt;‘&lt;/span&gt;&lt;a href="http://tracesof.net/uebersicht-widgets/#time_until"&gt;Time Until&lt;/a&gt;‘&lt;/em&gt; can be downloaded from the &lt;a href="http://tracesof.net/uebersicht/"&gt;Übersicht&lt;/a&gt; &lt;a href="http://tracesof.net/uebersicht-widgets/"&gt;widgets gallery&lt;/a&gt;. I think another useful feature would be an option to specify the output only in terms of a chosen amount, such as weeks or days. Maybe I’ll do that in the future.&lt;/p&gt;</content><category term="Technical/Web"/><category term="AppleScript"/><category term="CoffeeScript"/><category term="JavaScript"/><category term="Time Until"/><category term="Übersicht"/><category term="Widgets"/></entry><entry><title>Übersicht widget: Time Since</title><link href="https://johnmathews.eu/ubersicht-widget-time-since.html" rel="alternate"/><published>2016-07-30T13:29:00+02:00</published><updated>2016-07-30T13:29:00+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2016-07-30:/ubersicht-widget-time-since.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;a href="http://tracesof.net/uebersicht/"&gt;Übersicht&lt;/a&gt; is a desktop widgets app for &lt;span class="caps"&gt;OS&lt;/span&gt; X. Its free, open source, and has a pretty good widgets library
to download and play with. A widget is a small app or feature that
embeds into the desktop and displays some simple information. It can
tell you what song is currently playing, a weather forecast, disk space
remaining, etc. The widgets are written in CoffeeScript, which is a
variant of JavaScript.&lt;/p&gt;
&lt;p&gt;When I started using Übersicht I began playing with the widgets,
changing their appearance and their position on the screen. Some of the
widgets are too complicated to mess with without specific programming
knowledge, but others are surprisingly simple and intuitive.&lt;/p&gt;
&lt;p&gt;By trial and error, I began to customize widgets to my preferences. One
widget I wanted to have but couldn’t simply download was a timer to tell
me exactly how much time had elapsed since a specific past event.&lt;/p&gt;
&lt;p&gt;By combining the display attributes of one widget and the calculation
method of another, I was able to mash together a foundation for a new
widget. I then added some extra features including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Optional text before and after the elapsed time&lt;/li&gt;
&lt;li&gt;Choice of expanded or abbreviated display styles&lt;/li&gt;
&lt;li&gt;Flexible formatting to remove and zero amounts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The widget is called &lt;a href="http://tracesof.net/uebersicht-widgets/#time_since"&gt;“Time Since”&lt;/a&gt; and is in
the Übersicht &lt;a href="http://tracesof.net/uebersicht-widgets/"&gt;widgets gallery&lt;/a&gt;.&lt;/p&gt;</content><category term="Technical/Web"/><category term="CoffeeScript"/><category term="JavaScript"/><category term="Time Since"/><category term="Übersicht"/><category term="Widgets"/><category term="AppleScript"/><category term="Time Until"/></entry></feed>