<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>John Mathews - Technical/Engineering</title><link href="https://johnmathews.eu/" rel="alternate"/><link href="https://johnmathews.eu/feeds/technical/engineering.atom.xml" rel="self"/><id>https://johnmathews.eu/</id><updated>2021-06-15T11:18:37+02:00</updated><entry><title>Design Patterns</title><link href="https://johnmathews.eu/design-patterns.html" rel="alternate"/><published>2021-06-15T11:18:37+02:00</published><updated>2021-06-15T11:18:37+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-06-15:/design-patterns.html</id><summary type="html"/><content type="html">&lt;p&gt;Design patterns are generalized abstractions that solve common problems and help
engineers create complex code reliably and quickly. I first heard about design
patterns from Aaron Maxwell in his &lt;a href="https://powerfulpython.com/"&gt;Powerful
Python&lt;/a&gt; newsletter, and made some
&lt;a href="https://johnmathews.eu/python-notes.html"&gt;notes&lt;/a&gt; in an earlier article.&lt;/p&gt;
&lt;p&gt;Then the YouTube algorithm put the following video on my front page, and down
the rabbit hole I went.&lt;/p&gt;
&lt;p&gt;Take a look at the Borg design pattern.&lt;/p&gt;
&lt;div class="relative mt-3" style="padding-top: 56.25%"&gt;
&lt;iframe allow="autoplay; encrypted-media" allowfullscreen="" class="absolute inset-0 w-full h-full" frameborder="0" src="https://youtube.com/embed/bsyjSW46TDg"&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;These are some additional resources:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://java-design-patterns.com/"&gt;Java Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sourcemaking.com/design_patterns"&gt;SourceMaking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://python-3-patterns-idioms-test.readthedocs.io/en/latest/PatternConcept.html"&gt;python-3-patterns-idioms-test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/faif/python-patterns"&gt;fair repo&lt;/a&gt; (and my &lt;a href="https://github.com/johnmathews/python-patterns/blob/master/patterns/creational/borg.py"&gt;fork&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Some pdf resources, including the GoF book:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://johnmathews.eu/All the GoF Patterns.pdf"&gt;All the GoF patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://johnmathews.eu/GoF_Design_Patterns_Reference0100.pdf"&gt;GoF_Design_Patterns_Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://johnmathews.eu/c-logica-gof-catalogue.pdf"&gt;c logica GoF catalogue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://johnmathews.eu/DesignPatterns.pdf"&gt;Design-Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://johnmathews.eu/securing GoF design petterns.pdf"&gt;securing GoF design patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Design_Patterns"&gt;Wikipedia&lt;/a&gt; page about GoF book.&lt;/li&gt;
&lt;/ol&gt;</content><category term="Technical/Engineering"/><category term="abstractions"/><category term="meta"/><category term="software-engineering"/></entry><entry><title>Choose Boring Technology</title><link href="https://johnmathews.eu/choose-boring-technology.html" rel="alternate"/><published>2021-06-07T12:24:05+02:00</published><updated>2021-06-07T12:24:05+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-06-07:/choose-boring-technology.html</id><summary type="html"/><content type="html">&lt;p&gt;I’m surprised I haven’t posted this before because the “choose boring tech” article
by Dan McKinley made a big impression when I first read it, about 3 years ago.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://mcfunley.com/choose-boring-technology"&gt;original article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://boringtechnology.club/"&gt;humorous slide show version&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Key takeaways, based on my memory of reading it a couple years ago:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Boring tech is that which is mature enough and that you know well enough that
    you are familiar with its shortcomings, and that will let you build
    something quickly&lt;/li&gt;
&lt;li&gt;You get 3 innovation tokens for each project or stack. Choosing some new and
    exciting bit of tech requires spending 1 of those tokens.&lt;/li&gt;
&lt;li&gt;A nice alternative title for this is “How to be old, for young people”, which
    is really incisive.&lt;/li&gt;
&lt;li&gt;In addition to the advice in the article, I read somewhere else that the
    probability of something continuing to exist in future, and be actively maintained and
    supported, is approximately the amount of time that it has already
    existed, and been supported and maintained. I’m not even sure that makes
    sense, but it bears considering. Source?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This should be on my imaginary list of “things I should read every couple of
years”. Actually, a few lists might be really useful. A list of python articles,
a list of advice articles, etc. It would be similar to the books page, which is just a
list of book articles.&lt;/p&gt;</content><category term="Technical/Engineering"/><category term="advice"/><category term="management"/></entry><entry><title>An incomplete list of skills senior engineers need</title><link href="https://johnmathews.eu/an-incomplete-list-of-skills-senior-engineers-need.html" rel="alternate"/><published>2021-06-07T12:12:07+02:00</published><updated>2021-06-07T12:12:07+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-06-07:/an-incomplete-list-of-skills-senior-engineers-need.html</id><summary type="html"/><content type="html">&lt;p&gt;This is copied from &lt;a href="https://skamille.medium.com/"&gt;Camille Fournier&lt;/a&gt;‘s article
on medium. I copied it rather than linked to it because who knows if and when
Medium will change the &lt;span class="caps"&gt;URL&lt;/span&gt; or put the content behind a paywall.&lt;/p&gt;
&lt;p&gt;Highlights are simply an impulsive “I can think about this for the next
few months.” After that I might change them.&lt;/p&gt;
&lt;h1 id="an-incomplete-list-of-skills-senior-engineers-need-beyond-coding"&gt;An incomplete list of skills senior engineers need, beyond coding&lt;/h1&gt;
&lt;h2 id="for-varying-levels-of-seniority-from-senior-to-staff-and-beyond"&gt;For varying levels of seniority, from senior, to staff, and beyond.&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;How to &lt;mark&gt;run a meeting&lt;/mark&gt;, and no, being the person who talks the most in the meeting is not the same thing as running it&lt;/li&gt;
&lt;li&gt;How to &lt;mark&gt;write a design doc&lt;/mark&gt;, take feedback, and drive it to resolution, in a reasonable period of time&lt;/li&gt;
&lt;li&gt;How to mentor an early-career teammate, a mid-career engineer, a new manager who needs technical advice&lt;/li&gt;
&lt;li&gt;How to indulge a senior manager who wants to talk about technical stuff that they don’t really understand, without rolling your eyes or making them feel stupid&lt;/li&gt;
&lt;li&gt;How to explain a technical concept behind closed doors to a senior person too embarrassed to openly admit that they don’t understand it&lt;/li&gt;
&lt;li&gt;How to influence another team to use your solution instead of writing their own&lt;/li&gt;
&lt;li&gt;How to get another engineer to do something for you by &lt;mark&gt;asking for help in a way that makes them feel appreciated&lt;/mark&gt;&lt;/li&gt;
&lt;li&gt;How to &lt;mark&gt;lead a project even though you don’t manage any of the people working on the project&lt;/mark&gt;&lt;/li&gt;
&lt;li&gt;How to get other engineers to listen to your ideas without making them feel threatened&lt;/li&gt;
&lt;li&gt;How to listen to other engineers’ ideas without feeling threatened&lt;/li&gt;
&lt;li&gt;How to give up your baby, that project that you built into something great, so you can do something else&lt;/li&gt;
&lt;li&gt;How to teach another engineer to care about that thing you really care about (operations, correctness, testing, code quality, performance, simplicity, etc)&lt;/li&gt;
&lt;li&gt;How to communicate project status to stakeholders&lt;/li&gt;
&lt;li&gt;How to convince management that they need to invest in a non-trivial technical project&lt;/li&gt;
&lt;li&gt;How to &lt;mark&gt;build software while delivering incremental value&lt;/mark&gt; in the process&lt;/li&gt;
&lt;li&gt;How to craft a project proposal, socialize it, and get buy-in to execute it&lt;/li&gt;
&lt;li&gt;How to &lt;mark&gt;repeat yourself enough that people start to listen&lt;/mark&gt;&lt;/li&gt;
&lt;li&gt;How to pick your battles&lt;/li&gt;
&lt;li&gt;How to help someone get promoted&lt;/li&gt;
&lt;li&gt;How to get information about what’s really happening (how to gossip, how to network)&lt;/li&gt;
&lt;li&gt;How to &lt;mark&gt;find interesting work on your own&lt;/mark&gt;, instead of waiting for someone to bring it to you&lt;/li&gt;
&lt;li&gt;How to tell someone they’re wrong without making them feel ashamed&lt;/li&gt;
&lt;li&gt;How to take negative feedback gracefully&lt;/li&gt;
&lt;/ol&gt;</content><category term="Technical/Engineering"/><category term="advice"/><category term="management"/></entry><entry><title>Lessons from 45 years in the software industry</title><link href="https://johnmathews.eu/45-years-in-software.html" rel="alternate"/><published>2021-05-27T10:37:18+02:00</published><updated>2021-05-27T10:37:18+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-27:/45-years-in-software.html</id><summary type="html"/><content type="html">&lt;p&gt;An &lt;a href="https://web.archive.org/web/20210527083359/https://www.bti360.com/what-ive-learned-in-45-years-in-the-software-industry/"&gt;article&lt;/a&gt;
from a recently retired software engineer about lessons learned over 4 decades.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Beware the curse of knowledge&lt;/li&gt;
&lt;li&gt;Focus on the fundamentals; Teamwork, Trust, Testing, Communication, Code Design&lt;/li&gt;
&lt;li&gt;Simplicity&lt;/li&gt;
&lt;li&gt;Seek first to understand&lt;/li&gt;
&lt;li&gt;Beware lock-in - cost of change, swapping problems&lt;/li&gt;
&lt;li&gt;Be honest and acknowledge when you don’t fit the role&lt;/li&gt;
&lt;/ol&gt;</content><category term="Technical/Engineering"/><category term="advice"/></entry><entry><title>I Leaked Credentials Onto A Public GitHub Repo</title><link href="https://johnmathews.eu/i-leaked-credentials-onto-a-public-github-repo.html" rel="alternate"/><published>2021-04-15T19:19:35+02:00</published><updated>2021-04-15T19:19:35+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-15:/i-leaked-credentials-onto-a-public-github-repo.html</id><summary type="html"/><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#dont-post-secrets-to-public-github-repositories"&gt;Don’t post secrets to public GitHub repositories.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#background"&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-hack"&gt;The hack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#remediation"&gt;Remediation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#questions"&gt;Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#study"&gt;Study&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#comments"&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="dont-post-secrets-to-public-github-repositories"&gt;Don’t post secrets to public GitHub repositories.&lt;/h1&gt;
&lt;p&gt;I made this mistake a while ago, and in the interests of openness and learning
from others, I’d like to describe what happened. Maybe it’ll help others avoid
the mistake, and maybe I’ll learn something from any conversation this article generates.&lt;/p&gt;
&lt;h1 id="background"&gt;Background&lt;/h1&gt;
&lt;p&gt;Using Google Cloud Platform (&lt;span class="caps"&gt;GCP&lt;/span&gt;), I’ve been doing some work across multiple
compute instances. Thankfully, the work wasn’t business critical or on
production systems.  My account was isolated  away from the rest of the business.&lt;/p&gt;
&lt;p&gt;As the number of servers I was working with increased, I realised I needed to
begin using some tools to automate server setup. This lead me to begin using
Ansible, and once I’d cobbled together a working playbook I pushed my Ansible
project to my GitHub account… And accidentally leaked the key for an
account I’d been using.&lt;/p&gt;
&lt;h1 id="the-hack"&gt;The hack&lt;/h1&gt;
&lt;p&gt;Within a couple of minutes of pushing the repository to GitHub I:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Made the repository private.&lt;/li&gt;
&lt;li&gt;Stopped tracking the keys in git and removed them from the cache &lt;code&gt;git rm -r --cached &lt;dir&gt;&lt;/dir&gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Received an email from Google saying they’d found leaked credentials.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class="caps"&gt;OK&lt;/span&gt;, close call. The secret was leaked for less than 5 minutes. On my obscure
personal GitHub.&lt;/p&gt;
&lt;p&gt;I thought there was nothing to worry about.. But then I noticed some activity
in the console.&lt;/p&gt;
&lt;p&gt;Compute instances were being created, I could see the list growing rapidly.
Over the next few minutes 195 compute instances and disks were being created,
each with a unique name in zones across the world. The format of the name was
&lt;code&gt;node-&lt;type&gt;-&lt;number&gt;&lt;/number&gt;&lt;/type&gt;&lt;/code&gt;. Where type was either application, backup, jenkins,
gke, prod, staging, worker, www, build, redis, or runner. Maybe some others
too. The number seemed to be 5 random digits.&lt;/p&gt;
&lt;p&gt;Some of the instances were ephemeral. They all had delete protection enabled. I
checked the details of a few of them and noticed some scripts that included
references to Monero.&lt;/p&gt;
&lt;p&gt;So I guess a Monero mining bot was being set up.&lt;/p&gt;
&lt;p&gt;The logs showed that &lt;span class="caps"&gt;GKE&lt;/span&gt; and networking resources had also been requested, but
the account which the stolen credentials belonged to didn’t have the necessary
permissions. Our project also maxed out its quota of compute instances in
multiple regions and zones.&lt;/p&gt;
&lt;h1 id="remediation"&gt;Remediation&lt;/h1&gt;
&lt;p&gt;I deleted the account that had been leaked, and began quantifying the
damage. I wanted to know exactly what permissions the key had, which
resources could be created, and could the leaked account be used to create
other accounts? No, it can’t.&lt;/p&gt;
&lt;p&gt;After looking around and becoming confident that it was &lt;em&gt;only&lt;/em&gt; 195 compute
instances with disks and delete protection that had been created, in regions
and zones across the globe, I began to remove them. No other resources had been provisioned.&lt;/p&gt;
&lt;p&gt;It took me 10 minutes and some googling to create the following workflow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Get all the compute instances and dump them into a file. I expected to run a
   script that iterated through the file line by line, setting variables based
   on the content of the current line: &lt;code&gt;gcloud compute instances list --format 'csv[no-heading](name, zone)' &amp;gt; names.txt&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Vim, find the rows that contain the instances that I don’t want to
   delete, and remove these from the file. There are a handful of compute
   instances I want to keep, and 195 that I want to remove. &lt;code&gt;:v/node-&lt;/code&gt; shows
   any rows that &lt;em&gt;don’t&lt;/em&gt; include “node-”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Loop through the file and for each row, which contains the instance name and its zone,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remove delete protection&lt;/li&gt;
&lt;li&gt;Delete the instance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nv"&gt;IFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;, &lt;span class="nb"&gt;read&lt;/span&gt; -r name zone
  &lt;span class="k"&gt;do&lt;/span&gt; gcloud compute instances update &lt;span class="nv"&gt;$name&lt;/span&gt; --zone &lt;span class="nv"&gt;$zone&lt;/span&gt; --no-deletion-protection &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; gcloud compute instances delete &lt;span class="nv"&gt;$name&lt;/span&gt; --zone &lt;span class="nv"&gt;$zone&lt;/span&gt; --quiet
&lt;span class="k"&gt;done&lt;/span&gt; &amp;lt; names.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;--quiet&lt;/code&gt; flag is necessary because otherwise gcloud will ask me to confirm
that I want to delete the instance otherwise.&lt;/p&gt;
&lt;h1 id="questions"&gt;Questions&lt;/h1&gt;
&lt;p&gt;I’m surprised by the speed with which the attacker found the leaked
credentials. The repo did not belong to the clients account but my own, and I
assume that my account is obscure enough to not be on any interesting lists. If
my account is being scanned every few minutes, presumably all accounts are
being scanned regularly.&lt;/p&gt;
&lt;p&gt;How many resources are required to do that? I guess if one of these attacks
works you can use the stolen compute to scan more repositories for more leaked
credentials. It’s easy to imagine scenarios where large corporations that are
already running complicated cloud infrastructure deployments wouldn’t notice a
few (200?) unauthorized compute instances running.&lt;/p&gt;
&lt;h1 id="study"&gt;Study&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLIivdWyY5sqIlPnZ7cvkg2Ck-8ZZ8TA5t"&gt;Service accounts&lt;/a&gt; on Google Cloud Platform.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=goclfp6a2IQ&amp;amp;t=1962s"&gt;Ansible&lt;/a&gt; videos.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=hQWRp-FdTpc"&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt;&lt;/a&gt; crash course.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/vBrezgoX"&gt;Vagrant&lt;/a&gt; crash course.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/26479562/what-does-ifs-do-in-this-bash-loop-cat-file-while-ifs-read-r-line-do/26480210"&gt;&lt;span class="caps"&gt;IFS&lt;/span&gt;=&lt;/a&gt; syntax explanation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="comments"&gt;Comments&lt;/h1&gt;
&lt;p&gt;There was some useful &lt;a href="https://lobste.rs/s/5vwctk/i_leaked_credentials_onto_public_github"&gt;discussion&lt;/a&gt; about this article on Lobste.rs.&lt;/p&gt;</content><category term="Technical/Engineering"/><category term="hack"/><category term="github"/><category term="service-account"/><category term="keys"/><category term="security"/></entry></feed>