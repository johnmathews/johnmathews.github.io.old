<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>John Mathews</title><link href="https://johnmathews.eu/" rel="alternate"/><link href="https://johnmathews.eu/feeds/all.atom.xml" rel="self"/><id>https://johnmathews.eu/</id><updated>2021-05-12T11:17:45+02:00</updated><entry><title>Where was a setting set?</title><link href="https://johnmathews.eu/where-was-a-setting-set-.html" rel="alternate"/><published>2021-05-12T11:17:45+02:00</published><updated>2021-05-12T11:17:45+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-12:/where-was-a-setting-set-.html</id><summary type="html"/><content type="html">&lt;h2 id="see-where-vim-is-setting-an-option"&gt;See where Vim is setting an option&lt;/h2&gt;
&lt;p&gt;See where an option was set in vim using the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:verbose set textwidth?&lt;/code&gt;&lt;/p&gt;</content><category term="snippet"/><category term="vim"/></entry><entry><title>My Life Expectancy</title><link href="https://johnmathews.eu/my-life-expectancy.html" rel="alternate"/><published>2021-05-12T10:59:32+02:00</published><updated>2021-05-12T10:59:32+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-12:/my-life-expectancy.html</id><summary type="html"/><content type="html">&lt;h1 id="key-points"&gt;Key points:&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Weight doesn’t matter.&lt;/li&gt;
&lt;li&gt;Be in “excellent” health.&lt;/li&gt;
&lt;li&gt;Workout 3 or 4 times a week.&lt;/li&gt;
&lt;li&gt;Drink liquor (or red wine) 3 or 4 times a week (after each workout).&lt;/li&gt;
&lt;li&gt;Try to be happy, optimistic and relaxed. What are you working so hard for
   anyway? You need something to do, someone to love, something to hope for.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="longevity-calculations"&gt;Longevity Calculations&lt;/h1&gt;
&lt;p&gt;I was playing with the life expectancy calculator at &lt;a href="https://www.blueprintincome.com/tools/life-expectancy-calculator-how-long-will-i-live/"&gt;blueprintincome&lt;/a&gt;&lt;sup id="sf-my-life-expectancy-1-back"&gt;&lt;a class="simple-footnote" href="#sf-my-life-expectancy-1" title="There is also a more detailed calculator at projectbiglife, its calibrated for Canadian citizens."&gt;1&lt;/a&gt;&lt;/sup&gt; and was surprised to find that their regression technique gives me
a 50% chance of living to 95! I’d expected a result closer to 80.&lt;/p&gt;
&lt;p&gt;After printing out a &lt;a href="https://johnmathews.eu/documents/90-year-life-calendar.jpg"&gt;90 year
calendar&lt;/a&gt;, my next
thought was to play with the calculator to find the maximum age I could have a 50% chance of reaching.&lt;/p&gt;
&lt;p&gt;Doing the factors below would apparently give me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;75% chance of living to 92&lt;/li&gt;
&lt;li&gt;50% change of living to 101&lt;/li&gt;
&lt;li&gt;25% chance of living to 107&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dont-workout-every-day"&gt;Don’t workout every day&lt;/h2&gt;
&lt;p&gt;There is no additional benefit from working out more than 4 times a week.
Once you’re fit and working out 4 times a week it doesn’t matter if you do
more exercise.&lt;/p&gt;
&lt;p&gt;Being in “excellent” health is better than being in “very good” health though,
so make the workouts count. I guess if it didn’t make a difference then it
wouldn’t be excellent in the first place.&lt;/p&gt;
&lt;h2 id="drink-more-alcohol"&gt;Drink more alcohol&lt;/h2&gt;
&lt;p&gt;I was surprised that having 3-4 drinks each week increases your life
expectancy. I thought that it was best to not drink any alcohol at all.&lt;/p&gt;
&lt;p&gt;I should be drinking red wine or liquor 3 or 4 times each week. Liquor increases
longevity in men, but reduces longevity for women. Red wine increases longevity in
women, but has no effect in men&lt;sup id="sf-my-life-expectancy-2-back"&gt;&lt;a class="simple-footnote" href="#sf-my-life-expectancy-2" title="Alcohol consumption in later life and reaching longevity: the Netherlands Cohort Study "&gt;2&lt;/a&gt;&lt;/sup&gt;. I guess I
should drink some rum after each workout.&lt;/p&gt;
&lt;h2 id="weight-doesnt-make-a-different"&gt;Weight doesn’t make a different&lt;/h2&gt;
&lt;p&gt;According to their regression, my expected longevity is unchanged within a
weight range of 78kg - 90kg. I guess it’s much more important that I’m in
“excellent” health, working out 4 times a week and having some wine, rum, or
whiskey after each workout.&lt;/p&gt;
&lt;h1 id="but-its-just-statistics"&gt;But it’s just statistics&lt;/h1&gt;
&lt;p&gt;The calculator only asks for quantifiable or physical attributes. It doesn’t
consider emotional, relational or spiritual factors.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-my-life-expectancy-1"&gt;There is also a more detailed
calculator at &lt;a href="https://www.projectbiglife.ca/life-expectancy-calculator"&gt;projectbiglife&lt;/a&gt;, its calibrated for Canadian citizens. &lt;a class="simple-footnote-back" href="#sf-my-life-expectancy-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-my-life-expectancy-2"&gt;&lt;a href="https://academic.oup.com/ageing/article/49/3/395/5730334"&gt;Alcohol consumption in later life and
reaching longevity: the Netherlands Cohort Study
&lt;/a&gt; &lt;a class="simple-footnote-back" href="#sf-my-life-expectancy-2-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Non-technical/Journal"/><category term="regression"/><category term="statistics"/><category term="life-expectancy"/><category term="death"/></entry><entry><title>Globbing</title><link href="https://johnmathews.eu/globbing.html" rel="alternate"/><published>2021-05-10T16:12:25+02:00</published><updated>2021-05-10T16:12:25+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-10:/globbing.html</id><summary type="html"/><content type="html">&lt;h2 id="globbing"&gt;Globbing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;????&lt;/code&gt; → 4 chars&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; → any number of chars&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[:upper:]&lt;/code&gt; ⇔ &lt;code&gt;[A-Z]&lt;/code&gt; same for &lt;code&gt;[:lower:]&lt;/code&gt; and &lt;code&gt;[:digit:]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[:alpha:]&lt;/code&gt; ⇔ &lt;code&gt;[a-zA-Z]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;[:alnum:]&lt;/code&gt; ⇔ &lt;code&gt;[a-zA-Z0-9]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ls -l [a-d]&lt;/code&gt; → part of a range&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;^ and $ works like in regex&lt;/li&gt;
&lt;li&gt;&lt;code&gt;la a*.{doc,docx}&lt;/code&gt; → &lt;span class="caps"&gt;OR&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ls a*.(doc|docx)&lt;/code&gt; → &lt;span class="caps"&gt;OR&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="snippet"/><category term="linux"/></entry><entry><title>More VIM Notes</title><link href="https://johnmathews.eu/more-vim-notes.html" rel="alternate"/><published>2021-05-10T10:44:00+02:00</published><updated>2021-05-10T10:44:00+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-10:/more-vim-notes.html</id><summary type="html"/><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#quickfix-list"&gt;Quickfix list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#registers"&gt;Registers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#expression-register"&gt;Expression register&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#substitutions"&gt;Substitutions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#command-line"&gt;Command line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#delete-stuff-without-leaving-insert-mode"&gt;Delete stuff without leaving insert mode:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#text-objects"&gt;Text objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#screen-movement"&gt;Screen Movement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sources"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="quickfix-list"&gt;Quickfix list&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A quickfix list is a set of positions in one or more files&lt;/li&gt;
&lt;li&gt;A quckfix list is global. Not local to a particular buffer.&lt;/li&gt;
&lt;li&gt;A quickfix list is &lt;em&gt;not&lt;/em&gt; the quickfix window. The window can show the list. The list is a datastructure.&lt;/li&gt;
&lt;li&gt;A changelist is local to its buffer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="registers"&gt;Registers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; contains the content of the last yank&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;1&lt;/code&gt;-&lt;code&gt;9&lt;/code&gt; contains the content you’ve deleted or changed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;_&lt;/code&gt; blackhole register - send something here and it wont change any other register.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt; contains any deleted or changed content smaller than 1 row.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt; contains the name of the current file.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="expression-register"&gt;Expression register&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;In insert mode, &lt;code&gt;&lt;c-r&gt;=&lt;/c-r&gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Type any valid vimscript.&lt;/li&gt;
&lt;li&gt;The output is inserted into the buffer.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="substitutions"&gt;Substitutions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:&amp;amp;&amp;amp;&lt;/code&gt; → repeat the last substitution command with its flags&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:~&lt;/code&gt; → repeat the lat substitution with the same replacement, but with the last used search pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="command-line"&gt;Command line&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;q:&lt;/code&gt; - opens the command line window. Good for yanking and viewing previous commands&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:&lt;c-f&gt;&lt;/c-f&gt;&lt;/code&gt; - open command history list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:UltiSnipsEdit&lt;/code&gt; - opens the ultiSnips file for the current buffers filetype. See which snippets are defined.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="delete-stuff-without-leaving-insert-mode"&gt;Delete stuff without leaving insert mode:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;c-h&gt;&lt;/c-h&gt;&lt;/code&gt; - same as backspace&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-w&gt;&lt;/c-w&gt;&lt;/code&gt; - delete previous word&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-u&gt;&lt;/c-u&gt;&lt;/code&gt; - delete everything before cursor (on same row)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-d&gt;&lt;/c-d&gt;&lt;/code&gt; or &lt;code&gt;&lt;c-t&gt;&lt;/c-t&gt;&lt;/code&gt; - (un)indent a row&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-e&gt;&lt;/c-e&gt;&lt;/code&gt; - delete next word&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="text-objects"&gt;Text objects&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gf&lt;/code&gt; - edit the file at the file path under the cursor (useful for netrw?)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gx&lt;/code&gt; - open the file at the file path under the cursor (useful for netrw?)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[m&lt;/code&gt;, &lt;code&gt;]m&lt;/code&gt; - move to the start or end of a method &lt;/li&gt;
&lt;li&gt;&lt;code&gt;@:&lt;/code&gt; - repeat the last command&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; will indent a line. &lt;code&gt;.&lt;/code&gt; will repeat the operation, so &lt;code&gt;&amp;gt;&amp;gt;..&lt;/code&gt; would indent
    a line 3 times.&lt;/p&gt;
&lt;p&gt;You can use this along with a count, which will do the indention for &lt;code&gt;n&lt;/code&gt; number
of lines (with the current line being the top line). &lt;code&gt;3&amp;gt;&amp;gt;..&lt;/code&gt; will indent 3
lines 3 blocks to the right.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="screen-movement"&gt;Screen Movement&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;c-y&gt;&lt;/c-y&gt;&lt;/code&gt; - up one line, and moves the cursor if it would go off the screen&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-e&gt;&lt;/c-e&gt;&lt;/code&gt; - down one line, and moves the cursor if it would go off screen&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-f&gt;&lt;/c-f&gt;&lt;/code&gt; - down one page, with cursor at top of screen&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-b&gt;&lt;/c-b&gt;&lt;/code&gt; - up one page, with cursor at bottom of screen&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="sources"&gt;Sources&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://thevaluable.dev/vim-advanced/"&gt;The Valuable Dev&lt;/a&gt;&lt;/em&gt; has a lot of great tips.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://www.vimfromscratch.com/articles/vim-for-python/"&gt;Vim for Python&lt;/a&gt;&lt;/em&gt; has some great notes on linting and code completion plugins that I’ve either copied or was more or less doing already.&lt;/li&gt;
&lt;/ol&gt;</content><category term="Technical/Developer Tools"/><category term="tips"/><category term="vim"/></entry><entry><title>Create Custom Functions in Vim</title><link href="https://johnmathews.eu/create-custom-functions-in-vim.html" rel="alternate"/><published>2021-05-05T18:06:15+02:00</published><updated>2021-05-05T18:06:15+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-05:/create-custom-functions-in-vim.html</id><summary type="html"/><content type="html">&lt;h2 id="vimscript-functions"&gt;Vimscript functions&lt;/h2&gt;
&lt;p&gt;Create a custom command and function to create a new file in vim.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt; expand&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt; %:&lt;span class="k"&gt;h&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;command&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;nargs&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; Ms &lt;span class="k"&gt;call&lt;/span&gt; s:NewFile&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;q&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;args&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;`

&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; s:NewFile&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;echom&lt;/span&gt; &lt;span class="k"&gt;a&lt;/span&gt;:&lt;span class="nb"&gt;fp&lt;/span&gt;
  execute &lt;span class="s2"&gt;"e "&lt;/span&gt; . &lt;span class="s2"&gt;"~/foo/bar/"&lt;/span&gt; . &lt;span class="k"&gt;a&lt;/span&gt;:&lt;span class="nb"&gt;fp&lt;/span&gt; . &lt;span class="s2"&gt;".ext"&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/54354220/trying-to-create-a-vimscript-function-that-creates-a-new-file"&gt;question on &lt;span class="caps"&gt;SO&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="snippet"/><category term="vim"/></entry><entry><title>Vim Text Objects</title><link href="https://johnmathews.eu/vim-text-objects.html" rel="alternate"/><published>2021-05-05T18:04:40+02:00</published><updated>2021-05-05T18:04:40+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-05:/vim-text-objects.html</id><summary type="html"/><content type="html">&lt;h2 id="better-text-objects-in-vim"&gt;Better text objects in Vim&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;target function arguments&lt;/li&gt;
&lt;li&gt;more types of object&lt;/li&gt;
&lt;li&gt;consistent searching/jumping if you’re not inside the thing you’re targeting&lt;/li&gt;
&lt;li&gt;jump forward or backward&lt;/li&gt;
&lt;li&gt;look for the nth occurrance&lt;/li&gt;
&lt;li&gt;select white space around/inside object&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/wellle/targets.vim"&gt;github&lt;/a&gt;
&lt;a href="https://www.barbarianmeetscoding.com/blog/exploring-vim-plugins-improve-and-extend-your-text-objects-with-targets-vim"&gt;article about a plugin&lt;/a&gt;&lt;/p&gt;</content><category term="snippet"/><category term="vim"/></entry><entry><title>Delete from vim insert mode</title><link href="https://johnmathews.eu/delete-from-vim-insert-mode.html" rel="alternate"/><published>2021-05-05T18:03:07+02:00</published><updated>2021-05-05T18:03:07+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-05:/delete-from-vim-insert-mode.html</id><summary type="html"/><content type="html">&lt;h2 id="delete-stuff-in-vim-without-leaving-insert-mode"&gt;Delete stuff in Vim without leaving insert mode:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;c-h&gt;&lt;/c-h&gt;&lt;/code&gt; - same as backspace&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-w&gt;&lt;/c-w&gt;&lt;/code&gt; - delete previous word&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-u&gt;&lt;/c-u&gt;&lt;/code&gt; - delete everything before cursor (on same row)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-d&gt;&lt;/c-d&gt;&lt;/code&gt; or &lt;code&gt;&lt;c-t&gt;&lt;/c-t&gt;&lt;/code&gt; - (un)indent a row&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-e&gt;&lt;/c-e&gt;&lt;/code&gt; - delete next word (create a mapping in vimrc)&lt;/li&gt;
&lt;/ul&gt;</content><category term="snippet"/><category term="vim"/></entry><entry><title>Global Aliases</title><link href="https://johnmathews.eu/global-aliases.html" rel="alternate"/><published>2021-05-05T18:02:11+02:00</published><updated>2021-05-05T18:02:11+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-05:/global-aliases.html</id><summary type="html"/><content type="html">&lt;h2 id="alias-function-arguments"&gt;Alias function arguments&lt;/h2&gt;
&lt;p&gt;If you want to alias a bunch of arguments for a command, use global aliases&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alias -g foo="some complicated options"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;then
&lt;code&gt;grep some complicated options&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;becomes:
&lt;code&gt;grep foo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.thorsten-hans.com/5-types-of-zsh-aliases/"&gt;https://www.thorsten-hans.com/5-types-of-zsh-aliases/&lt;/a&gt;&lt;/p&gt;</content><category term="snippet"/><category term="alias"/><category term="linux"/></entry><entry><title>Vim yanked text buffer</title><link href="https://johnmathews.eu/vim-yanked-text-buffer.html" rel="alternate"/><published>2021-05-05T18:00:44+02:00</published><updated>2021-05-05T18:00:44+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-05:/vim-yanked-text-buffer.html</id><summary type="html"/><content type="html">&lt;h2 id="vim-register-for-yanked-text"&gt;Vim register for yanked text&lt;/h2&gt;
&lt;p&gt;It’s annoying when you delete something and overwrite your yanked text. &lt;/p&gt;
&lt;p&gt;Use numbered registers!
&lt;code&gt;"0&lt;/code&gt; to &lt;code&gt;"9&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;"0&lt;/code&gt; contains the most recent yank.
&lt;code&gt;"1&lt;/code&gt; contains the most recent deleted text&lt;/p&gt;
&lt;p&gt;&lt;code&gt;"0p&lt;/code&gt; - paste the most recent yank, even if you deleted something after yanking it&lt;/p&gt;</content><category term="snippet"/><category term="vim"/><category term="linux"/><category term="text"/></entry><entry><title>ChezMoi shortcuts</title><link href="https://johnmathews.eu/chezmoi-shortcuts.html" rel="alternate"/><published>2021-05-05T17:58:52+02:00</published><updated>2021-05-05T17:58:52+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-05:/chezmoi-shortcuts.html</id><summary type="html"/><content type="html">&lt;h2 id="chezmoi"&gt;Chezmoi&lt;/h2&gt;
&lt;p&gt;Chezmoi is a great tool for managing dotfiles. This is a shortcut to update the source state based on local changes.&lt;/p&gt;
&lt;p&gt;chezmoi status | cut -c 4- | xargs -I % -p sh -c ‘chezmoi add ~/%’&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/twpayne/chezmoi"&gt;project&lt;/a&gt;&lt;/p&gt;</content><category term="snippet"/><category term="dotfiles"/><category term="alias"/></entry><entry><title>Sleep Is Good</title><link href="https://johnmathews.eu/sleep-is-good.html" rel="alternate"/><published>2021-05-04T17:57:30+02:00</published><updated>2021-05-04T17:57:30+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-04:/sleep-is-good.html</id><summary type="html"/><content type="html">&lt;h2 id="sleep"&gt;Sleep&lt;/h2&gt;
&lt;p&gt;“It enhances your memory and makes you more creative. It makes you look more attractive. It keeps you slim and lowers food cravings. It protects you from cancer and dementia. It wards off colds and the flu. It lowers your risk of heart attacks and stroke, not to mention diabetes. You’ll even feel happier, less depressed, and less anxious.”&lt;/p&gt;
&lt;p&gt;Dr. Walker - why we need to sleep&lt;/p&gt;</content><category term="snippet"/><category term="sleep"/><category term="lifestyle"/></entry><entry><title>Bash Strict Mode</title><link href="https://johnmathews.eu/bash-strict-mode.html" rel="alternate"/><published>2021-05-04T17:56:34+02:00</published><updated>2021-05-04T17:56:34+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-04:/bash-strict-mode.html</id><summary type="html"/><content type="html">&lt;h2 id="bash-strict-mode"&gt;Bash strict mode&lt;/h2&gt;
&lt;p&gt;How to write robust bash scripts:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://redsymbol.net/articles/unofficial-bash-strict-mode/"&gt;Bash Strict Mode&lt;/a&gt;&lt;/p&gt;</content><category term="snippet"/><category term="bash"/><category term="linux"/></entry><entry><title>How To Write An About Page</title><link href="https://johnmathews.eu/how-to-write-an-about-page.html" rel="alternate"/><published>2021-05-04T17:55:03+02:00</published><updated>2021-05-04T17:55:03+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-04:/how-to-write-an-about-page.html</id><summary type="html"/><content type="html">&lt;h2 id="how-to-write-an-about-page"&gt;How to write an About Page&lt;/h2&gt;
&lt;p&gt;An often recommended &lt;a href="https://www.kaleighmoore.com/blog/2020/5/14/how-to-write-a-stellar-about-page"&gt;blog post&lt;/a&gt; by Kaleigh Moore about writing a good about page.&lt;/p&gt;</content><category term="snippet"/><category term="writing"/></entry><entry><title>Domain Name Registraars</title><link href="https://johnmathews.eu/domain-name-registraars.html" rel="alternate"/><published>2021-05-03T17:49:59+02:00</published><updated>2021-05-03T17:49:59+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-03:/domain-name-registraars.html</id><summary type="html"/><content type="html">&lt;h2 id="domain-name-registrars"&gt;Domain name registrars&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://namecheap.com"&gt;https://namecheap.com&lt;/a&gt; (cheap)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://instantdomainsearch.com"&gt;https://instantdomainsearch.com&lt;/a&gt; (variants)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://iwantmyname.com"&gt;https://iwantmyname.com&lt;/a&gt; (tld comparison)&lt;/li&gt;
&lt;/ul&gt;</content><category term="snippet"/><category term="web"/></entry><entry><title>Honest Troubleshooting Code of Conduct</title><link href="https://johnmathews.eu/honest-troubleshooting-code-of-conduct.html" rel="alternate"/><published>2021-05-03T17:46:28+02:00</published><updated>2021-05-03T17:46:28+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-03:/honest-troubleshooting-code-of-conduct.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;a href="http://rachelbythebay.com/w/2021/05/01/code/"&gt;The Honest Troubleshooting Code of Conduct&lt;/a&gt;&lt;/p&gt;</content><category term="snippet"/></entry><entry><title>Linux Directories</title><link href="https://johnmathews.eu/linux-etsy-dir.html" rel="alternate"/><published>2021-05-02T17:43:08+02:00</published><updated>2021-05-02T17:43:08+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-05-02:/linux-etsy-dir.html</id><summary type="html"/><content type="html">&lt;h2 id="linux-filesystem-hierarchy-standard"&gt;Linux Filesystem Hierarchy Standard&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;/etc&lt;/code&gt; (etsy) → “etcetera” or “editable text config” → a place to put config files. &lt;/p&gt;
&lt;p&gt;Originally, the root directory had &lt;code&gt;/boot&lt;/code&gt; for booting, &lt;code&gt;/dev&lt;/code&gt; for devices… One dir for each type of thing. But this put config in many places. so &lt;code&gt;etc/&lt;/code&gt; became convention&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard"&gt;Filesystem Hierarchy Standard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pathname.com/fhs/pub/fhs-2.3.html"&gt;fhs-2.3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="snippet"/><category term="linux"/><category term="filesystem"/></entry><entry><title>Browser Security</title><link href="https://johnmathews.eu/browser-security.html" rel="alternate"/><published>2021-04-30T22:24:40+02:00</published><updated>2021-04-30T22:24:40+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-30:/browser-security.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;a href="https://blog.vnaik.com/posts/web-attacks.html"&gt;Blog post&lt;/a&gt; about browser/Web-app security, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;CSRF&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;CORS&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; Security Headers &lt;/li&gt;
&lt;/ul&gt;</content><category term="snippet"/><category term="xss"/><category term="cors"/><category term="http"/></entry><entry><title>HTML Templates</title><link href="https://johnmathews.eu/html-templates.html" rel="alternate"/><published>2021-04-30T17:34:17+02:00</published><updated>2021-04-30T17:34:17+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-30:/html-templates.html</id><summary type="html"/><content type="html">&lt;h2 id="html-templates"&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt; Templates&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="wickedtemplates.com"&gt;wickedtemplates.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="cruip.com"&gt;cruip.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://versoly.com/templates"&gt;https://versoly.com/templates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="snippet"/><category term="html"/><category term="jam"/></entry><entry><title>Interview With Linus Torvalds</title><link href="https://johnmathews.eu/interview-with-linus-torvalds.html" rel="alternate"/><published>2021-04-29T17:38:33+02:00</published><updated>2021-04-29T17:38:33+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-29:/interview-with-linus-torvalds.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;a href="https://tag1consulting.com/blog/interview-linus-torvalds-linux-and-git:"&gt;Interview&lt;/a&gt; with Linus Torvalds:&lt;/p&gt;
&lt;p&gt;I don’t want to claim that programming is an art, because it really is mostly
just about ‘good engineering’. I’m a big believer in Thomas Edison’s ‘one
percent inspiration and ninety-nine percent perspiration’ mantra. It’s almost
all about the little details and the everyday grunt-work.&lt;/p&gt;
&lt;p&gt;But there is that occasional ‘inspiration’ part, that ‘good taste’ thing that
is about more than just solving some problem - solving it cleanly and nicely
and yes, even beautifully.&lt;/p&gt;</content><category term="snippet"/><category term="linux"/><category term="interview"/><category term="linus"/></entry><entry><title>RPC calls</title><link href="https://johnmathews.eu/rpc.html" rel="alternate"/><published>2021-04-29T17:37:38+02:00</published><updated>2021-04-29T17:37:38+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-29:/rpc.html</id><summary type="html"/><content type="html">&lt;p&gt;A &lt;span class="caps"&gt;RPC&lt;/span&gt; is when an executable causes a procedure (subroutine) to execute on
another computer, It’s coded as if it were a normal (local) subroutine. You
don’t explicitly code the details for the remote interaction. You write the
same code whether the subroutine is local or remote.&lt;/p&gt;</content><category term="snippet"/><category term="rpc"/><category term="linux"/></entry><entry><title>A useful blog</title><link href="https://johnmathews.eu/useful-blog.html" rel="alternate"/><published>2021-04-29T17:35:17+02:00</published><updated>2021-04-29T17:35:17+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-29:/useful-blog.html</id><summary type="html"/><content type="html">&lt;p&gt;Just found a really useful &lt;a href="https://seb.jambor.dev"&gt;blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Interesting &lt;a href="https://seb.jambor.dev/posts/cd-is-not-a-program/"&gt;discussion&lt;/a&gt; about the difference between builtins and executables,&lt;/p&gt;
&lt;p&gt;Nice examples of using &lt;code&gt;fzf&lt;/code&gt; to &lt;a href="https://seb.jambor.dev/posts/improving-shell-workflows-with-fzf/"&gt;improve workflows&lt;/a&gt;.&lt;/p&gt;</content><category term="snippet"/><category term="linux"/><category term="shell"/><category term="fzf"/><category term="workflow"/><category term="zsh"/><category term="bash"/><category term="builtin"/></entry><entry><title>lsblk command</title><link href="https://johnmathews.eu/lsblk-command.html" rel="alternate"/><published>2021-04-28T12:18:40+02:00</published><updated>2021-04-28T12:18:40+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-28:/lsblk-command.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;code&gt;lsblk&lt;/code&gt; is a command to get info about connected devices.&lt;/p&gt;
&lt;p&gt;Used when attaching drives.&lt;/p&gt;</content><category term="snippet"/><category term="unix"/><category term="cli"/></entry><entry><title>Ranger file manager</title><link href="https://johnmathews.eu/ranger-file-manager.html" rel="alternate"/><published>2021-04-28T11:53:44+02:00</published><updated>2021-04-28T11:53:44+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-28:/ranger-file-manager.html</id><summary type="html"/><content type="html">&lt;p&gt;Ranger is a console based file manager with vi key bindings.&lt;/p&gt;
&lt;p&gt;Install it with &lt;code&gt;brew install ranger&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Launch it with &lt;code&gt;ranger&lt;/code&gt;&lt;/p&gt;</content><category term="snippet"/><category term="ranger"/><category term="unix"/><category term="vim"/><category term="tools"/></entry><entry><title>Vim Regex</title><link href="https://johnmathews.eu/vim-regex.html" rel="alternate"/><published>2021-04-28T11:37:58+02:00</published><updated>2021-04-28T11:37:58+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-28:/vim-regex.html</id><summary type="html"/><content type="html">&lt;p&gt;This is a great article about using regular expressions in Vim:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marcelfischer.eu/blog/2019/checkbox-regex/"&gt;marcelfischer.eu/blog/2019/checkbox-regex/&lt;/a&gt;&lt;/p&gt;</content><category term="snippet"/><category term="vim"/><category term="regex"/></entry><entry><title>Where and when will the current Bitcoin market peak?</title><link href="https://johnmathews.eu/when-bitcoin-top.html" rel="alternate"/><published>2021-04-27T17:46:58+02:00</published><updated>2021-04-27T17:46:58+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-27:/when-bitcoin-top.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;TLDR&lt;/span&gt;: mid-September, $300,000&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id="checklist"&gt;Checklist&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Top Cap ≈ Market Cap &lt;a href="https://charts.woobull.com/bitcoin-valuations/"&gt;chart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;MVRV&lt;/span&gt; &amp;gt; 4 &lt;a href="http://charts.woobull.com/bitcoin-price-models/"&gt;chart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;S2F&lt;/span&gt; deflection &amp;gt; 3, but noisy &lt;a href="https://twitter.com/s2fmultiple/status/1387991423400689664/photo/3"&gt;chart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;0.875 × Delta Cap ≈ Realised Cap &lt;a href="http://charts.woobull.com/bitcoin-price-models/"&gt;chart&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;HODL&lt;/span&gt; waves - 45% moved in the last 6 months &lt;a href="https://unchained-capital.com/hodlwaves/"&gt;chart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;12 Month &lt;span class="caps"&gt;RSI&lt;/span&gt; &amp;gt; 90 &lt;a href="https://www.tradingview.com/chart/BTCUSD/Wf6Nuiof-BTC-USD-12-month-RSI/"&gt;chart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3-month coin days destroyed - check glassnodes most recent email and &lt;span class="caps"&gt;STH&lt;/span&gt; and &lt;span class="caps"&gt;LTH&lt;/span&gt; &lt;a href="https://studio.glassnode.com/metrics?a=BTC&amp;amp;category=&amp;amp;m=indicators.Cdd90AgeAdjusted"&gt;chart&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="summary"&gt;Summary&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class="caps"&gt;S2F&lt;/span&gt; model suggests a peak around the beginning of 2021Q4, in the region of &lt;strong&gt;$300,000&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The rainbow chart seems to broadly agree with &lt;span class="caps"&gt;S2F&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;If the age-adjusted 3-month coin days destroyed goes above 550,000 then get ready to sell.&lt;/li&gt;
&lt;li&gt;Willy Woos “double top” chart suggests a peak around &lt;strong&gt;$400,000&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;RationalRoot’s comparison of bull runs suggests a market top around &lt;strong&gt;14 September&lt;/strong&gt; and a maximum price around &lt;strong&gt;$2,000,000&lt;/strong&gt; [sic].&lt;/li&gt;
&lt;li&gt;RationalRoot’s comparison of 12 months &lt;span class="caps"&gt;RSI&lt;/span&gt; suggests that the market top is reached shortly after a &lt;strong&gt;12 month &lt;span class="caps"&gt;RSI&lt;/span&gt; exceeds 90&lt;/strong&gt;. This seems less reliable than the above points&lt;/li&gt;
&lt;li&gt;Jurrien Timmer suggests a peak price around $100,000 if price shoots up unexpectedly quickly. I expect the market top to be significantly higher.&lt;/li&gt;
&lt;li&gt;$100k will be a massive psychological level. If the price does increase to this level before approximately July then the optimal sell price would therefore not be exactly $100,000.&lt;/li&gt;
&lt;li&gt;Market top is expected around &lt;strong&gt;September 2021 at the earliest&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The behaviour of the market will change as its participants change. There hasn’t been a bull run with significant institutional investors before.&lt;/li&gt;
&lt;li&gt;Sell using a cost averaging strategy.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="awareness"&gt;Awareness&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Buy when everyone is selling, sell when everyone is buying. Be brave when there is fear, if there is no fear then its about to get very messy.&lt;/li&gt;
&lt;li&gt;If everyone is super confident that prices are definitely going to go up, something bad is about to happen. A lack of uncertainty is a big warning bell.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;14 September, $300,000.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="threshold-values"&gt;Threshold Values&lt;/h1&gt;
&lt;h2 id="mvrv"&gt;&lt;span class="caps"&gt;MVRV&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;MVRV&lt;/span&gt; &amp;gt; 3 → Local top&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;MVRV&lt;/span&gt; &amp;gt; 4 → Macro top&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;MVRV&lt;/span&gt; has historically been one of the best on-chain predictors of market tops and bottoms.&lt;/li&gt;
&lt;li&gt;The ratio of Market Value to Realised Value is calculated by dividing Bitcoin’s market cap by its realised cap.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://charts.woobull.com/bitcoin-price-models/"&gt;chart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="top-cap"&gt;Top Cap&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Top Cap is 35 x Average Cap&lt;/li&gt;
&lt;li&gt;Market top when Top Cap is equal to Market Cap.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="delta-cap"&gt;Delta Cap&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Delta cap is Average Cap subtracted from Realised Cap.&lt;/li&gt;
&lt;li&gt;When Delta Cap is almost Realised Cap, it’s a market top.&lt;/li&gt;
&lt;li&gt;When Delta cap touches Average Cap, it’s a market bottom.&lt;/li&gt;
&lt;li&gt;Market Top when Delta cap is within 20%­15% of Realised Cap&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="s2f-deflection"&gt;&lt;span class="caps"&gt;S2F&lt;/span&gt; Deflection&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Get key ratio values&lt;/li&gt;
&lt;li&gt;If s2F deflection &amp;gt; 3, but its &lt;a href="https://studio.glassnode.com/metrics?a=BTC&amp;amp;category=&amp;amp;m=indicators.StockToFlowDeflection"&gt;noisy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="hodl-waves"&gt;&lt;span class="caps"&gt;HODL&lt;/span&gt; Waves&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&amp;gt;45% of supply has been moved in the last 180 days (6 months) → Sell&lt;/li&gt;
&lt;li&gt;&amp;gt;70% of supply has been held over 180 days → Buy&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unchained-capital.com/hodlwaves/"&gt;chart&lt;/a&gt; - hover the cursor over todays date and add up all the age brackets from 24hr to 3-6 months&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="12-month-rsi-90"&gt;12 month &lt;span class="caps"&gt;RSI&lt;/span&gt; &amp;gt; 90&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;14 month &lt;span class="caps"&gt;RSI&lt;/span&gt; &amp;gt; 95 → Sell&lt;/li&gt;
&lt;li&gt;12 month &lt;span class="caps"&gt;RSI&lt;/span&gt; &amp;gt; 90 → Sell&lt;/li&gt;
&lt;li&gt;Noisy - defer to other metrics.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="sopr"&gt;&lt;span class="caps"&gt;SOPR&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use 7 day average.&lt;/li&gt;
&lt;li&gt;1.04 → Sell&lt;/li&gt;
&lt;li&gt;0.97 → Buy&lt;/li&gt;
&lt;li&gt;Noisy - defer to other metrics.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="realised-cap-nvt-cap"&gt;Realised Cap &amp;gt; &lt;span class="caps"&gt;NVT&lt;/span&gt; Cap&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Realised Cap should be lower than &lt;span class="caps"&gt;NVT&lt;/span&gt; Cap.&lt;/li&gt;
&lt;li&gt;Sell when Realised Cap almost exceeds &lt;span class="caps"&gt;NVT&lt;/span&gt; cap&lt;/li&gt;
&lt;li&gt;See chart below, there have been false positives.&lt;/li&gt;
&lt;li&gt;Realised Cap is lower than &lt;span class="caps"&gt;NVT&lt;/span&gt; cap during a bull market only.&lt;/li&gt;
&lt;li&gt;Noisy, could be a miss.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="charts"&gt;Charts&lt;/h1&gt;
&lt;h2 id="stock-to-flow-model"&gt;Stock to Flow Model&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/images/btc_price_charts/bitcoin-stock-to-flow-model.png"&gt;&lt;img alt="bitcoin stock to flow model" class="image-process-article-inline-image" loading="lazy" sizes="(min-width: 1536x) 1020px, (min-width: 1280px) 850px, (min-width: 1024px) 800px, (min-width: 768px) 800px, (min-width: 640px) 800px, 100vw" src="https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/800w/bitcoin-stock-to-flow-model.png" srcset="https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/300w/bitcoin-stock-to-flow-model.png 300w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/600w/bitcoin-stock-to-flow-model.png 600w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/800w/bitcoin-stock-to-flow-model.png 800w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/1600w/bitcoin-stock-to-flow-model.png 1600w"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="rainbow-model"&gt;Rainbow Model&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/images/btc_price_charts/bitcoin-when-to-sell.jpg"&gt;&lt;img alt="bitcoin rainbow price bands" class="image-process-article-inline-image" loading="lazy" sizes="(min-width: 1536x) 1020px, (min-width: 1280px) 850px, (min-width: 1024px) 800px, (min-width: 768px) 800px, (min-width: 640px) 800px, 100vw" src="https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/800w/bitcoin-when-to-sell.jpg" srcset="https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/300w/bitcoin-when-to-sell.jpg 300w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/600w/bitcoin-when-to-sell.jpg 600w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/800w/bitcoin-when-to-sell.jpg 800w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/1600w/bitcoin-when-to-sell.jpg 1600w"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="top-cap_1"&gt;Top Cap&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/images/btc_price_charts/TopCap.png"&gt;&lt;img alt="Top Cap is 35*Average Cap" class="image-process-article-inline-image" loading="lazy" sizes="(min-width: 1536x) 1020px, (min-width: 1280px) 850px, (min-width: 1024px) 800px, (min-width: 768px) 800px, (min-width: 640px) 800px, 100vw" src="https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/800w/TopCap.png" srcset="https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/300w/TopCap.png 300w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/600w/TopCap.png 600w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/800w/TopCap.png 800w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/1600w/TopCap.png 1600w"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="realised-cap-nvt"&gt;Realised Cap, &lt;span class="caps"&gt;NVT&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/images/btc_price_charts/RealisedCapVsNVT.png"&gt;&lt;img alt="Realised Cap and NVT" class="image-process-article-inline-image" loading="lazy" sizes="(min-width: 1536x) 1020px, (min-width: 1280px) 850px, (min-width: 1024px) 800px, (min-width: 768px) 800px, (min-width: 640px) 800px, 100vw" src="https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/800w/RealisedCapVsNVT.png" srcset="https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/300w/RealisedCapVsNVT.png 300w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/600w/RealisedCapVsNVT.png 600w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/800w/RealisedCapVsNVT.png 800w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/1600w/RealisedCapVsNVT.png 1600w"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="delta-cap_1"&gt;Delta Cap&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/images/btc_price_charts/delta2019.jpg"&gt;&lt;img alt="Delta Cap until 2019" class="image-process-article-inline-image" loading="lazy" sizes="(min-width: 1536x) 1020px, (min-width: 1280px) 850px, (min-width: 1024px) 800px, (min-width: 768px) 800px, (min-width: 640px) 800px, 100vw" src="https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/800w/delta2019.jpg" srcset="https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/300w/delta2019.jpg 300w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/600w/delta2019.jpg 600w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/800w/delta2019.jpg 800w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/1600w/delta2019.jpg 1600w"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="3-month-coin-days-destroyed"&gt;3 month coin days destroyed&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/images/btc_price_charts/3monthCoindaysDestroyed.png"&gt;&lt;img alt="bitcoin 3 month coin days destroyed" class="image-process-article-inline-image" loading="lazy" sizes="(min-width: 1536x) 1020px, (min-width: 1280px) 850px, (min-width: 1024px) 800px, (min-width: 768px) 800px, (min-width: 640px) 800px, 100vw" src="https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/800w/3monthCoindaysDestroyed.png" srcset="https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/300w/3monthCoindaysDestroyed.png 300w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/600w/3monthCoindaysDestroyed.png 600w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/800w/3monthCoindaysDestroyed.png 800w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/1600w/3monthCoindaysDestroyed.png 1600w"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="double-top"&gt;Double top&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/images/btc_price_charts/woobull_double_top_first_top_now.jpg"&gt;&lt;img alt="bitcoin historical double tops" class="image-process-article-inline-image" loading="lazy" sizes="(min-width: 1536x) 1020px, (min-width: 1280px) 850px, (min-width: 1024px) 800px, (min-width: 768px) 800px, (min-width: 640px) 800px, 100vw" src="https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/800w/woobull_double_top_first_top_now.jpg" srcset="https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/300w/woobull_double_top_first_top_now.jpg 300w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/600w/woobull_double_top_first_top_now.jpg 600w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/800w/woobull_double_top_first_top_now.jpg 800w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/1600w/woobull_double_top_first_top_now.jpg 1600w"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="similarities-to-previous-bull-runs"&gt;Similarities to previous bull runs&lt;/h2&gt;
&lt;p&gt;Version 1:
&lt;a href="https://johnmathews.eu/images/btc_price_charts/bull_run_comparison.jpg"&gt;&lt;img alt="bitcoin price comparison of historical bullruns" class="image-process-article-inline-image" loading="lazy" sizes="(min-width: 1536x) 1020px, (min-width: 1280px) 850px, (min-width: 1024px) 800px, (min-width: 768px) 800px, (min-width: 640px) 800px, 100vw" src="https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/800w/bull_run_comparison.jpg" srcset="https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/300w/bull_run_comparison.jpg 300w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/600w/bull_run_comparison.jpg 600w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/800w/bull_run_comparison.jpg 800w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/1600w/bull_run_comparison.jpg 1600w"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Version 2:
&lt;a href="https://johnmathews.eu/images/btc_price_charts/bull_run_comparison2.jpeg"&gt;&lt;img alt="bitcoin price comparison of historical bullruns" class="image-process-article-inline-image" loading="lazy" sizes="(min-width: 1536x) 1020px, (min-width: 1280px) 850px, (min-width: 1024px) 800px, (min-width: 768px) 800px, (min-width: 640px) 800px, 100vw" src="https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/800w/bull_run_comparison2.jpeg" srcset="https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/300w/bull_run_comparison2.jpeg 300w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/600w/bull_run_comparison2.jpeg 600w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/800w/bull_run_comparison2.jpeg 800w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/1600w/bull_run_comparison2.jpeg 1600w"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Halving model:
&lt;a href="https://johnmathews.eu/images/btc_price_charts/halving_model.jpg"&gt;&lt;img alt="bitcoin historical price oriented around historical halving" class="image-process-article-inline-image" loading="lazy" sizes="(min-width: 1536x) 1020px, (min-width: 1280px) 850px, (min-width: 1024px) 800px, (min-width: 768px) 800px, (min-width: 640px) 800px, 100vw" src="https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/800w/halving_model.jpg" srcset="https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/300w/halving_model.jpg 300w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/600w/halving_model.jpg 600w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/800w/halving_model.jpg 800w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/1600w/halving_model.jpg 1600w"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;12 Month &lt;span class="caps"&gt;RSI&lt;/span&gt; comparison
&lt;a href="https://johnmathews.eu/images/btc_price_charts/rsi_comparison.jpg"&gt;&lt;img alt="bitocin historical RSI" class="image-process-article-inline-image" loading="lazy" sizes="(min-width: 1536x) 1020px, (min-width: 1280px) 850px, (min-width: 1024px) 800px, (min-width: 768px) 800px, (min-width: 640px) 800px, 100vw" src="https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/800w/rsi_comparison.jpg" srcset="https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/300w/rsi_comparison.jpg 300w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/600w/rsi_comparison.jpg 600w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/800w/rsi_comparison.jpg 800w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/1600w/rsi_comparison.jpg 1600w"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="bitcoin-price-history"&gt;Bitcoin price history&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/images/btc_price_charts/btcPriceHistoryLog.png"&gt;&lt;img alt="bitcoin price history" class="image-process-article-inline-image" loading="lazy" sizes="(min-width: 1536x) 1020px, (min-width: 1280px) 850px, (min-width: 1024px) 800px, (min-width: 768px) 800px, (min-width: 640px) 800px, 100vw" src="https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/800w/btcPriceHistoryLog.png" srcset="https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/300w/btcPriceHistoryLog.png 300w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/600w/btcPriceHistoryLog.png 600w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/800w/btcPriceHistoryLog.png 800w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/1600w/btcPriceHistoryLog.png 1600w"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="lowest-price-forward-model"&gt;Lowest price forward model&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/images/btc_price_charts/btc_minimum_price_forecast.jpg"&gt;&lt;img alt="bitcoin lowest price forward" class="image-process-article-inline-image" loading="lazy" sizes="(min-width: 1536x) 1020px, (min-width: 1280px) 850px, (min-width: 1024px) 800px, (min-width: 768px) 800px, (min-width: 640px) 800px, 100vw" src="https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/800w/btc_minimum_price_forecast.jpg" srcset="https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/300w/btc_minimum_price_forecast.jpg 300w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/600w/btc_minimum_price_forecast.jpg 600w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/800w/btc_minimum_price_forecast.jpg 800w, https://johnmathews.eu/images/btc_price_charts/derivatives/article-inline-image/1600w/btc_minimum_price_forecast.jpg 1600w"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="key-metrics-and-terms"&gt;Key metrics and terms&lt;/h1&gt;
&lt;h2 id="average-cap"&gt;Average Cap&lt;/h2&gt;
&lt;p&gt;The “forever” moving average of market cap. It is the cumulative sum total of
daily market cap values divided by the age of the market in days.&lt;/p&gt;
&lt;h2 id="top-cap_2"&gt;Top Cap&lt;/h2&gt;
&lt;p&gt;Average Cap multipled by 35.&lt;/p&gt;
&lt;h2 id="nvt-cap"&gt;&lt;span class="caps"&gt;NVT&lt;/span&gt; Cap&lt;/h2&gt;
&lt;p&gt;A valuation using monetray velocity. Checkout CoinMetrics for more info.&lt;/p&gt;
&lt;h2 id="mvrv_1"&gt;&lt;span class="caps"&gt;MVRV&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;The ratio of Market Value to Realised Value is calculated by dividing Bitcoin’s
market cap by its realised cap.&lt;/p&gt;
&lt;h2 id="realised-cap"&gt;Realised Cap&lt;/h2&gt;
&lt;p&gt;The sum of the products of each &lt;span class="caps"&gt;UTXO&lt;/span&gt; and the market price of Bitcoin when the &lt;span class="caps"&gt;UTXO&lt;/span&gt; was generated.&lt;/p&gt;
&lt;h2 id="market-cap"&gt;Market Cap&lt;/h2&gt;
&lt;p&gt;The price of the most recent Bitcoin transaction multipled by the number of Bitcoin&lt;/p&gt;
&lt;h2 id="utxo"&gt;&lt;span class="caps"&gt;UTXO&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Unspent Transaction Outputs&lt;/em&gt;. These are kind of like unspent coins. If you have
1.5 &lt;span class="caps"&gt;BTC&lt;/span&gt; then you might have bought 2 and sold 0.5. The total value of UTXOs in
your wallet will be 1.5.&lt;/p&gt;
&lt;h2 id="sopr_1"&gt;&lt;span class="caps"&gt;SOPR&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;Spent Output Profit Ratio&lt;/em&gt; is a measure of the average profit or loss on a
coin. Is a coin is moved when the price is higher than when it was received the
&lt;span class="caps"&gt;SOPR&lt;/span&gt; increases, if a coin is moved when the price is lower than when the coin
was received then &lt;span class="caps"&gt;SOPR&lt;/span&gt; decreases.&lt;/p&gt;
&lt;p&gt;It won’t be accurate for individual coins but in aggregate it gives an idea of
whether coins are being sold at a loss or for profit.&lt;/p&gt;
&lt;p&gt;Market participants who have owned &lt;span class="caps"&gt;BTC&lt;/span&gt; for 3 months behave differently to those
that have held &lt;span class="caps"&gt;BTC&lt;/span&gt; for 3 years. A more experienced investor will likely make
more measured and less rash decisions.&lt;/p&gt;
&lt;p&gt;By segregating the UTXOs according to age you can compare old coins and new
coins, experienced and inexperienced investors (in aggregate).&lt;/p&gt;
&lt;p&gt;Weak hands will sell before stronger hands, and when market price decrease it’s
useful to know aggregate age data for the coins being sold. If coins are moving
from young wallets then the selling is likely much less significant than if
coins are being moved onto exchanges from old wallets.&lt;/p&gt;
&lt;h2 id="asopr"&gt;aSOPR&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;Adjusted Spent Output Profit Ratio&lt;/em&gt; is the same as &lt;span class="caps"&gt;SOPR&lt;/span&gt; but it ignores
coins less than 1 hour old.&lt;/p&gt;
&lt;p&gt;If profits are taken by old coins, aSOPR trends higher. It will trend lower
when older (and therefore profitable) coins remain dormant.&lt;/p&gt;
&lt;p&gt;The higher aSOPR is, the more profit has been taken off the table.&lt;/p&gt;
&lt;p&gt;When aSOPR is less than 1, spent coints are moved at an aggregate loss.&lt;/p&gt;
&lt;h2 id="urpd"&gt;&lt;span class="caps"&gt;URPD&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;span class="caps"&gt;UTXO&lt;/span&gt; Realised Price Distribution&lt;/em&gt; - If a lot of coins have moved within a
particular price band, it is likely that there is strong price support and
resistance at this price.&lt;/p&gt;
&lt;p&gt;This would be truer and more reliable in a mature market. Because the market
for Bitcoin is expanding so rapidly and the price is so volatile, the attitudes
and expectations of market participants is also much more malleable than in
traditional finance. For example, what was considered a very high price 12
months ago would be considered a disaster today.&lt;/p&gt;
&lt;h2 id="rsi"&gt;&lt;span class="caps"&gt;RSI&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;Relative Strength Index&lt;/em&gt; is borrowed directly from traditional finance.
You can calculate it over different time periods.&lt;/p&gt;
&lt;h2 id="miner-net-position"&gt;Miner Net Position&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Miner Net Position&lt;/em&gt; shows the degree to which, on aggregate, Bitcoin miners
are profiting from the coins they’ve generated from mining. Miners are expected
to be among the most bullish of all market participants, and therefore it is
notable when they start moving coins from their mining wallets into exchange wallets.&lt;/p&gt;
&lt;h2 id="stock-to-flow"&gt;Stock-to-Flow&lt;/h2&gt;
&lt;p&gt;A stock to flow model is used to measure the scarcity of a commodity. It’s a
calculation based on the ratio of existing supply and how much
is being produced. The higher the ratio, the longer it will take for supply
to meet existing demand.&lt;/p&gt;
&lt;p&gt;Gold has a stock to flow ratio of 66, which means it would take 66 years at
the current rate of production to produce the amount of gold currently in
circulation. Silver has a &lt;span class="caps"&gt;S2F&lt;/span&gt; ratio of 74. &lt;span class="caps"&gt;BTC&lt;/span&gt; has a &lt;span class="caps"&gt;S2F&lt;/span&gt; of about 50.&lt;/p&gt;
&lt;h1 id="background"&gt;Background&lt;/h1&gt;
&lt;p&gt;Over the past 8 years, Bitcoin has gone through phases of rapid price increase
followed by periods of rapid decrease. The price has been driven by increasing
market size and a decreasing rate of issuance, and has been so volatile
(compared to traditional finance) that “1 month in cryptocurrency markets is
like 1 year in traditional markets”. However volatility is decreasing and we
are seeing lower highs and higher lows during each subsequent market cycle.&lt;/p&gt;
&lt;p&gt;The single biggest factor driving multi-year market cycles appears to be the
decreasing rate of supply increase (the issuance rate). The last 3 halvings&lt;sup id="sf-when-bitcoin-top-1-back"&gt;&lt;a class="simple-footnote" href="#sf-when-bitcoin-top-1" title="Every 210,000 blocks, the number of bitcoin awarded to the miner for successfully adding a block is halved. The last halving occurred in May 2020 and the rate of issuance halved from 12.5 BTC/block to 6.25 BTC/block"&gt;1&lt;/a&gt;&lt;/sup&gt; seem to have provoked the last
3 bull cycles. We are in the third bull cycle now (April 2021) and I fully
expect it to be followed by a bear cycle.&lt;/p&gt;
&lt;p&gt;As an amateur investor, I want to buy low and sell high. I’d like to time the
top and bottom of the market with reasonable accuracy, just like everyone else.
But I’m aware that my methods are less nuanced than professional traders and
analysts - I have access to less data than them and I’m not willing to put in
as much effort as they are. I’m happy to do this
&lt;a href="https://en.wikipedia.org/wiki/Pareto_principle"&gt;Pareto&lt;/a&gt; style - I’ll give it
20% of my maximum effort and I’ll be happy with 80% of an ideal result&lt;sup id="sf-when-bitcoin-top-2-back"&gt;&lt;a class="simple-footnote" href="#sf-when-bitcoin-top-2" title="I realise this probably isn’t, strictly, what Mr. Pareto was thinking when he published his research. I hope you get my intention."&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;This is a review of what I consider to be the best sources of metrics and
analysis that I’ve come across. All the resources used in this article are
attributed to the original author and have been made freely available on
Twitter. I hope its &lt;span class="caps"&gt;OK&lt;/span&gt; for me to repost them here, if it’s not then
let me know and I’ll edit the post.&lt;/p&gt;
&lt;h3 id="hopefully-helpful-links"&gt;Hopefully helpful links&lt;/h3&gt;
&lt;p&gt;This article assumes some familiarity with blockchains and financial markets.
Some more general articles on this site are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://johnmathews.eu/bitcoin-vs-gold.html"&gt;Bitcoin compared to Gold&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://johnmathews.eu/buying-btc.html"&gt;How to buy bitcoin&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="analysts"&gt;Analysts&lt;/h1&gt;
&lt;p&gt;These insights, metrics and charts are the work of the following people and organisations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://twitter.com/woonomic"&gt;Willy Woo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/nsquaredcrypto"&gt;Timothy Peterson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/100trillionUSD"&gt;PlanB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/glassnode"&gt;Glass Node&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/rationalroot"&gt;therationalroot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/coinmetrics"&gt;CoinMetrics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/TimmerFidelity/status/1382026394541174787?s=20"&gt;Jurrien Timmer&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-when-bitcoin-top-1"&gt;Every 210,000
blocks, the number of bitcoin awarded to the miner for successfully adding a
block is halved. The last halving occurred in May 2020 and the rate of issuance
halved from 12.5 &lt;span class="caps"&gt;BTC&lt;/span&gt;/block to 6.25 &lt;span class="caps"&gt;BTC&lt;/span&gt;/block &lt;a class="simple-footnote-back" href="#sf-when-bitcoin-top-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-when-bitcoin-top-2"&gt;I
realise this probably isn’t, strictly, what Mr. Pareto was thinking when he
published his research. I hope you get my intention. &lt;a class="simple-footnote-back" href="#sf-when-bitcoin-top-2-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Cryptocurrencies"/><category term="bitcoin"/><category term="finance"/><category term="markets"/></entry><entry><title>where command</title><link href="https://johnmathews.eu/where-command.html" rel="alternate"/><published>2021-04-25T22:39:05+02:00</published><updated>2021-04-25T22:39:05+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-25:/where-command.html</id><summary type="html"/><content type="html">&lt;p&gt;Show all known locations of an executable
&lt;code&gt;where &lt;executable&gt;&lt;/executable&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;See a list of all builtin commands
&lt;code&gt;man where&lt;/code&gt;&lt;/p&gt;</content><category term="snippet"/><category term="unix"/><category term="macOS"/><category term="cli"/><category term="bash"/></entry><entry><title>Reading - April 2021</title><link href="https://johnmathews.eu/reading-april-2021.html" rel="alternate"/><published>2021-04-21T12:55:20+02:00</published><updated>2021-04-21T12:55:20+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-21:/reading-april-2021.html</id><summary type="html"/><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-architecture-behind-a-one-person-tech-startup"&gt;The Architecture Behind A One-Person Tech Startup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#boring-tech-behind-a-one-person-saas"&gt;Boring tech behind a one person SaaS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#djangos-place-in-a-web-development-world"&gt;Djangos place in a web development world&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cache-invalidation"&gt;&lt;s&gt;Cache invalidation&lt;/s&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vim-abbreviations"&gt;Vim abbreviations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#to-fix-the-social-sciences-look-to-the-dark-ages-of-medicine"&gt;&lt;s&gt;To fix the social sciences, look to the “dark ages” of medicine&lt;/s&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#emotional-resilience-in-leadership-report"&gt;Emotional resilience in leadership report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-virtues-of-a-programmer"&gt;3 virtues of a programmer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#is-webassembly-magic-performance-pixie-dust"&gt;Is WebAssembly magic performance pixie dust?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#yamauchi-no10-family-office"&gt;Yamauchi No.10 Family Office&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#improve-and-extend-your-text-objects-with-targetsvim"&gt;Improve and Extend Your Text Objects With targets.vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-vim-guide-for-adept-users"&gt;A Vim Guide for Adept Users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deep-dive-in-cors"&gt;Deep dive in &lt;span class="caps"&gt;CORS&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-tty-demystified"&gt;The &lt;span class="caps"&gt;TTY&lt;/span&gt; demystified&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Articles and blog posts I saved to read later:&lt;/p&gt;
&lt;h1 id="the-architecture-behind-a-one-person-tech-startup"&gt;&lt;a href="https://anthonynsimon.com/blog/one-man-saas-architecture/"&gt;The Architecture Behind A One-Person Tech Startup&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;An article by &lt;a href="https://twitter.com/anthonynsimon"&gt;Anthony Najjar Simon&lt;/a&gt; about how he runs his one-man SaaS using Django.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Low stress, one-person company, run from a flat.&lt;/li&gt;
&lt;li&gt;Self-funded, taking things slow - &lt;em&gt;he likes taking things slow&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Grateful to be standing on the shoulders of the open source giants who went ahead and made the &lt;span class="caps"&gt;OSS&lt;/span&gt; stack we all enjoy and benefit from.&lt;/li&gt;
&lt;li&gt;Your own context matters when choosing a tech stack. There is no “holy grail”. I guess this means that you should use what you’re familiar with and what is &lt;em&gt;boring&lt;/em&gt; for you.&lt;/li&gt;
&lt;li&gt;Uses K8s on &lt;span class="caps"&gt;AWS&lt;/span&gt;. He says “dont fall into the trap of thinking you need to use it too” - expertise with these tools was learnt over several years fighting fires on the day job.&lt;/li&gt;
&lt;li&gt;Productive because he used the tools he is most familiar with and he can focus on shipping.&lt;/li&gt;
&lt;li&gt;Django, Celery, PostgreSQL, Python, &lt;span class="caps"&gt;AWS&lt;/span&gt;, Redis. - same as MoneyBar and PipPip.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="boring-tech-behind-a-one-person-saas"&gt;&lt;a href="https://www.listennotes.com/blog/the-boring-technology-behind-a-one-person-23/"&gt;Boring tech behind a one person SaaS&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;The tech-stack keeps evolving&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;Boring” means “what I’m familiar with so that I can focus on the business”&lt;/li&gt;
&lt;li&gt;Most of his time is spent talking to people and thinking. He spends 15% of his time on engineering. Probably it was more when he was setting stuff up.&lt;/li&gt;
&lt;li&gt;The methods described in the post are &lt;strong&gt;definitely not the best way&lt;/strong&gt;. &lt;em&gt;It’s just one way of doing engineering in a very specific type of business. It’s not the only way.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Django, Celery, PostgreSQL, Python, &lt;span class="caps"&gt;AWS&lt;/span&gt;, Redis. - same as MoneyBar and PipPip.&lt;/li&gt;
&lt;li&gt;Uses Ansible for provisioning machines. - &lt;span class="caps"&gt;YAML&lt;/span&gt; files. Should look into this.&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;Good enough for now”&lt;/li&gt;
&lt;li&gt;Doesn’t use &lt;span class="caps"&gt;CI&lt;/span&gt; tools, he uses Ansible with a shell script he wrote.&lt;/li&gt;
&lt;li&gt;Uses &lt;a href="https://www.datadoghq.com/"&gt;Datadog&lt;/a&gt; for monitoring and alerting, and PagerDuty.&lt;/li&gt;
&lt;li&gt;Uses &lt;a href="https://rollbar.com/"&gt;Rollbar&lt;/a&gt;, which seems similar to Sentry.&lt;/li&gt;
&lt;li&gt;Uses Slack, not to talk with humans, but integrations with Rollbar and Datadog, and also &lt;a href="https://api.slack.com/messaging/webhooks"&gt;slack incoming webhooks&lt;/a&gt; to be notified when someone signs up or does something interesting like deletes a thing.&lt;/li&gt;
&lt;li&gt;Make a “ding” sound whenever someone signs up.&lt;/li&gt;
&lt;li&gt;He’s &lt;em&gt;always very careful about operational stuff&lt;/em&gt; to prevent downtime and outages. Servers are over-provisioned to protect against spikes caused by sudden media interest.&lt;/li&gt;
&lt;li&gt;Avoids working from home or cafe cos its more productive in an office. Productivity is important - make every minute count. He doesn’t often work more than 8 hours/day.&lt;/li&gt;
&lt;li&gt;He optimizes for spending less time and making money instead of more time and saving money.&lt;/li&gt;
&lt;li&gt;Uses &lt;code&gt;Vagrant&lt;/code&gt; and &lt;code&gt;virtualbox&lt;/code&gt; on an &lt;span class="caps"&gt;MBP&lt;/span&gt; so that dev work is on the same systems as prod infra.&lt;/li&gt;
&lt;li&gt;Uses 1 monolithic repo. Likes this approach.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;He uses contractors&lt;/em&gt;!!&lt;/li&gt;
&lt;li&gt;Usually, the biggest obstacle to building and shipping things is overthinking. What if this, what if that. You are not important at all and no one cares. No one sees. Even if you screw up the initial product launch, no one will care because they’re not looking. Only when you’ve proved that you deserve their attention will you have any attention and visibility.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://hackernoon.com/think-big-start-small-act-fast-6fdab1f771ea"&gt;Think big, start small, act fast&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Use boring technology, or whatever tech you want. Just make sure you’re solving an actual problem.&lt;/li&gt;
&lt;li&gt;Ignore the &lt;a href="https://stevemcconnell.com/articles/cargo-cult-software-engineering/"&gt;cargo cult people&lt;/a&gt; and ignore the noise. Keep calm and carry on.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="djangos-place-in-a-web-development-world"&gt;&lt;a href="https://thenewstack.io/djangos-place-in-a-web-development-world-ruled-by-react/"&gt;Djangos place in a web development world&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Not everything needs to be an &lt;span class="caps"&gt;SPA&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Django is a back-end framework, it’ll work with an front-end framework, because separation of concerns.&lt;/li&gt;
&lt;li&gt;To use django with an &lt;span class="caps"&gt;SPA&lt;/span&gt;, you could use &lt;span class="caps"&gt;DRF&lt;/span&gt;, or just normal views that return &lt;span class="caps"&gt;JSON&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Reading this makes me want to check out React to see what all the fuss is about.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="cache-invalidation"&gt;&lt;s&gt;&lt;a href="https://yihui.org/en/2018/06/cache-invalidation/"&gt;Cache invalidation&lt;/a&gt;&lt;/s&gt;&lt;/h1&gt;
&lt;h1 id="vim-abbreviations"&gt;&lt;a href="https://jovica.org/posts/vim_abbreviations/"&gt;Vim abbreviations&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Cool and all, but not as powerful as snippets I think.&lt;/li&gt;
&lt;li&gt;Auto correcting typos: teh -&amp;gt; the&lt;/li&gt;
&lt;li&gt;Expanding phrases: kr -&amp;gt; kind regards&lt;/li&gt;
&lt;li&gt;Multi-line text expansion.&lt;/li&gt;
&lt;li&gt;It really seems similar to what I’m using UltiSnips for.&lt;/li&gt;
&lt;li&gt;I found &lt;a href="https://stackoverflow.com/questions/30266587/snippets-vs-abbreviations-in-vim"&gt;this&lt;/a&gt; question on &lt;span class="caps"&gt;SO&lt;/span&gt; comparing abbreviations and snippets. &lt;span class="caps"&gt;TLDR&lt;/span&gt;: It’s easier to add and maintain snippets than abbreviations, and you have less boilerplate with snippets than abbreviations, especially in complex cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="to-fix-the-social-sciences-look-to-the-dark-ages-of-medicine"&gt;&lt;s&gt;&lt;a href="https://thereader.mitpress.mit.edu/social-sciences-dark-ages/"&gt;To fix the social sciences, look to the “dark ages” of medicine&lt;/a&gt;&lt;/s&gt;&lt;/h1&gt;
&lt;h1 id="emotional-resilience-in-leadership-report"&gt;&lt;a href="https://docs.google.com/document/d/18FfZ86PGA_uSFf425EzKXAmiFQLFBPqjqPN7iu1TZRw/preview?pru=AAABdEZGCv8*_gdPBrQH8tAPyvMfLk6Unw"&gt;Emotional resilience in leadership report&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id="3-virtues-of-a-programmer"&gt;&lt;a href="http://threevirtues.com/"&gt;3 virtues of a programmer&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Laziness - The quality that makes you go to great effort to reduce overall energy expenditure. It makes you write labor-saving programs that other people will find useful and document what you wrote so you don’t have to answer so many questions about it.&lt;/li&gt;
&lt;li&gt;Impatience - The anger you feel when the computer is being lazy. This makes you write programs that don’t just react to your needs, but actually anticipate them. Or at least pretend to.&lt;/li&gt;
&lt;li&gt;Hubris - The quality that makes you write (and maintain) programs that other people won’t want to say bad things about.&lt;/li&gt;
&lt;li&gt;Also, I read a quote somewhere saying the mark of a great program is having people use it in ways you didn’t expect, or something like that.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="is-webassembly-magic-performance-pixie-dust"&gt;&lt;a href="https://surma.dev/things/js-to-asc/"&gt;Is WebAssembly magic performance pixie dust?&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id="yamauchi-no10-family-office"&gt;&lt;a href="https://y-n10.com/"&gt;Yamauchi No.10 Family Office&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;A beautifully designed website.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="improve-and-extend-your-text-objects-with-targetsvim"&gt;&lt;a href="https://www.barbarianmeetscoding.com/blog/exploring-vim-plugins-improve-and-extend-your-text-objects-with-targets-vim"&gt;Improve and Extend Your Text Objects With targets.vim&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id="a-vim-guide-for-adept-users"&gt;&lt;a href="https://thevaluable.dev/vim-adept"&gt;A Vim Guide for Adept Users&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;How to manipulate multiple quickfix and location lists.&lt;/li&gt;
&lt;li&gt;What are digraphs and how to use them.&lt;/li&gt;
&lt;li&gt;Useful keystrokes in &lt;span class="caps"&gt;INSERT&lt;/span&gt; mode.&lt;/li&gt;
&lt;li&gt;Useful keystrokes in &lt;span class="caps"&gt;VISUAL&lt;/span&gt; mode.&lt;/li&gt;
&lt;li&gt;Vim regular expressions.&lt;/li&gt;
&lt;li&gt;Using shell commands in Vim.&lt;/li&gt;
&lt;li&gt;Folding content.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="deep-dive-in-cors"&gt;&lt;a href="https://ieftimov.com/post/deep-dive-cors-history-how-it-works-best-practices/"&gt;Deep dive in &lt;span class="caps"&gt;CORS&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id="the-tty-demystified"&gt;&lt;a href="http://www.linusakesson.net/programming/tty/index.php"&gt;The &lt;span class="caps"&gt;TTY&lt;/span&gt; demystified&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ps 1&lt;/code&gt; - see which processes are running or sleeping. &lt;code&gt;WCHAN&lt;/code&gt; tells you which
    kernel event a waiting processing is awaiting.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Non-technical/Journal"/><category term="reading"/></entry><entry><title>Learning - April 2021</title><link href="https://johnmathews.eu/learning-april-2021.html" rel="alternate"/><published>2021-04-21T11:09:19+02:00</published><updated>2021-04-21T11:09:19+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-21:/learning-april-2021.html</id><summary type="html"/><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#google-cloud-platform-service-accounts"&gt;Google Cloud Platform Service Accounts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ansible"&gt;Ansible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ssh"&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vagrant"&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="google-cloud-platform-service-accounts"&gt;&lt;a href="https://www.youtube.com/playlist?list=PLIivdWyY5sqIlPnZ7cvkg2Ck-8ZZ8TA5t"&gt;Google Cloud Platform Service Accounts&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;It seems like I’m looking for some general overview of how roles are managed,
viewed, compared, and inherited.&lt;/p&gt;
&lt;p&gt;How can you tell if a users (or a service accounts) roles are adequate, or
too much or too little for a particular task? And what’s the difference
between a user having some roles, and a user using a service account that
has those roles. &lt;/p&gt;
&lt;p&gt;It would also be nice to have some kind of adversarial test, that would
identify how/if users or service accounts can create identities with more
flexible permissions that their own.&lt;/p&gt;
&lt;p&gt;These short videos are good, but they’re not a complete solution. I’m not sure
where to look next.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube-nocookie.com/embed/xXk1YlkKW_k" title="YouTube video player" width="560"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h1 id="ansible"&gt;&lt;a href="https://www.youtube.com/playlist?list=PL2_OBreMn7FplshFCWYlaN2uS8et9RjNG"&gt;Ansible&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Based on Jeff Geerlings book. There are 15 episodes. Jeff seems like a great
guy. I’m going to try listen to one of these each day.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube-nocookie.com/embed/goclfp6a2IQ" title="YouTube video player" width="560"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h1 id="ssh"&gt;&lt;a href="https://www.youtube.com/watch?v=hQWRp-FdTpc&amp;amp;list=PLQGMHRkCCyDw5arrPInZT_T8TbDdzmeBp&amp;amp;index=4"&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;br/&gt;&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube-nocookie.com/embed/hQWRp-FdTpc" title="YouTube video player" width="560"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/ssh-essentials-working-with-ssh-servers-clients-and-keys"&gt;This&lt;/a&gt;
is also a very useful article. I made notes from it in another &lt;a href="https://johnmathews.eu/ssh-notes.html"&gt;post&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="vagrant"&gt;&lt;a href="https://www.youtube.com/watch?v=vBrezgo&amp;amp;list=PLQGMHRkCCyDw5arrPInZT_T8TbDdzmeBp&amp;amp;index=2X"&gt;Vagrant&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;br/&gt;&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube-nocookie.com/embed/vBreXjkizgo" title="YouTube video player" width="560"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Good for local development. (Especially when on aeroplanes?)&lt;/li&gt;
&lt;li&gt;Not as good for cloud providers as Terraform.&lt;/li&gt;
&lt;li&gt;No more snowflake servers.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Technical/Developer Tools"/><category term="learning"/><category term="youtube"/><category term="ansible"/><category term="ssh"/><category term="vagrant"/><category term="gcp"/><category term="service-accounts"/><category term="iam"/></entry><entry><title>Tweets - April 2021</title><link href="https://johnmathews.eu/tweets-april-2021.html" rel="alternate"/><published>2021-04-21T10:39:48+02:00</published><updated>2021-04-21T10:39:48+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-21:/tweets-april-2021.html</id><summary type="html"/><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#front-end"&gt;Front-End&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#entrepreneurship"&gt;Entrepreneurship&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#mental-models"&gt;Mental Models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#agency"&gt;Agency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#razors"&gt;Razors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#crypto"&gt;Crypto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="front-end"&gt;Front-End&lt;/h1&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p dir="ltr" lang="en"&gt; 6 website for top landing page inspiration&lt;br/&gt;&lt;br/&gt;• onepagelove .com by &lt;a href="https://twitter.com/robhope?ref_src=twsrc%5Etfw"&gt;@robhope&lt;/a&gt; &lt;br/&gt;• lapa .ninja by &lt;a href="https://twitter.com/nguyendangtinh?ref_src=twsrc%5Etfw"&gt;@nguyendangtinh&lt;/a&gt; &lt;br/&gt;• landingfolio .com by &lt;a href="https://twitter.com/dannypostmaa?ref_src=twsrc%5Etfw"&gt;@dannypostmaa&lt;/a&gt;&lt;br/&gt;• saasframe .io by &lt;a href="https://twitter.com/AntoineMilkoff?ref_src=twsrc%5Etfw"&gt;@AntoineMilkoff&lt;/a&gt;&lt;br/&gt;• saaslandingpage .com by &lt;a href="https://twitter.com/Cruip_com?ref_src=twsrc%5Etfw"&gt;@Cruip_com&lt;/a&gt; &lt;br/&gt;• saaspages .xyz by &lt;a href="https://twitter.com/Versoly?ref_src=twsrc%5Etfw"&gt;@Versoly&lt;/a&gt;&lt;/p&gt;— Jim Raptis (@d__raptis) &lt;a href="https://twitter.com/d__raptis/status/1382240459288895491?ref_src=twsrc%5Etfw"&gt;April 14, 2021&lt;/a&gt; &lt;/blockquote&gt;
&lt;p&gt;&lt;script async="" charset="utf-8" src="https://platform.twitter.com/widgets.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h1 id="entrepreneurship"&gt;Entrepreneurship&lt;/h1&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p dir="ltr" lang="en"&gt;anyone interested in a fun &lt;a href="https://twitter.com/microacquire?ref_src=twsrc%5Etfw"&gt;@microacquire&lt;/a&gt; challenge?&lt;br/&gt;&lt;br/&gt;maybe 90 or 180 days from start to finish to build and sell a tiny company in public?&lt;br/&gt;&lt;br/&gt;would be really great M&amp;amp;A practice for my fellow founders&lt;/p&gt;— Jim Bisenius (@jim_bisenius) &lt;a href="https://twitter.com/jim_bisenius/status/1382169652403564546?ref_src=twsrc%5Etfw"&gt;April 14, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;script async="" charset="utf-8" src="https://platform.twitter.com/widgets.js"&gt;&lt;/script&gt; &lt;/p&gt;
&lt;h2 id="mental-models"&gt;Mental Models&lt;/h2&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p dir="ltr" lang="en"&gt;Tobi's favorite example of &lt;span class="caps"&gt;FIRST&lt;/span&gt; &lt;span class="caps"&gt;PRINCIPLES&lt;/span&gt; is a Truck driver.&lt;br/&gt;&lt;br/&gt;His truck was sat still for 8 &lt;span class="caps"&gt;HOURS&lt;/span&gt; on &lt;span class="caps"&gt;THANKSGIVING&lt;/span&gt; waiting for his cargo to be unloaded when he realized…&lt;br/&gt;&lt;br/&gt;“Why not take the &lt;span class="caps"&gt;WHOLE&lt;/span&gt; trailer off the back of my ship rather than unloading + reloading each item?”&lt;/p&gt;— George Mack (@george__mack) &lt;a href="https://twitter.com/george__mack/status/1262509025515786248?ref_src=twsrc%5Etfw"&gt;May 18, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;script async="" charset="utf-8" src="https://platform.twitter.com/widgets.js"&gt;&lt;/script&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p dir="ltr" lang="en"&gt;&lt;span class="caps"&gt;LUTKE&lt;/span&gt; &lt;span class="caps"&gt;LEARNING&lt;/span&gt; 6 - &lt;span class="caps"&gt;TALENT&lt;/span&gt; &lt;span class="caps"&gt;STACK&lt;/span&gt; &lt;span class="caps"&gt;LED&lt;/span&gt; &lt;span class="caps"&gt;BY&lt;/span&gt; &lt;span class="caps"&gt;CURIOSITY&lt;/span&gt; &amp;gt; &lt;span class="caps"&gt;MBA&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;He didn't have an &lt;span class="caps"&gt;MBA&lt;/span&gt;. He didn't grind 100-hour workweeks. &lt;br/&gt;&lt;br/&gt;Instead, he played video games (which led to coding) and he snowboarded (which led to an online snowboarding store). &lt;br/&gt;&lt;br/&gt;This 'Talent Stack' led to Shopify.&lt;/p&gt;— George Mack (@george__mack) &lt;a href="https://twitter.com/george__mack/status/1262509059841953801?ref_src=twsrc%5Etfw"&gt;May 18, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async="" charset="utf-8" src="https://platform.twitter.com/widgets.js"&gt;&lt;/script&gt; &lt;/p&gt;
&lt;p&gt;A super long thread, worth reading it all:
&lt;blockquote class="twitter-tweet"&gt;&lt;p dir="ltr" lang="en"&gt;Josh Waitzkin might be the most &lt;span class="caps"&gt;INTERESTING&lt;/span&gt; person alive.&lt;br/&gt;&lt;br/&gt;He doesn't have Twitter. And he barely uses the internet.&lt;br/&gt;&lt;br/&gt;I've compiled my favorite 5 &lt;span class="caps"&gt;MENTAL&lt;/span&gt; &lt;span class="caps"&gt;MODELS&lt;/span&gt; of his below.&lt;br/&gt;&lt;br/&gt;&lt;span class="caps"&gt;THREAD&lt;/span&gt;…&lt;/p&gt;— George Mack (@george__mack) &lt;a href="https://twitter.com/george__mack/status/1292206014746558471?ref_src=twsrc%5Etfw"&gt;August 8, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async="" charset="utf-8" src="https://platform.twitter.com/widgets.js"&gt;&lt;/script&gt; &lt;/p&gt;
&lt;h2 id="agency"&gt;Agency&lt;/h2&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p dir="ltr" lang="en"&gt;1/ &lt;span class="caps"&gt;HIGH&lt;/span&gt; &lt;span class="caps"&gt;AGENCY&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;Once you &lt;span class="caps"&gt;SEE&lt;/span&gt; it - you can never &lt;span class="caps"&gt;UNSEE&lt;/span&gt; it. &lt;br/&gt;&lt;br/&gt;Arguedbly the most important personality trait you can foster. &lt;br/&gt;&lt;br/&gt;I've thought about this concept every week for the last two years since I heard &lt;a href="https://twitter.com/EricRWeinstein?ref_src=twsrc%5Etfw"&gt;@EricRWeinstein&lt;/a&gt; discuss it on &lt;a href="https://twitter.com/tferriss?ref_src=twsrc%5Etfw"&gt;@tferriss&lt;/a&gt;' podcast. &lt;br/&gt;&lt;br/&gt;&lt;span class="caps"&gt;THREAD&lt;/span&gt;…&lt;/p&gt;— George Mack (@george__mack) &lt;a href="https://twitter.com/george__mack/status/1068238562443841538?ref_src=twsrc%5Etfw"&gt;November 29, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;script async="" charset="utf-8" src="https://platform.twitter.com/widgets.js"&gt;&lt;/script&gt; &lt;/p&gt;
&lt;h2 id="razors"&gt;Razors&lt;/h2&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p dir="ltr" lang="en"&gt;&lt;span class="caps"&gt;THREAD&lt;/span&gt;: 15 of the most useful razors and rules I've found.&lt;br/&gt;&lt;br/&gt;Rules of thumb that simplify decisions.&lt;/p&gt;— George Mack (@george__mack) &lt;a href="https://twitter.com/george__mack/status/1350513143387189248?ref_src=twsrc%5Etfw"&gt;January 16, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;script async="" charset="utf-8" src="https://platform.twitter.com/widgets.js"&gt;&lt;/script&gt; &lt;/p&gt;
&lt;h1 id="crypto"&gt;Crypto&lt;/h1&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p dir="ltr" lang="en"&gt; Now let’s compare this to the stock-to-flow model. Below I added in the &lt;span class="caps"&gt;S2F&lt;/span&gt; model, which is the aforementioned inflation rate regressed against price. /10 &lt;a href="https://t.co/eGRXIux6K2"&gt;pic.twitter.com/eGRXIux6K2&lt;/a&gt;&lt;/p&gt;— Jurrien Timmer (@TimmerFidelity) &lt;a href="https://twitter.com/TimmerFidelity/status/1382026424014548995?ref_src=twsrc%5Etfw"&gt;April 13, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async="" charset="utf-8" src="https://platform.twitter.com/widgets.js"&gt;&lt;/script&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p dir="ltr" lang="en"&gt;&lt;a href="https://twitter.com/hashtag/Bitcoin?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Bitcoin&lt;/a&gt; is looking strong at &lt;span class="caps"&gt;RSI&lt;/span&gt; 92. Still not above &lt;span class="caps"&gt;RSI&lt;/span&gt; 95 like 2017, 2013 and 2011 bull markets. I calculated &lt;span class="caps"&gt;BTC&lt;/span&gt; price needed for &lt;span class="caps"&gt;RSI&lt;/span&gt; 95 at April close: $92K. Let's see what the Coinbase &lt;span class="caps"&gt;IPO&lt;/span&gt; will do today🚀 &lt;a href="https://t.co/UTvdFWFhDK"&gt;pic.twitter.com/UTvdFWFhDK&lt;/a&gt;&lt;/p&gt;— PlanB (@100trillionUSD) &lt;a href="https://twitter.com/100trillionUSD/status/1382282077429719040?ref_src=twsrc%5Etfw"&gt;April 14, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;script async="" charset="utf-8" src="https://platform.twitter.com/widgets.js"&gt;&lt;/script&gt; &lt;/p&gt;</content><category term="Non-technical/Journal"/><category term="twitter"/></entry><entry><title>SSH-Notes</title><link href="https://johnmathews.eu/ssh-notes.html" rel="alternate"/><published>2021-04-21T10:21:15+02:00</published><updated>2021-04-21T10:21:15+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-21:/ssh-notes.html</id><summary type="html"/><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#background"&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#authentication"&gt;Authentication&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#passwords-and-keys"&gt;Passwords and Keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#handshake"&gt;Handshake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="background"&gt;Background&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Secure Shell lets you securely connect to remote servers. You connect using
   an account that exists on the remote server. Once you’ve connected you’ll be
   dropped into a shell session.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The computer you connect from is the “local” or “client” computer. The
   computer you connect to is the “host” or the “server”.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you’re connected to the server using &lt;span class="caps"&gt;SSH&lt;/span&gt;, any commands you input from
   the client are sent securely and privately (through a “tunnel”) to the remote
   computer, where the commands are executed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt; is implemented using the client-server model. The server must be running
   a small app to listen for &lt;span class="caps"&gt;SSH&lt;/span&gt; connections. This kind of app is
   called a daemon (pronounced day-mon). For &lt;span class="caps"&gt;SSH&lt;/span&gt; to work, the host must be
   running the &lt;span class="caps"&gt;SSH&lt;/span&gt; daemon. The &lt;span class="caps"&gt;SSH&lt;/span&gt; daemon listens for connections on a specific
   port (22), authenticates connections requests, and (if the connection
   request is approved) it will spawn the correct environment. The correct
   environment is a terminal session.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The client (the computer you connect from) must be running an &lt;span class="caps"&gt;SSH&lt;/span&gt; client,
   which is a small app that can communicate using the &lt;span class="caps"&gt;SSH&lt;/span&gt; protocol. (A
   protocol is a set of rules.) It needs to be able to receive information
   about which host to connect to, which user to connect as and which
   credentials to use when trying to connect.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="authentication"&gt;Authentication&lt;/h1&gt;
&lt;h2 id="passwords-and-keys"&gt;Passwords and Keys&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Clients authenticate using passwords or keys. Passwords are less secure than
   keys. Keys are very secure. You can also connect using no authentication by
   specifying a particular &lt;span class="caps"&gt;IP&lt;/span&gt; address I think.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Passwords are encrypted, and are conceptually familiar, but can (and will)
   be brute forced. There are tools that will block repeated attempts or
   block/allow authentication attempts from particular &lt;span class="caps"&gt;IP&lt;/span&gt; addresses.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt; keys using public and private (or secret) key pairs and are very secure.
   Keys are generated in pairs.  The public key can be shared freely without
   concern. The secret key must be kept as secure and secret as a password.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To authenticate using a key pair, the client must have both keys (a key
   pair) on their computer. The server must have the public key in a file
   called &lt;code&gt;authorized_keys&lt;/code&gt;. If the server has the private key then something
   has gone wrong and you should be alarmed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The server stores the public keys of users who can connect as a particular
   user in the file &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;. The file contains a list of
   public keys, one public key on each row.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The default location to store the public key on the remote server is in the
   users home folder in a subdirectory called &lt;code&gt;.ssh/authorized_keys&lt;/code&gt;. The full
   path would be &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="handshake"&gt;Handshake&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When a client wants to connect to a server using &lt;span class="caps"&gt;SSH&lt;/span&gt;, it tells the server
   which public key to use. The server then checks in the &lt;code&gt;authorized_keys&lt;/code&gt; file
   for the public key. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A unique session &lt;span class="caps"&gt;ID&lt;/span&gt; is generated and shared between the client and server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the server has the same public key that the client sent when it  began
   the connection attempt, the server generates a random string and encrypts
   it using the public key. This random string can only be decrypted using the
   private (secret) key associated with the public key.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The server sends the encrypted string to the client. The client decrypts it
   using the secret key and combines the original random string with the
   session &lt;span class="caps"&gt;ID&lt;/span&gt;. The client then hashes the combined string and sends the hash
   back to the server. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The server already has the hash of the string combining the original random
   string and the session &lt;span class="caps"&gt;ID&lt;/span&gt;. If the hash from the client matches the hash on
   the server, the server can be sure that the client has the private key.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/ssh-essentials-working-with-ssh-servers-clients-and-keys"&gt;Source&lt;/a&gt;&lt;/p&gt;</content><category term="Technical/Developer Tools"/><category term="ssh"/><category term="linux"/><category term="security"/></entry><entry><title>alias to real</title><link href="https://johnmathews.eu/alias-real.html" rel="alternate"/><published>2021-04-20T22:40:09+02:00</published><updated>2021-04-20T22:40:09+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-20:/alias-real.html</id><summary type="html"/><content type="html">&lt;p&gt;Make aliased files the real file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; f in &lt;span class="k"&gt;$(&lt;/span&gt;find . -type l -maxdepth &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt; cp --remove-destination &lt;span class="k"&gt;$(&lt;/span&gt;readlink &lt;span class="nv"&gt;$f&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="snippet"/><category term="macos"/><category term="linux"/><category term="cli"/><category term="bash"/></entry><entry><title>ChezMoi</title><link href="https://johnmathews.eu/chezmoi.html" rel="alternate"/><published>2021-04-20T11:46:46+02:00</published><updated>2021-04-20T11:46:46+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-20:/chezmoi.html</id><summary type="html"/><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#background"&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#razor"&gt;Razor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#one-question"&gt;One Question&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#command-reference"&gt;Command Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#links"&gt;Links&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="background"&gt;Background&lt;/h1&gt;
&lt;p&gt;Chezmoi seems to be dotfiles management for power users. Until a few days ago,
when I realised I’d massively broken a lot of things, I’d been putting my
dotfiles in a version controlled directory and using a shell script to generate
symlinks in my home directory.&lt;/p&gt;
&lt;p&gt;This had worked really well for several years. It’s a great system for
maintaining dotfiles on a single machine. But it’s not robust or flexible enough
for managing multiple machines or multiple operating systems.&lt;/p&gt;
&lt;p&gt;Also, it’s not just files that sit in &lt;em&gt;$home&lt;/em&gt; anymore, I need to track
configuration files that live in other places too&lt;sup id="sf-chezmoi-1-back"&gt;&lt;a class="simple-footnote" href="#sf-chezmoi-1" title="For example, every file in $HOME/.vim/ftplugin/ should be version controlled."&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;I needed something more robust and flexible than generating symlinks from a
bash script.&lt;/p&gt;
&lt;h1 id="razor"&gt;Razor&lt;/h1&gt;
&lt;p&gt;I think I read somewhere that when purchasing a new appliance you should buy
the cheapest you think you can get away with, and if that doesn’t work then get
the best you can afford. Moving from a custom bash script to Chezmoi is an
example of this. My custom bash script was the most basic approach, and it
broke badly. Chezmoi seems like the most heavy duty tool for dotfiles management
I could find.&lt;/p&gt;
&lt;p&gt;For example, I think I’m able to encrypt my files using 1Password or similar.
I can use Jinja templates to create scripts for different scenarios. I
don’t even know what that means at the moment. I’ve only scratched the surface
but I’m happily managing dotfiles across different machines and
updating/modifying them safely. Chezmoi (aliased to cm) is free and &lt;span class="caps"&gt;OSS&lt;/span&gt; so I’m
confident it’ll be “my” tool for the next few decades. I’m happy to invest a
couple of hours to learn a few new habits and iron out a few
wrinkles&lt;sup id="sf-chezmoi-2-back"&gt;&lt;a class="simple-footnote" href="#sf-chezmoi-2" title="Happily, it seems like the amount of time required to learn or become familiar with a new tool is decreasing. I guess this is to be expected as experience increases but nonetheless it’s gratifying to realise.Dotfiles management was a fairly new and interesting concept when I first began symlinking into my home directory. It still feels amazing to bootstrap a fresh machine and have it feel like home in just a few minutes, but the technicalities of it are now familiar."&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h1 id="one-question"&gt;One Question&lt;/h1&gt;
&lt;p&gt;I don’t understand why &lt;code&gt;chezmoi cd&lt;/code&gt; creates a new shell in order to jump into the
Chezmoi directory. Why not simply &lt;code&gt;cd&lt;/code&gt; into the Chezmoi directory? What’s the
advantage/necessity of a new shell?&lt;/p&gt;
&lt;p&gt;You have to remember to &lt;code&gt;exit&lt;/code&gt; after you’ve done whatever you went there to do,
but my habit is to &lt;code&gt;cd&lt;/code&gt; or &lt;code&gt;z ..&lt;/code&gt;. I guess it’s nice to exit and then
immediately go back to where ever you were before, but there are other ways of
doing that - you could write the current directory to an environment variable.
It seems unnecessarily complex.&lt;/p&gt;
&lt;h1 id="command-reference"&gt;Command Reference&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Show which files have changed → &lt;strong&gt;cm status&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List of managed files → &lt;strong&gt;cm managed&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List of unmanaged files → &lt;strong&gt;cm unmanaged&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start tracking a file → &lt;strong&gt;cm add &lt;/strong&gt;&lt;/p&gt;&lt;dir file=""&gt;&lt;p&gt;&lt;/p&gt;
&lt;/dir&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update a file, add the file again → &lt;strong&gt;cm add ..&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edit tracked version of file → &lt;strong&gt;cm edit &lt;file&gt;&lt;/file&gt;&lt;/strong&gt; - don’t think I’m going to
    use this, I’d rather edit the source file, test it, and then update using
    &lt;strong&gt;cm add ..&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Differences between local version tracked versions → &lt;strong&gt;cm diff &lt;file&gt;&lt;/file&gt;&lt;/strong&gt; -
    this tells me which files I need to &lt;strong&gt;cm add&lt;/strong&gt; again. This feels clunky and I
    suspect there is a better workflow. Parsing git style diff files is horrible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clobber local version with the tracked version → &lt;strong&gt;cm apply&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dry run and see diff between local version and tracked version → &lt;strong&gt;cm -nv apply&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pull the latest changes from your repo and apply them → &lt;strong&gt;cm update&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove a file →&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create &lt;strong&gt;.chezmoiremove&lt;/strong&gt; in the source directory&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;chezmoi apply –remove –dry-run –verbose&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type &lt;strong&gt;cm&lt;/strong&gt; instead of &lt;strong&gt;chezmoi&lt;/strong&gt; → &lt;strong&gt;alias cm=”chezmoi”&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="links"&gt;Links&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/twpayne/chezmoi"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chezmoi.io/"&gt;Project Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-chezmoi-1"&gt;For example, every file
in &lt;code&gt;$HOME/.vim/ftplugin/&lt;/code&gt; should be version controlled. &lt;a class="simple-footnote-back" href="#sf-chezmoi-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-chezmoi-2"&gt;Happily, it seems like the amount of time required to learn or
become familiar with a new tool is decreasing. I guess this is to be expected
as experience increases but nonetheless it’s gratifying to realise.&lt;br class="mb-3"/&gt;Dotfiles
management was a fairly new and interesting concept when I first began
symlinking into my home directory. It still feels amazing to bootstrap a fresh
machine and have it feel like home in just a few minutes, but the
technicalities of it are now familiar. &lt;a class="simple-footnote-back" href="#sf-chezmoi-2-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Developer Tools"/><category term="linux"/></entry><entry><title>tmux-window-reorg</title><link href="https://johnmathews.eu/tmux-window-reorg.html" rel="alternate"/><published>2021-04-19T22:42:42+02:00</published><updated>2021-04-19T22:42:42+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-19:/tmux-window-reorg.html</id><summary type="html"/><content type="html">&lt;p&gt;Reorganize tmux windows&lt;/p&gt;
&lt;p&gt;&lt;code&gt;swap-window -s 3 -t 1&lt;/code&gt;&lt;/p&gt;</content><category term="snippet"/><category term="tmux"/><category term="macos"/><category term="linux"/><category term="cli"/></entry><entry><title>vim save sudo</title><link href="https://johnmathews.eu/vim-save-sudo.html" rel="alternate"/><published>2021-04-17T22:44:10+02:00</published><updated>2021-04-17T22:44:10+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-17:/vim-save-sudo.html</id><summary type="html"/><content type="html">&lt;p&gt;Save a Vim file with sudo when you opened it without sudo-ing:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:w !sudo tee %&lt;/code&gt;&lt;/p&gt;</content><category term="snippet"/><category term="vim"/><category term="macos"/><category term="linux"/></entry><entry><title>climbing higher</title><link href="https://johnmathews.eu/climbing-higher.html" rel="alternate"/><published>2021-04-16T22:45:44+02:00</published><updated>2021-04-16T22:45:44+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-16:/climbing-higher.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;em&gt;The trouble with climbing higher is that eventually you lose sight of the ground.&lt;/em&gt;&lt;/p&gt;</content><category term="snippet"/><category term="advice"/><category term="thoughts"/><category term="meta"/></entry><entry><title>I Leaked Credentials Onto A Public GitHub Repo</title><link href="https://johnmathews.eu/i-leaked-credentials-onto-a-public-github-repo.html" rel="alternate"/><published>2021-04-15T19:19:35+02:00</published><updated>2021-04-15T19:19:35+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-15:/i-leaked-credentials-onto-a-public-github-repo.html</id><summary type="html"/><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#dont-post-secrets-to-public-github-repositories"&gt;Don’t post secrets to public GitHub repositories.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#background"&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-hack"&gt;The hack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#remediation"&gt;Remediation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#questions"&gt;Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#study"&gt;Study&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#comments"&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="dont-post-secrets-to-public-github-repositories"&gt;Don’t post secrets to public GitHub repositories.&lt;/h1&gt;
&lt;p&gt;I made this mistake a while ago, and in the interests of openness and learning
from others, I’d like to describe what happened. Maybe it’ll help others avoid
the mistake, and maybe I’ll learn something from any conversation this article generates.&lt;/p&gt;
&lt;h1 id="background"&gt;Background&lt;/h1&gt;
&lt;p&gt;Using Google Cloud Platform (&lt;span class="caps"&gt;GCP&lt;/span&gt;), I’ve been doing some work across multiple
compute instances. Thankfully, the work wasn’t business critical or on
production systems.  My account was isolated  away from the rest of the business.&lt;/p&gt;
&lt;p&gt;As the number of servers I was working with increased, I realised I needed to
begin using some tools to automate server setup. This lead me to begin using
Ansible, and once I’d cobbled together a working playbook I pushed my Ansible
project to my GitHub account… And accidentally leaked the key for an
account I’d been using.&lt;/p&gt;
&lt;h1 id="the-hack"&gt;The hack&lt;/h1&gt;
&lt;p&gt;Within a couple of minutes of pushing the repository to GitHub I:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Made the repository private.&lt;/li&gt;
&lt;li&gt;Stopped tracking the keys in git and removed them from the cache &lt;code&gt;git rm -r --cached &lt;dir&gt;&lt;/dir&gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Received an email from Google saying they’d found leaked credentials.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class="caps"&gt;OK&lt;/span&gt;, close call. The secret was leaked for less than 5 minutes. On my obscure
personal GitHub.&lt;/p&gt;
&lt;p&gt;I thought there was nothing to worry about.. But then I noticed some activity
in the console.&lt;/p&gt;
&lt;p&gt;Compute instances were being created, I could see the list growing rapidly.
Over the next few minutes 195 compute instances and disks were being created,
each with a unique name in zones across the world. The format of the name was
&lt;code&gt;node-&lt;type&gt;-&lt;number&gt;&lt;/number&gt;&lt;/type&gt;&lt;/code&gt;. Where type was either application, backup, jenkins,
gke, prod, staging, worker, www, build, redis, or runner. Maybe some others
too. The number seemed to be 5 random digits.&lt;/p&gt;
&lt;p&gt;Some of the instances were ephemeral. They all had delete protection enabled. I
checked the details of a few of them and noticed some scripts that included
references to Monero.&lt;/p&gt;
&lt;p&gt;So I guess a Monero mining bot was being set up.&lt;/p&gt;
&lt;p&gt;The logs showed that &lt;span class="caps"&gt;GKE&lt;/span&gt; and networking resources had also been requested, but
the account which the stolen credentials belonged to didn’t have the necessary
permissions. Our project also maxed out its quota of compute instances in
multiple regions and zones.&lt;/p&gt;
&lt;h1 id="remediation"&gt;Remediation&lt;/h1&gt;
&lt;p&gt;I deleted the account that had been leaked, and began quantifying the
damage. I wanted to know exactly what permissions the key had, which
resources could be created, and could the leaked account be used to create
other accounts? No, it can’t.&lt;/p&gt;
&lt;p&gt;After looking around and becoming confident that it was &lt;em&gt;only&lt;/em&gt; 195 compute
instances with disks and delete protection that had been created, in regions
and zones across the globe, I began to remove them. No other resources had been provisioned.&lt;/p&gt;
&lt;p&gt;It took me 10 minutes and some googling to create the following workflow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Get all the compute instances and dump them into a file. I expected to run a
   script that iterated through the file line by line, setting variables based
   on the content of the current line: &lt;code&gt;gcloud compute instances list --format 'csv[no-heading](name, zone)' &amp;gt; names.txt&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Vim, find the rows that contain the instances that I don’t want to
   delete, and remove these from the file. There are a handful of compute
   instances I want to keep, and 195 that I want to remove. &lt;code&gt;:v/node-&lt;/code&gt; shows
   any rows that &lt;em&gt;don’t&lt;/em&gt; include “node-”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Loop through the file and for each row, which contains the instance name and its zone,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remove delete protection&lt;/li&gt;
&lt;li&gt;Delete the instance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nv"&gt;IFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;, &lt;span class="nb"&gt;read&lt;/span&gt; -r name zone
  &lt;span class="k"&gt;do&lt;/span&gt; gcloud compute instances update &lt;span class="nv"&gt;$name&lt;/span&gt; --zone &lt;span class="nv"&gt;$zone&lt;/span&gt; --no-deletion-protection &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; gcloud compute instances delete &lt;span class="nv"&gt;$name&lt;/span&gt; --zone &lt;span class="nv"&gt;$zone&lt;/span&gt; --quiet
&lt;span class="k"&gt;done&lt;/span&gt; &amp;lt; names.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;--quiet&lt;/code&gt; flag is necessary because otherwise gcloud will ask me to confirm
that I want to delete the instance otherwise.&lt;/p&gt;
&lt;h1 id="questions"&gt;Questions&lt;/h1&gt;
&lt;p&gt;I’m surprised by the speed with which the attacker found the leaked
credentials. The repo did not belong to the clients account but my own, and I
assume that my account is obscure enough to not be on any interesting lists. If
my account is being scanned every few minutes, presumably all accounts are
being scanned regularly.&lt;/p&gt;
&lt;p&gt;How many resources are required to do that? I guess if one of these attacks
works you can use the stolen compute to scan more repositories for more leaked
credentials. It’s easy to imagine scenarios where large corporations that are
already running complicated cloud infrastructure deployments wouldn’t notice a
few (200?) unauthorized compute instances running.&lt;/p&gt;
&lt;h1 id="study"&gt;Study&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLIivdWyY5sqIlPnZ7cvkg2Ck-8ZZ8TA5t"&gt;Service accounts&lt;/a&gt; on Google Cloud Platform.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=goclfp6a2IQ&amp;amp;t=1962s"&gt;Ansible&lt;/a&gt; videos.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=hQWRp-FdTpc"&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt;&lt;/a&gt; crash course.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/vBrezgoX"&gt;Vagrant&lt;/a&gt; crash course.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/26479562/what-does-ifs-do-in-this-bash-loop-cat-file-while-ifs-read-r-line-do/26480210"&gt;&lt;span class="caps"&gt;IFS&lt;/span&gt;=&lt;/a&gt; syntax explanation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="comments"&gt;Comments&lt;/h1&gt;
&lt;p&gt;There was some useful &lt;a href="https://lobste.rs/s/5vwctk/i_leaked_credentials_onto_public_github"&gt;discussion&lt;/a&gt; about this article on Lobste.rs.&lt;/p&gt;</content><category term="Technical/Developer Tools"/><category term="hack"/><category term="github"/><category term="service-account"/><category term="keys"/><category term="security"/></entry><entry><title>broot</title><link href="https://johnmathews.eu/broot.html" rel="alternate"/><published>2021-04-13T22:49:26+02:00</published><updated>2021-04-13T22:49:26+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-13:/broot.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;a href="https://dystroy.org/broot/"&gt;Broot&lt;/a&gt; is a tool that shows the contents of a directory on one screen, even its got lots of files or sub-directories.&lt;/p&gt;</content><category term="snippet"/><category term="broot"/><category term="macos"/><category term="cli"/></entry><entry><title>Adding Keyboard Navigation</title><link href="https://johnmathews.eu/adding-keyboard-navigation.html" rel="alternate"/><published>2021-04-12T22:50:48+02:00</published><updated>2021-04-12T22:50:48+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-12:/adding-keyboard-navigation.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;em&gt;I added keyboard navigation to my blog and it works really well. Now I find
myself trying to use the same shortcuts on other sites.&lt;/em&gt;&lt;/p&gt;</content><category term="snippet"/><category term="blog"/><category term="jam"/><category term="jquery"/></entry><entry><title>Ansible</title><link href="https://johnmathews.eu/ansible.html" rel="alternate"/><published>2021-04-12T11:40:41+02:00</published><updated>2021-04-12T11:40:41+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-12:/ansible.html</id><summary type="html"/><content type="html">&lt;h1 id="background"&gt;Background&lt;/h1&gt;
&lt;p&gt;I’ve been spending a lot of time lately working on nodes for various blockchain
projects (Polkadot, Cardano, Tron, Binance Chain, Ethereum, …). The rosetta
api spec is super interesting, but like most things in crypto the documentation
is sometimes wrong or incomplete and there are bugs and undocumented features. &lt;/p&gt;
&lt;p&gt;Each of the nodes runs on a separate server, and we typically have one node for
mainnet and another for testnet.  I’m working across mutiple servers, doing
difficult stuff, and I want it to be as easy as possible.&lt;/p&gt;
&lt;p&gt;I need to reduce friction and cognitive load.&lt;/p&gt;
&lt;p&gt;Accessing the servers is easy - I use Tmux with the
&lt;a href="https://github.com/tmux-plugins/tmux-continuum"&gt;continuum&lt;/a&gt; and
&lt;a href="https://github.com/tmux-plugins/tmux-resurrect"&gt;resurrect&lt;/a&gt; plugins and
maintain different sessions for each type of server. This makes accessing
multiple servers during the same work day really simple and effortless. But
working on the servers is still awkward.&lt;/p&gt;
&lt;p&gt;On my dev machine I have &lt;code&gt;zsh&lt;/code&gt; with syntax highlighting, command completion,
and various tools, like &lt;a href="https://github.com/agkozak/zsh-z"&gt;z&lt;/a&gt; to make
navigation supper easy. I also have a lot of aliases defined. E.g. &lt;code&gt;..&lt;/code&gt; → &lt;code&gt;cd
..&lt;/code&gt;. Working on a remote server should be as convenient and familiar as working
on my local machine, so I want to find a way to configure a server the same way
as my laptop, and I want to do it automatically so that it can be done many
times, with no additional effort.&lt;/p&gt;
&lt;h1 id="ansible"&gt;Ansible&lt;/h1&gt;
&lt;p&gt;Ansible seems to be popular because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It’s free&lt;/li&gt;
&lt;li&gt;It’s got all the features and capabilities you’re going to need&lt;/li&gt;
&lt;li&gt;It’s agentless - you don’t need to install anything on the machine you want
   to control - you can use Ansible with anything that you can ssh into.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I used the following resources to get started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This &lt;a href="https://www.youtube.com/watch?v=w9eCU4bGgjQ"&gt;useful video&lt;/a&gt; gave me some
    orientation and helped me figure out what I was aiming for and how to get
    started. Before watching it, I didn’t know “which way was up”.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This &lt;a href="http://matthieure.me/2018/12/31/ansible_inventory_plugin.html"&gt;blog
    post&lt;/a&gt; showed
    me how to create an inventory using the &lt;code&gt;gcp_compute&lt;/code&gt; plugin.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I spent a lot of time being unnecessarily confused about service accounts.
    I guess until you have 1 success at understanding something you don’t know
    if you’ve misunderstood by a little or a lot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once you have an inventory of servers that you want to connect to, you
    still need to specify (and prepare for) how you will connect to them. I’d
    hoped that the &lt;code&gt;gcp_compute&lt;/code&gt; plugin would do some heavy lifting for me in
    this step, but it seems not. It &lt;em&gt;can&lt;/em&gt; do lots of useful stuff like
    creating instances and specifying disk space and networks, but it won’t
    really help you ssh into an instance. No matter though…&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This &lt;a href="https://alex.dzyoba.com/blog/gcp-ansible-service-account/"&gt;blog post&lt;/a&gt;
    turned out to be just what I needed. I found it at the beginning of my
    search when I was trying to create an inventory, and discarded it as almost
    useful. Turns out that &lt;code&gt;OS Login&lt;/code&gt; is the best way to ssh into a &lt;span class="caps"&gt;GCE&lt;/span&gt;
    instance and once you’ve got your inventory taken care of, this blog post
    really helps.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When I was installing python modules, I had some errors about pyenv shims
being incorrect. The scripts were looking for versions that weren’t present.
Running &lt;code&gt;pyenv reshash&lt;/code&gt; fixed it. Kind of magically, but annoying.&lt;/p&gt;
&lt;p&gt;Setting up a service account and giving it the correct permissions took more
time and was more confusing than anything to do with Ansible.&lt;/p&gt;
&lt;p&gt;I found this &lt;a href="https://www.arthurkoziel.com/setting-up-vim-for-yaml/"&gt;blog post&lt;/a&gt;
about setting up vim for &lt;code&gt;yml&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;The preferred way to install ansible on Mac is using &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When you use &lt;code&gt;OS Login&lt;/code&gt; the username you have when you ssh into the compute
instance will change. This &lt;a href="https://superuser.com/questions/1379434/google-compute-engine-ssh-different-username-after-switching-to-os-login"&gt;&lt;span class="caps"&gt;SO&lt;/span&gt;
question&lt;/a&gt;
explains why.&lt;/p&gt;
&lt;h1 id="commands"&gt;Commands&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gcloud auth list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible-config view|list|dump&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible-inventory -i inventory.compute.gcp.yml --graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible -i inventory.compute.gcp.yml all -m ping&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Technical/Developer Tools"/><category term="ansible"/><category term="servers"/><category term="ssh"/><category term="automation"/></entry><entry><title>github actions blog</title><link href="https://johnmathews.eu/github-actions-blog.html" rel="alternate"/><published>2021-04-10T22:53:39+02:00</published><updated>2021-04-10T22:53:39+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-10:/github-actions-blog.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;em&gt;I should see if I can use GitHub actions to generate html from markdown and run
some shell and python scripts.&lt;/em&gt;&lt;/p&gt;</content><category term="snippet"/><category term="github"/><category term="blog"/></entry><entry><title>socially acceptable mistakes</title><link href="https://johnmathews.eu/socially-acceptable-mistakes.html" rel="alternate"/><published>2021-04-10T22:52:26+02:00</published><updated>2021-04-10T22:52:26+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-10:/socially-acceptable-mistakes.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;em&gt;Its more socially acceptable to make mistakes and errors of omission than commission.&lt;/em&gt;&lt;/p&gt;</content><category term="snippet"/><category term="meta"/><category term="thinking"/><category term="advice"/></entry><entry><title>du command</title><link href="https://johnmathews.eu/du-command.html" rel="alternate"/><published>2021-04-07T22:55:19+02:00</published><updated>2021-04-07T22:55:19+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-07:/du-command.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;code&gt;du&lt;/code&gt; is a tool for showing disk usage.&lt;/p&gt;
&lt;p&gt;There is a similar tool, with a list of other similar tools
&lt;a href="https://dev.yorhel.nl/ncdu`"&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="snippet"/><category term="cli"/><category term="unix"/><category term="macos"/></entry><entry><title>safe bash scripting</title><link href="https://johnmathews.eu/safe-bash-scripting.html" rel="alternate"/><published>2021-04-06T22:56:14+02:00</published><updated>2021-04-06T22:56:14+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-06:/safe-bash-scripting.html</id><summary type="html"/><content type="html">&lt;p&gt;An &lt;a href="https://t.co/MRxnbHgryD?amp=1"&gt;example&lt;/a&gt; of a safe, good, robust bash file skeleton.&lt;/p&gt;</content><category term="snippet"/><category term="bash"/></entry><entry><title>running a binary in debian</title><link href="https://johnmathews.eu/running-a-binary-in-debian.html" rel="alternate"/><published>2021-04-05T22:58:02+02:00</published><updated>2021-04-05T22:58:02+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-05:/running-a-binary-in-debian.html</id><summary type="html"/><content type="html">&lt;p&gt;I was running a binary in Debian that was complaining about an environment
variable not existing. I moved the binary into a $&lt;span class="caps"&gt;PATH&lt;/span&gt; directory and logged in as a
sudo user. Why did this solve the problem?&lt;/p&gt;</content><category term="snippet"/><category term="debian"/><category term="binary"/><category term="path"/></entry><entry><title>Over-Engineering this blog</title><link href="https://johnmathews.eu/over-engineering-this-blog.html" rel="alternate"/><published>2021-04-05T11:54:00+02:00</published><updated>2021-04-05T11:54:00+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-05:/over-engineering-this-blog.html</id><summary type="html"/><content type="html">&lt;p&gt;Over the last few weeks I’ve spent an unreasonable amount of time and energy
making unnecessary improvements to this blog.&lt;/p&gt;
&lt;p&gt;Some of these improvements are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Adding keyboard shortcuts (type &lt;code&gt;?&lt;/code&gt; to find out which).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://johnmathews.eu/Adding-search.html"&gt;Implementing&lt;/a&gt;, then
   &lt;a href="https://johnmathews.eu/fuse-search.html"&gt;reimplementing&lt;/a&gt;, and then optimizing client
   side fuzzy search.&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;src-set&lt;/code&gt; to serve responsive images
   (&lt;a href="https://github.com/pelican-plugins/image-process"&gt;Image-Process&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Lazy loading images to make this site load faster.&lt;/li&gt;
&lt;li&gt;Compressing page files using &lt;code&gt;brotli&lt;/code&gt; and also &lt;code&gt;gzip&lt;/code&gt;
   (&lt;a href="https://github.com/kurtmckee/pelican_precompress"&gt;Precompress&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Trying (and ultimately failing) to avoid a “white flash” when dark mode is
   chosen and a new page loads (&lt;a href="https://github.com/tailwindlabs/tailwindcss/discussions/3904"&gt;Github
   discussion&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’m not really sure why I did it. It makes almost no difference to anyone but
me. It felt a bit compulsive.&lt;/p&gt;
&lt;p&gt;I like tinkering, and it’s nice to build something that will continue to work
with no maintenance. I tell myself that over the next few years I will gain the
benefits of these features even when I’ve forgotten I implemented them.&lt;/p&gt;
&lt;p&gt;It’s taught me a lot of JavaScript, which is a great language to be familiar
with - it’s everywhere. I would warmly encourage someone younger than myself to
pursue interests for the sake of curiosity and fun. And there is a very high
chance that even if no-one uses the shortcuts except me, my new javascript
skills will come in useful somewhere else.&lt;/p&gt;
&lt;p&gt;But even if they do I’m not sure its a good enough reason - things should be
built when they solve a present problem, not over-engineered for what-ifs and
maybes. &lt;a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it"&gt;&lt;span class="caps"&gt;YAGNI&lt;/span&gt;&lt;/a&gt;. I
wouldn’t let myself do this in a professional capacity. There is a tension
between being curious and being focussed.&lt;/p&gt;
&lt;p&gt;I’m not really sure that I need to justify myself. Its a hobby, I wanted to do
it, I enjoy tinkering with web technologies and learning new things.&lt;/p&gt;
&lt;p&gt;But also, I lost sleep over this - I stayed up too late, and let it put
pressure on other things.&lt;/p&gt;
&lt;p&gt;I know that being curious, and making room to play with interesting things, has
been one of the most useful approaches to personal development and up-skilling
myself. But there must be a limit..&lt;/p&gt;
&lt;p&gt;There is a tension between wasting my time and taking a risk, and it will take
a few years before I know for sure if these efforts were worthwhile, or not.&lt;/p&gt;
&lt;p&gt;If it’s not fun, don’t do it.&lt;/p&gt;
&lt;p&gt;Successful business owners seem to be very good at leaving things alone once
they’re “good enough”, and not being perfectionists. In fact, I think that
being a perfectionist is antithetical to being an entrepreneur. I am not a
perfectionist, I’m just really curious and have a big appetite for learning.&lt;/p&gt;
&lt;p&gt;But this “appetite for learning” stops me from focussing. I let myself become
distracted by adding new features to this blog, when instead I should zoom out
a bit and think about working towards a more substantial and meaningful goal,
to the exclusion of more minor goals.&lt;/p&gt;
&lt;p&gt;I think that good entrepreneurs are very focussed, to a fault. I am not that
focussed. I am too distracted by life.&lt;/p&gt;
&lt;p&gt;It’s a balancing act, there is a tension between being emotionally and
physically present with my family and friends, and ignoring as many things as
possible so that I can focus on doing something meaningful that is necessarily hard.&lt;/p&gt;</content><category term="Technical/Web"/><category term="blog"/><category term="javascript"/><category term="self-reflection"/></entry><entry><title>Fuse Search</title><link href="https://johnmathews.eu/fuse-search.html" rel="alternate"/><published>2021-04-05T10:45:00+02:00</published><updated>2021-04-05T10:45:00+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-05:/fuse-search.html</id><summary type="html"/><content type="html">&lt;h2 id="adding-search-made-the-site-feel-faster-and-more-accessible"&gt;Adding search made the site feel faster and more accessible&lt;/h2&gt;
&lt;p&gt;I’ve reimplemented search on this site using &lt;a href="https://fusejs.io/"&gt;fuse.js&lt;/a&gt;
instead of &lt;a href="https://github.com/tinysearch/tinysearch"&gt;tinySearch&lt;/a&gt;. You can read
about how I implemented tinysearch &lt;a href="https://johnmathews.eu/Adding-search.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When I first implemented search I was surprised how much faster and more accessible
the site began to feel. I could quickly access any content by typing a few
words, I didn’t need to scroll or follow a link.&lt;sup id="sf-fuse-search-1-back"&gt;&lt;a class="simple-footnote" href="#sf-fuse-search-1" title="It also immediately gave me the idea to add keyboard shortcuts. Type ? to see what happened"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;This means I can find content without having to think about how to get there -
I don’t need to break my flow or concentration. It might sound like a
trivially small consideration, but lowering friction or cognitive load in small
ways can make the difference between using or not using something when you’re
already working hard or concentrating on something else. &lt;/p&gt;
&lt;p&gt;For example, if I want to look up my notes about using the &lt;code&gt;nohup&lt;/code&gt; command, I
can quickly go to the site, type &lt;code&gt;/&lt;/code&gt; (the keyboard shortcut for search), type
“nohup” and hit enter. This is all muscle-memory level impulses. I don’t need
to think about the content, think about its category or when I posted it,
then scroll down and scan a list, or use a mouse to click on intermediate links.
Win. Working at the speed of thought rather than the speed of input is a big deal.&lt;/p&gt;
&lt;h2 id="why-i-switched-from-tinysearch-to-fusejs"&gt;Why I switched from tinySearch to Fuse.js&lt;/h2&gt;
&lt;p&gt;Before implementing &lt;code&gt;fuse.js&lt;/code&gt;, this site had a search feature powered by
TinySearch. I wouldn’t have had enough knowledge to implement fuse.js
if I hadn’t already learnt some JavaScript whilst setting-up tinySearch.&lt;/p&gt;
&lt;p&gt;TinySearch had an example for Pelican Blogs, and a simple and clear readme. By using
tinySearch first I saw an example of how to build the &lt;span class="caps"&gt;JSON&lt;/span&gt; array that becomes
the search index, and how to implement the javascript that’s required for
client side search.&lt;/p&gt;
&lt;p&gt;Also, in the course of developing and over-engineering this blog I’ve become
much more proficient and comfortable with JavaScript (and jQuery) in general. &lt;/p&gt;
&lt;p&gt;Fuse.js is really quite simple to set up once you’re familiar with JavaScript.
It’s much more flexible than tinySearch; you  can choose search
weights for different fields, accuracy thresholds, and some parameters for the
fuzzy search algorithm.&lt;/p&gt;
&lt;p&gt;The general approach is to instantiate an instance of &lt;code&gt;Fuse&lt;/code&gt; by calling Fuse
with a &lt;span class="caps"&gt;JSON&lt;/span&gt; array for it to parse, along with some options. You then give the
instance a string and get back an array of results which you can do whatever you
want with.&lt;/p&gt;
&lt;p&gt;The accuracy of the search results is higher with &lt;code&gt;fuse.js&lt;/code&gt; and the speed is
still acceptable. I did have to do some optimization of the search index that
Fuse generates, though.&lt;/p&gt;
&lt;h2 id="optimizing-the-search-index"&gt;Optimizing the search index&lt;/h2&gt;
&lt;p&gt;The “normal” search index that Fuse uses to return results is a &lt;span class="caps"&gt;JSON&lt;/span&gt; array of
all the content of all the articles that you want to be able to search. You can
generate it using a jinja template or any other way you want. (There simply
needs to be a &lt;span class="caps"&gt;JSON&lt;/span&gt; array that the browser downloads and does a fuzzy search
on). This gave me a file that was about &lt;span class="caps"&gt;4MB&lt;/span&gt;. Once I asked Fuse to search the
complete text of each article (not just the default first 600 chars, iirc) then
speed really suffered.&lt;/p&gt;
&lt;p&gt;I optimized the index file in the following three ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Removed any non-words. Some of my articles are jupyter notebooks that have
been converted to articles (the plugin to do this is one of the reasons why I
began using Pelican). When the index is built, lots of code and html gets
included, which isn’t helpful. Any “words” that are more than 20 chars I just delete.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Removed the 150 most common words. Any word that is in many articles is
not useful for distinguishing between different articles, so they can be
deleted from the index. They don’t add any meaning. I wrote a short pipeline of
shell commands using &lt;code&gt;tr&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;uiq&lt;/code&gt; to generate a file with a list of the
most common words. I then wrote a python script to update the original search
index by removing all the common words.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shortened any long words by only keeping the first 12 characters. If a
word was 15 characters long, I simply removed that last 3 chars. I figured this
would work fine because matching the first 12 characters would already be quite
unique and give a good result.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Doing these 3 optimizations reduced the file size by about 90%. Compressing the
&lt;span class="caps"&gt;JSON&lt;/span&gt; using &lt;code&gt;gzip&lt;/code&gt; or &lt;code&gt;brotli&lt;/code&gt; makes the files even smaller, and now the amount
of data transferred to the client seems reasonably small. (This is a static
site, and therefore search has to happen client side.)&lt;/p&gt;
&lt;p&gt;The browser would still begin to lag as the search string length increased. It
takes more time to search for a 10 character string than for a 5 character
string, and initially fuse was doing a search every time a character was typed.&lt;/p&gt;
&lt;p&gt;I wanted the site to feel as fast as possible and thought that if search was
paused whilst typing and occurred a short time after the last key was pressed
this would be an improvement. I added a short delay of 200ms to the function
call, and typing during the delay time resets the time. This reduced the lag
and made the search tool feel responsive. I learnt that this is called “debouncing”.&lt;/p&gt;
&lt;p&gt;There was some further complexity when I wanted to debounce characters used for
searching, but not the navigation or keyboard shortcuts. Getting the
debounce function to only run on some key presses was surprisingly complex. It
taught me a lot of JavaScript though, and it’s satisfying to have made a useful
user interface.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-fuse-search-1"&gt;It also immediately gave
me the idea to add keyboard shortcuts. Type &lt;code&gt;?&lt;/code&gt; to see what happened &lt;a class="simple-footnote-back" href="#sf-fuse-search-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Web"/><category term="Fuse"/><category term="Search"/><category term="Web"/></entry><entry><title>creating slowly</title><link href="https://johnmathews.eu/creating-slowly.html" rel="alternate"/><published>2021-04-01T23:02:09+02:00</published><updated>2021-04-01T23:02:09+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-01:/creating-slowly.html</id><summary type="html"/><content type="html">&lt;p&gt;As a hacker, or creator, or whatever the best label is, I always want to create
something (usually code) and have it finished.&lt;/p&gt;
&lt;p&gt;But a strange creativity and productivity boost comes from dabbling, dipping in
and out.&lt;/p&gt;
&lt;p&gt;I think that if the technical challenges aren’t too hard, then the main
criteria for success is creativity.&lt;/p&gt;
&lt;p&gt;Creativity needs time away from the project, and sleep, to bubble up and let
ideas grow.&lt;/p&gt;
&lt;p&gt;Ultimately, the most successful path is usually the most interesting, because
success has more consequences than failure. “Interesting” requires elements of
novelty and surprise, and without creativity these elements can’t flourish. 3/n&lt;/p&gt;
&lt;p&gt;Dabbling results in more creativity than 6+ hours of strenuous work, and is
more likely to give you satisfying results.&lt;/p&gt;</content><category term="snippet"/><category term="meta"/><category term="thinking"/><category term="advice"/></entry><entry><title>arrow syntax in bash</title><link href="https://johnmathews.eu/arrow-syntax-in-bash.html" rel="alternate"/><published>2021-04-01T22:59:00+02:00</published><updated>2021-04-01T22:59:00+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-01:/arrow-syntax-in-bash.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;code&gt;bar &amp;lt;&amp;lt; foo&lt;/code&gt; bar will stop reading input when it reached “foo”.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bar &amp;lt;&amp;lt;&amp;lt; "foo"&lt;/code&gt; foo is all the input. bar wont run interactively.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bar &amp;lt; &amp;lt;(foo:list)&lt;/code&gt; process subscription. Kind of like piping in the output of multiple commands.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://askubuntu.com/questions/678915/whats-the-difference-between-and-in-bash"&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;</content><category term="snippet"/><category term="bash"/><category term="syntax"/></entry><entry><title>pretty print json in typescript</title><link href="https://johnmathews.eu/pretty-print-json-in-typescript.html" rel="alternate"/><published>2021-03-31T23:04:25+02:00</published><updated>2021-03-31T23:04:25+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-31:/pretty-print-json-in-typescript.html</id><summary type="html"/><content type="html">&lt;p&gt;Pretty print &lt;span class="caps"&gt;JSON&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;console.info(`&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;`);
&lt;/pre&gt;&lt;/div&gt;</content><category term="snippet"/><category term="typescript"/><category term="json"/><category term="syntax"/></entry><entry><title>Vim: GoTo Tag Definition</title><link href="https://johnmathews.eu/vim-notes-goto-tag-definition.html" rel="alternate"/><published>2021-03-31T15:57:00+02:00</published><updated>2021-03-31T15:57:00+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-31:/vim-notes-goto-tag-definition.html</id><summary type="html"/><content type="html">&lt;h2 id="update-2021-03-31"&gt;Update (2021-03-31):&lt;/h2&gt;
&lt;p&gt;Just use neovim.coc instead of YouCompleteMe or Syntastic.&lt;/p&gt;
&lt;p&gt;It’s faster, easier to setup, and works intuitively. &lt;span class="caps"&gt;ALE&lt;/span&gt; is still wonderful and
useful, though there’s a lot of overlap - coc can lint as well.&lt;/p&gt;
&lt;h2 id="jump-lists-and-change-lists"&gt;Jump Lists and Change Lists&lt;/h2&gt;
&lt;p&gt;If you’re going to be jumping around to where things are defined, you will need
to know how to jump back again. It seems there are two lists you need to be
aware of, the &lt;em&gt;jump list&lt;/em&gt;&lt;sup id="sf-vim-notes-goto-tag-definition-1-back"&gt;&lt;a class="simple-footnote" href="#sf-vim-notes-goto-tag-definition-1" title=":help jumplist"&gt;1&lt;/a&gt;&lt;/sup&gt; and the &lt;em&gt;change
list&lt;/em&gt;&lt;sup id="sf-vim-notes-goto-tag-definition-2-back"&gt;&lt;a class="simple-footnote" href="#sf-vim-notes-goto-tag-definition-2" title=":help changelist"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3 id="jump-list"&gt;Jump List&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A list of locations that the cursor has jumped to.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-o&gt;&lt;/c-o&gt;&lt;/code&gt; move up the jump list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-i&gt;&lt;/c-i&gt;&lt;/code&gt; mode down the jump list&lt;/li&gt;
&lt;li&gt;Jumping to a definition, or a search result&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="change-list"&gt;Change List&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;g;&lt;/code&gt; and &lt;code&gt;g,&lt;/code&gt; → move up and down the change list&lt;/li&gt;
&lt;li&gt;A list of locations where a change was made.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'.&lt;/code&gt; → go to the location of your last edit (&lt;code&gt;.&lt;/code&gt; is a mark).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;''&lt;/code&gt; → go back to where you were before your last jump&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="original-post"&gt;Original Post:&lt;/h2&gt;
&lt;p&gt;There are multiple ways of doing anything with vim, including going to where a
function or object is defined, and I usually need to do something at least 3 times
before I can do it without breaking my focus or train of thought.&lt;/p&gt;
&lt;p&gt;My memory is hazy but I remember spending a 1/2 day looking into this and
considering which solution I wanted to commit to.&lt;sup id="sf-vim-notes-goto-tag-definition-3-back"&gt;&lt;a class="simple-footnote" href="#sf-vim-notes-goto-tag-definition-3" title="The more powerful the tool, the more worthwhile it is to take a closer look at what it can and can’t do."&gt;3&lt;/a&gt;&lt;/sup&gt; My options seemed to be between
&lt;a href="https://github.com/ycm-core/YouCompleteMe"&gt;YouCompleteMe&lt;/a&gt; and
&lt;a href="https://github.com/dense-analysis/ale"&gt;&lt;span class="caps"&gt;ALE&lt;/span&gt;&lt;/a&gt;. [Update!&lt;sup id="sf-vim-notes-goto-tag-definition-4-back"&gt;&lt;a class="simple-footnote" href="#sf-vim-notes-goto-tag-definition-4" title="YCM and ALE work fine for goto definition and linting, but they don’t give me satisfactory autocompletion. neoclide/coc.nvim looks like it might offer some improvements. neoclide/coc.nvim"&gt;4&lt;/a&gt;&lt;/sup&gt;]&lt;/p&gt;
&lt;p&gt;I can’t remember everything I read and tried, but I trust my conclusions.
Looking in my &lt;code&gt;.vimrc&lt;/code&gt; I see that I have &lt;code&gt;&lt;leader&gt;x&lt;/leader&gt;&lt;/code&gt; mapped to &lt;code&gt;:YcmCompleter
GoTo&lt;/code&gt; and it works just fine, even when a module is imported from somewhere
outside the current project. The tool was working and ready to use, I just
hadn’t internalized it yet.&lt;/p&gt;
&lt;h2 id="commands-to-remember"&gt;Commands to remember:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;leader&gt;x&lt;/leader&gt;&lt;/code&gt; - GoTo definition - YCMs best guess at an ‘intelligent’ goto
command, whether its a declaration or a definition.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;f2&gt;&lt;/f2&gt;&lt;/code&gt; - Toggle tagbar&lt;/li&gt;
&lt;/ul&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-vim-notes-goto-tag-definition-1"&gt;&lt;code&gt;:help jumplist&lt;/code&gt; &lt;a class="simple-footnote-back" href="#sf-vim-notes-goto-tag-definition-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-vim-notes-goto-tag-definition-2"&gt;&lt;code&gt;:help changelist&lt;/code&gt; &lt;a class="simple-footnote-back" href="#sf-vim-notes-goto-tag-definition-2-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-vim-notes-goto-tag-definition-3"&gt;The more powerful the
tool, the more worthwhile it is to take a closer look at what it can and can’t
do. &lt;a class="simple-footnote-back" href="#sf-vim-notes-goto-tag-definition-3-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-vim-notes-goto-tag-definition-4"&gt;&lt;span class="caps"&gt;YCM&lt;/span&gt; and
&lt;span class="caps"&gt;ALE&lt;/span&gt; work fine for goto definition and linting, but they don’t give me
satisfactory autocompletion. &lt;code&gt;neoclide/coc.nvim&lt;/code&gt; looks like it might offer some
improvements.
&lt;a href="https://www.vimfromscratch.com/articles/vim-for-python/"&gt;neoclide/coc.nvim&lt;/a&gt; &lt;a class="simple-footnote-back" href="#sf-vim-notes-goto-tag-definition-4-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>useful business</title><link href="https://johnmathews.eu/useful-business.html" rel="alternate"/><published>2021-03-30T23:07:07+02:00</published><updated>2021-03-30T23:07:07+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-30:/useful-business.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;em&gt;&lt;a href="http://analystsnow.com"&gt;analystsnow.com&lt;/a&gt; looks like a really useful business.&lt;/em&gt;&lt;/p&gt;</content><category term="snippet"/><category term="entrepreneur"/><category term="saas"/></entry><entry><title>frantic distraction</title><link href="https://johnmathews.eu/frantic-distraction.html" rel="alternate"/><published>2021-03-30T23:05:59+02:00</published><updated>2021-03-30T23:05:59+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-30:/frantic-distraction.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;em&gt;Frantic distraction via productive procrastination is exhausting, and useful.&lt;/em&gt;&lt;/p&gt;</content><category term="snippet"/><category term="meta"/><category term="thinking"/></entry><entry><title>vim split rearranging</title><link href="https://johnmathews.eu/vim-split-rearranging.html" rel="alternate"/><published>2021-03-29T23:09:27+02:00</published><updated>2021-03-29T23:09:27+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-29:/vim-split-rearranging.html</id><summary type="html"/><content type="html">&lt;p&gt;Rearrange splits in Vim&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;c-w&gt;x&lt;/c-w&gt;&lt;/code&gt; - swap buffers, but keep arrangement the same&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;c-w&gt;H&lt;/c-w&gt;&lt;/code&gt; - make the current split cover the left of the screen.&lt;/p&gt;
&lt;p&gt;J, K, L covers the bottom, top, right of the screen&lt;/p&gt;</content><category term="snippet"/><category term="vim"/></entry><entry><title>pelican plugin guide</title><link href="https://johnmathews.eu/pelican-plugin-guide.html" rel="alternate"/><published>2021-03-29T23:07:52+02:00</published><updated>2021-03-29T23:07:52+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-29:/pelican-plugin-guide.html</id><summary type="html"/><content type="html">&lt;p&gt;A &lt;a href="https://blog.geographer.fr/pelican-plugins"&gt;guide&lt;/a&gt;
 about writing plugins for Pelican.&lt;/p&gt;
&lt;p&gt;Thanks @geographeur&lt;/p&gt;</content><category term="snippet"/><category term="pelican"/><category term="plugin"/><category term="guide"/></entry><entry><title>read and write same file</title><link href="https://johnmathews.eu/read-and-write-same-file.html" rel="alternate"/><published>2021-03-24T23:11:55+01:00</published><updated>2021-03-24T23:11:55+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-24:/read-and-write-same-file.html</id><summary type="html"/><content type="html">&lt;p&gt;Tried to read and write the same file in a pipeline, and got caught out by a race condition (why is the file empty?!). Do this instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;some_script &amp;lt; file &amp;gt; smscrpt.&lt;span class="nv"&gt;$$&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; mv smscrpt.&lt;span class="nv"&gt;$$&lt;/span&gt; file &lt;span class="o"&gt;||&lt;/span&gt; rm smscrpt.&lt;span class="nv"&gt;$$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;||&lt;/code&gt; removes the temporary file if it errors.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$$&lt;/code&gt; is the process &lt;span class="caps"&gt;ID&lt;/span&gt; and ensures that you always have a unique temporary
file name.&lt;/p&gt;</content><category term="snippet"/><category term="shell"/><category term="pipe"/><category term="syntax"/><category term="bash"/></entry><entry><title>json tools</title><link href="https://johnmathews.eu/json-tools.html" rel="alternate"/><published>2021-03-24T23:10:45+01:00</published><updated>2021-03-24T23:10:45+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-24:/json-tools.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;jj&lt;/code&gt; - A &lt;a href="https://github.com/tidwall/jj"&gt;stream editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jq&lt;/code&gt; - A json processor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python -m json.tool&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I like &lt;code&gt;jq&lt;/code&gt; for pretty printing &lt;span class="caps"&gt;JSON&lt;/span&gt; output, &lt;code&gt;jj&lt;/code&gt; for making &lt;span class="caps"&gt;JSON&lt;/span&gt; pretty or condensed.&lt;/p&gt;
&lt;p&gt;This was really useful when optimizing the search index for this blog.&lt;/p&gt;</content><category term="snippet"/><category term="json"/></entry><entry><title>docker commands</title><link href="https://johnmathews.eu/docker-commands.html" rel="alternate"/><published>2021-03-17T23:14:43+01:00</published><updated>2021-03-17T23:14:43+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-17:/docker-commands.html</id><summary type="html"/><content type="html">&lt;p&gt;Commands for working with Docker containers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -d ...
docker logs -f &lt;id&gt;
docker run -it ...
docker run -itd
docker container attach &lt;id&gt;
&lt;c-p&gt;&lt;c-q&gt; -&amp;gt; detach from container interactively
&lt;/c-q&gt;&lt;/c-p&gt;&lt;/id&gt;&lt;/id&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/34029680/docker-detached-mode"&gt;stack overflow&lt;/a&gt;&lt;/p&gt;</content><category term="snippet"/><category term="docker"/></entry><entry><title>Python Notes</title><link href="https://johnmathews.eu/python-notes-2.html" rel="alternate"/><published>2021-03-17T09:12:00+01:00</published><updated>2021-03-17T09:12:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-17:/python-notes-2.html</id><summary type="html"/><content type="html">&lt;h1 id="95_call__"&gt;__call__()&lt;/h1&gt;
&lt;p&gt;In Python, every time you call a function or method such as &lt;code&gt;my_function()&lt;/code&gt; or
&lt;code&gt;my_class.my_method()&lt;/code&gt; the interpreter will replace the &lt;code&gt;(&lt;/code&gt; with
&lt;code&gt;.__call__(&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Prefixer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then use &lt;em&gt;prefixer&lt;/em&gt; like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;simonsays&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Prefixer&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Simon says: "&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; simonsays&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"jump up high!"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;'Simon says: jump up high!'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Every time you call a function or method, you’re really just calling a built in
&lt;code&gt;__call__&lt;/code&gt; method.&lt;/p&gt;
&lt;h1 id="there-should-be-one-and-preferably-only-one-obvious-way-to-do-something"&gt;There should be one, and preferably only one, obvious way to do something&lt;/h1&gt;
&lt;p&gt;It’s in the ‘zen of Python’, which is a set of guidelines that help make
design decisions. It’s a choice that Python made, and other languages do it differently.&lt;/p&gt;
&lt;p&gt;There are different
&lt;a href="https://johnmathews.eu/python-notes.html#levels-of-python-code"&gt;levels&lt;/a&gt; to
languages and this applies more to the idiom level than the design pattern
level. It applies even less at the architectural level where there can be
several equally good ways of organizing business logic and data representations.&lt;/p&gt;
&lt;p&gt;Perl has the “&lt;span class="caps"&gt;TMTOWTDI&lt;/span&gt;” (tim towtdi) principle - “There’s More Than One Way To Do
It”. Perl’s philosophy is to give users more than one way to do something.&lt;/p&gt;</content><category term="Technical/Developer Tools"/><category term="python"/><category term="learning notes"/></entry><entry><title>Adding Search</title><link href="https://johnmathews.eu/Adding-search.html" rel="alternate"/><published>2021-03-12T17:27:00+01:00</published><updated>2021-03-12T17:27:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-12:/Adding-search.html</id><summary type="html"/><content type="html">&lt;p&gt;I’ve added search to this blog. Results are generated as you type. Try it by
typing &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;cmd-k&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you look on the Pelican &lt;a href="https://github.com/pelican-plugins"&gt;plugins&lt;/a&gt; index
you’ll see that &lt;a href="https://github.com/pelican-plugins/tipue-search"&gt;Tipue search&lt;/a&gt;
is the only search tool with a ready-made Pelican plugin, but unfortunately the
project seems to have died and the projects &lt;a href="https://tipue.com/"&gt;website&lt;/a&gt; is
now something else.&lt;/p&gt;
&lt;p&gt;But searching a static site must be quite a common need and googling for
alternatives gave me a few choices. &lt;a href="https://lunrjs.com/"&gt;Lunr.js&lt;/a&gt; seems to be
the most popular, but it also seemed fairly complicated and like it was
probably more than I needed. I went with &lt;a href="https://github.com/tinysearch/tinysearch"&gt;Tiny
Search&lt;/a&gt; because it seemed to do what
I needed and was easy to setup. There’s even an example for
Pelican blogs.&lt;/p&gt;
&lt;p&gt;One hurdle to success was minimising the false positives. The default settings
seem to prioritise keeping the size of the index small (tiny) over giving a
good user experience. Maybe its because the amount of text on my site is
significanly less, or more, than the typical use case. Either way, after
checking the project’s issues on Github I found an issue that matched my
problem perfectly. The solution is to increase the tiny_magic variable at build time.&lt;/p&gt;
&lt;p&gt;According to the Readme, this requires using a container and building the index
using &lt;code&gt;docker run...&lt;/code&gt;. Unfortunately the Dockerfile wouldn’t complete without
errors. Checking the issues again and adding to the discussion resulted in an
alternative Dockerfile being suggested, which works. Woohoo! I could then build
the search index with a massive tiny_magic value (2048).&lt;/p&gt;
&lt;p&gt;Then something weird happened. I write in Vim and I use &lt;code&gt;fzf&lt;/code&gt; to find and open
files. I realised that &lt;code&gt;fzf&lt;/code&gt; had stopped working. After some investigating, I
realised it was only not working in the blog project, and that &lt;code&gt;fzf.vim&lt;/code&gt; calls
the &lt;code&gt;fzf&lt;/code&gt; &lt;span class="caps"&gt;CLI&lt;/span&gt; tool, which in turn calls the &lt;code&gt;ripgrep&lt;/code&gt; tool. The underlying
issue was that &lt;code&gt;ripgrep&lt;/code&gt;  wasn’t working, and after a few hours (sob) of
debugging, I found out that one of the things that makes &lt;code&gt;rg&lt;/code&gt; special is that
it ignores stuff in your .gitignore file. Sneakily, and without me  noticing,
the Docker image for constructing the tinysearch files had created a
.gitignore file with a single entry. The entry was *, which selects
everything. So &lt;code&gt;rg&lt;/code&gt; was ignoring everything, and giving no results. Which
meant I couldn’t find and open files.&lt;/p&gt;
&lt;p&gt;I still don’t know how (or which part of) the Dockerfile does this, so I’ve
created a .gitignore-master file which contains the correct content, and
after I generate a new search index I replace the new traitorous .gitignore
with the contents of .gitignore-master. I’ll come back to it later
when/if I have a better understanding of Dockerfile syntax, or Rust.&lt;/p&gt;
&lt;p&gt;Adding search to the site made the content feel a lot closer and more
accessible. Once it was working I immediately wanted to use some keyboard
shortcuts to open the search box and select results. Kind of like
&lt;a href="https://tailwindcss.com/"&gt;tailwindcss.com&lt;/a&gt; does it. It feels really fast and precise.&lt;/p&gt;
&lt;p&gt;Googling for some jquery packages, and also some vanilla javaScript showed me
enough to get things working. You can hit &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;ctrl-k&lt;/code&gt; or &lt;code&gt;cmd-k&lt;/code&gt; and bring up a search box
that populates results as you type!&lt;/p&gt;
&lt;p&gt;Only whole words are matched unfortunately, but its still a super useful
feature. The search index includes article content as well as article titles
and categories. I’d like to tweak a few of the keyboard shortcut behaviours,
and add the contents of various pages (which aren’t articles) to the search index.&lt;/p&gt;
&lt;h2 id="update"&gt;Update&lt;/h2&gt;
&lt;p&gt;I’ve reimplemented search using &lt;code&gt;fuse.js&lt;/code&gt;. You can read about it &lt;a href="https://johnmathews.eu/fuse-search.html"&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="Technical/Web"/><category term="blog"/><category term="search"/><category term="tinysearch"/><category term="web"/></entry><entry><title>pipe a script files into bash</title><link href="https://johnmathews.eu/pipe-a-script-files-into-bash.html" rel="alternate"/><published>2021-03-11T23:16:13+01:00</published><updated>2021-03-11T23:16:13+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-11:/pipe-a-script-files-into-bash.html</id><summary type="html"/><content type="html">&lt;p&gt;Pipe a script file into bash, probably one you just &lt;code&gt;curl&lt;/code&gt;-ed&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -sSfL https://example.com/install.sh &lt;span class="p"&gt;|&lt;/span&gt; sh -s
&lt;/pre&gt;&lt;/div&gt;</content><category term="snippet"/><category term="bash"/><category term="syntax"/><category term="shell"/></entry><entry><title>split long output onto multiple lines</title><link href="https://johnmathews.eu/split-long-output-onto-multiple-lines.html" rel="alternate"/><published>2021-03-10T23:19:12+01:00</published><updated>2021-03-10T23:19:12+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-10:/split-long-output-onto-multiple-lines.html</id><summary type="html"/><content type="html">&lt;p&gt;Split long output onto multiple lines (find and replace on output)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;tr&lt;/span&gt; &lt;span class="s1"&gt;':'&lt;/span&gt; &lt;span class="s1"&gt;'\n'&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="s1"&gt;'s/:/\n/g'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="snippet"/><category term="bash"/><category term="linux"/></entry><entry><title>ripgrep regret</title><link href="https://johnmathews.eu/ripgrep-regret.html" rel="alternate"/><published>2021-03-10T23:18:09+01:00</published><updated>2021-03-10T23:18:09+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-10:/ripgrep-regret.html</id><summary type="html"/><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Without noticing, create a .gitignore file with a single * in it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spend a day trying to understand why ripgrep has stopped working for only 1 project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sad face.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="snippet"/><category term="ripgrep"/><category term="fail"/></entry><entry><title>teaching kids about money</title><link href="https://johnmathews.eu/teaching-kids-about-money.html" rel="alternate"/><published>2021-03-05T23:23:46+01:00</published><updated>2021-03-05T23:23:46+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-05:/teaching-kids-about-money.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;em&gt;Teaching my kids about money and work is having an effect.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Yesterday, my daughter made a painting for me and asked my to buy it using
pretend money.&lt;/em&gt;&lt;/p&gt;</content><category term="snippet"/><category term="parenting"/><category term="kids"/><category term="money"/><category term="teaching"/></entry><entry><title>stop prepending sudo to docker commands</title><link href="https://johnmathews.eu/stop-prepending-sudo-to-docker-commands.html" rel="alternate"/><published>2021-03-05T23:22:58+01:00</published><updated>2021-03-05T23:22:58+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-05:/stop-prepending-sudo-to-docker-commands.html</id><summary type="html"/><content type="html">&lt;p&gt;Stop prepending docker commands with sudo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo groupadd docker -&amp;gt; make the group 
sudo gpasswd -a &lt;span class="nv"&gt;$USER&lt;/span&gt; docker -&amp;gt; add &lt;span class="nv"&gt;$USER&lt;/span&gt; to the docker group
newgrp docker -&amp;gt; activate the changes
&lt;/pre&gt;&lt;/div&gt;</content><category term="snippet"/><category term="sudo"/><category term="docker"/><category term="linux"/></entry><entry><title>cat and a new line</title><link href="https://johnmathews.eu/cat-and-a-new-line.html" rel="alternate"/><published>2021-03-05T23:21:43+01:00</published><updated>2021-03-05T23:21:43+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-05:/cat-and-a-new-line.html</id><summary type="html"/><content type="html">&lt;p&gt;If you’re &lt;code&gt;cat&lt;/code&gt;-ing a file and the bash prompt doesn’t start on a new line (cos
the file you displayed using cat doesn’t end with a new line char) the
following will fix it:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cat &lt;filename&gt; ; echo&lt;/filename&gt;&lt;/code&gt;&lt;/p&gt;</content><category term="snippet"/><category term="cat"/><category term="linux"/><category term="bash"/><category term="shell"/></entry><entry><title>Cardano: Generating Addresses</title><link href="https://johnmathews.eu/cardano-generating-addresses.html" rel="alternate"/><published>2021-03-05T16:14:00+01:00</published><updated>2021-03-05T16:14:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-05:/cardano-generating-addresses.html</id><summary type="html"/><content type="html">&lt;p&gt;If many different customers are to deposit or send &lt;span class="caps"&gt;ADA&lt;/span&gt; (The unit of currency on the
Cardano blockchain) to a Cardano node, it will be necessary to determine which
customer is responsible for each transaction so that the correct customer
account can be updated.&lt;/p&gt;
&lt;p&gt;As with many things involving blockchains, this initially seemed like a simple
requirement but involved several hours of work. &lt;/p&gt;
&lt;p&gt;Cardano wallets are generated using a parameter called ADDRESS_POOL_GAP. The
default value is 20, and is the number of unused addresses that the node will
generate and return to a client using the &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;. If one of the addresses is
used, the node will automatically generate another so that there are always 20
unused addresses.&lt;/p&gt;
&lt;p&gt;This is probably very convenient for personal use. If I want someone to send me
some funds, I can make a simple api call using cURL and get a fresh address.
But if you are running a service, weather its e-commerce or a financial
service, its not really good enough. Some advice on the forums says to generate
a wallet with a very large ADDRESS_POOL_GAP value such as 10,000 and just
generate a new wallet when you run out of fresh addresses, but it still
feels like a compromise.&lt;/p&gt;
&lt;p&gt;But lets explain our situation in more detail first. If a customer wants to
send us some &lt;span class="caps"&gt;ADA&lt;/span&gt;, we want to give them a fresh address that’s never been used
before and that only they have. Then we know that any funds that arrive to that
address are from a particular customer. However we don’t know if the customer
will actually use the address and transfer any funds. The address might remain
unused or it might not. Nevertheless, that address is now reserved for them,
and no one else can use it. &lt;/p&gt;
&lt;p&gt;In this way, we might need to generate and maintain a list of thousands of
addresses that are never used. Using ADDRESS_POOL_GAP for this seems like a bad solution. &lt;/p&gt;
&lt;p&gt;Fortunately,
&lt;a href="https://github.com/input-output-hk/cardano-addresses"&gt;Cardano-Addresses&lt;/a&gt; has
the answer, albeit in a fairly convoluted and obscured form. If you have the
mnemonic that was used to generate a wallet originally, you can generate 2^31
unique addresses like so:&lt;/p&gt;
&lt;p&gt;Clone the repo and build the docker image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/input-output-hk/cardano-wallet 
docker build -t cardano-address .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Get the mnemonic and generate a file containing a list of space separated words on one row.&lt;/p&gt;
&lt;p&gt;Run the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;increment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;increment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;increment+1&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; cat mnumonic.txt &lt;span class="p"&gt;|&lt;/span&gt; docker run --rm -i cardano-address key from-recovery-phrase Shelley &lt;span class="p"&gt;|&lt;/span&gt; docker run --rm -i cardano-address key child 1852H/1815H/0H/0/&lt;span class="nv"&gt;$increment&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; docker run --rm -i cardano-address key public --with-chain-code  &lt;span class="p"&gt;|&lt;/span&gt; docker run --rm -i cardano-address address payment --network-tag testnet &amp;gt; payment.addr &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; cat payment.addr &lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;</content><category term="Technical/Cryptocurrencies"/></entry><entry><title>creating users with sudo permissions</title><link href="https://johnmathews.eu/creating-users-with-sudo-permissions.html" rel="alternate"/><published>2021-03-04T23:25:50+01:00</published><updated>2021-03-04T23:25:50+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-04:/creating-users-with-sudo-permissions.html</id><summary type="html"/><content type="html">&lt;p&gt;Creating users with sudo permissions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;adduser -m &lt;username&gt;
usermod -aG sudo &lt;username&gt;
&lt;/username&gt;&lt;/username&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CentOS:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;adduser -m &lt;username&gt;
passwd &lt;username&gt;
usermod -aG wheel &lt;username&gt;
&lt;/username&gt;&lt;/username&gt;&lt;/username&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(wheel is a usergroup with sudo permissions)&lt;/p&gt;</content><category term="snippet"/><category term="sudo"/><category term="linux"/><category term="user"/><category term="admin"/></entry><entry><title>Two Years Of Vim</title><link href="https://johnmathews.eu/two-years-of-vim.html" rel="alternate"/><published>2021-03-04T10:44:00+01:00</published><updated>2021-03-04T10:44:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-04:/two-years-of-vim.html</id><summary type="html"/><content type="html">&lt;p&gt;I’ve been feeling very comfortable with my Vim + Tmux setup recently.
Navigating around shells and files isn’t taking much mental effort anymore. Wohoo!&lt;/p&gt;
&lt;p&gt;It’s taken about 2 years of working full time with vim to get to the stage
where the commands are so intuitive that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I pepper text files outside of vim (email, notes, etc) with vim keys
     accidentally - &lt;code&gt;j&lt;/code&gt; &lt;code&gt;k&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; etc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I can’t remember what the command is to do something if I’m not actually
     doing it. When I need to do an action, I do it from muscle
     memory and I only pay attention to the underlying key press if something
     goes wrong.&lt;/p&gt;
&lt;p&gt;This is noticeable when trying to find an unbound key combination for some
 new action, or when reading an article about vim and thinking “that’s new”
 when actually I’ve been doing it without noticing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A pleasant surprise has been that it doesn’t take much effort to
     rebind a single command and retrain myself to use it. This is presumably
     because the mental effort for all the other commands has become negligible.
     In the early days, retraining a key combination took a lot more effort
     because I was already making an effort to get used to doing things in Vim.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I can work even when my vision is blurry (and my speech slurred and my head
     heavy) because I can use text objects and navigation commands to get to
     where I know text is. I’m not saying I &lt;em&gt;should&lt;/em&gt; work when I’m that tired,
     but I can, if I’m already familiar with the code/file.. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>disk full and usage commands</title><link href="https://johnmathews.eu/disk-full-and-usage-commands.html" rel="alternate"/><published>2021-03-03T23:27:11+01:00</published><updated>2021-03-03T23:27:11+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-03:/disk-full-and-usage-commands.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;code&gt;df -h&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Show disk space&lt;/p&gt;
&lt;p&gt;&lt;code&gt;du -hs .&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;See how big the current dir is&lt;/p&gt;</content><category term="snippet"/><category term="linux"/><category term="du"/><category term="df"/><category term="shell"/><category term="cli"/></entry><entry><title>cloning git repos using lfs</title><link href="https://johnmathews.eu/cloning-git-repos-using-lfs.html" rel="alternate"/><published>2021-03-03T23:24:35+01:00</published><updated>2021-03-03T23:24:35+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-03:/cloning-git-repos-using-lfs.html</id><summary type="html"/><content type="html">&lt;p&gt;Cloning large repos, or repos with large files in them, doesn’t work with &lt;code&gt;git
clone ...&lt;/code&gt; you need to use &lt;code&gt;git lfs clone ...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So why is &lt;code&gt;git lfs clone&lt;/code&gt; deprecated? What’s the replacement? &lt;/p&gt;</content><category term="snippet"/><category term="git"/><category term="git-lfs"/></entry><entry><title>Binance-Chain: Running a node</title><link href="https://johnmathews.eu/binance-node-api.html" rel="alternate"/><published>2021-03-03T15:28:00+01:00</published><updated>2021-03-03T15:28:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-03:/binance-node-api.html</id><summary type="html"/><content type="html">&lt;p&gt;This week I’ve been setting up a binance-chain node. Unlike Polkadot or
Cardano, I’m not going to run it from a container until it’s working reliably.&lt;/p&gt;
&lt;p&gt;The Binance &lt;a href="https://docs.binance.org/guides/node/install.html"&gt;docs&lt;/a&gt; show a
couple of ways to install a node. I used the &lt;code&gt;install.sh&lt;/code&gt; script and went with
default values as much as possible.&lt;/p&gt;
&lt;h1 id="installation"&gt;Installation&lt;/h1&gt;
&lt;p&gt;My first attempts to sync a full node used the &lt;code&gt;install.sh&lt;/code&gt; script, but
the node wouldn’t sync completely, it would get stuck. I setup a new &lt;span class="caps"&gt;VM&lt;/span&gt; and did
a manual install (“Option Two”) and so far the node has been syncing without
any issues. You need to download the genesis file separately in this
case. Also, be sure to download the &lt;code&gt;node-binary&lt;/code&gt; repo using &lt;code&gt;git lfs&lt;/code&gt; and not
just &lt;code&gt;git&lt;/code&gt;. It will look like it worked but &lt;code&gt;bnbchaind&lt;/code&gt; wont have completely
downloaded unless you use &lt;code&gt;lfs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It took me awhile to realise that the documentation assumes that you have an
environment variable called &lt;code&gt;BNCHOME&lt;/code&gt;. You can either create it using&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;BNCHOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/path/to/.bnbchaind/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(like you would for any environment variable) or replace the environment
variable in the start node command with the file path:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nohup bnbchaind start --home BNCHOME &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: I’m not sure if the &lt;code&gt;bnbchaind&lt;/code&gt; needs the environment variable to be set
or not. It doesn’t give errors if it isn’t set, but I seem to be having more
success when &lt;code&gt;BNCHOME&lt;/code&gt; is defined.&lt;/p&gt;
&lt;h1 id="syncing-the-node"&gt;Syncing the node&lt;/h1&gt;
&lt;p&gt;There are &lt;a href="https://docs.binance.org/guides/node/synctypes.html"&gt;three ways&lt;/a&gt; to sync a node.&lt;/p&gt;
&lt;p&gt;Fast-sync isn’t the fastest way to sync your node, hot-sync is. Using
&lt;code&gt;install.sh&lt;/code&gt; &lt;em&gt;should&lt;/em&gt; put the correct default values in the
&lt;code&gt;$BNCHOME/config/config.toml&lt;/code&gt; file, but I needed to adjust &lt;code&gt;ping_interval&lt;/code&gt; and
&lt;code&gt;pong_timeout&lt;/code&gt; to the recommended values.&lt;/p&gt;
&lt;h1 id="surprises"&gt;Surprises&lt;/h1&gt;
&lt;p&gt;The documentation assumes you have familiarity with running tasks in the
background of a terminal session, and that you’re familiar with &lt;code&gt;nohup&lt;/code&gt;. I
wasn’t - I’d even forgotten what the &lt;code&gt;&amp;amp;&lt;/code&gt; symbol does&lt;sup id="sf-binance-node-api-1-back"&gt;&lt;a class="simple-footnote" href="#sf-binance-node-api-1" title="It starts a process in the background. You can move it to the foreground with fg or see a list of running jobs using jobs. You can move a running job to the background (like a vim session) using ctrl-z"&gt;1&lt;/a&gt;&lt;/sup&gt; so I did some research and wrote some
&lt;a href="https://johnmathews.eu/nohup-and-background-processes.html"&gt;notes&lt;/a&gt;&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-binance-node-api-1"&gt;It starts a process in
the background. You can move it to the foreground with &lt;code&gt;fg&lt;/code&gt; or see a list of
running jobs using &lt;code&gt;jobs&lt;/code&gt;. You can move a running job to the background (like a
vim session) using &lt;code&gt;ctrl-z&lt;/code&gt; &lt;a class="simple-footnote-back" href="#sf-binance-node-api-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Cryptocurrencies"/></entry><entry><title>nohup</title><link href="https://johnmathews.eu/nohup.html" rel="alternate"/><published>2021-03-02T23:30:02+01:00</published><updated>2021-03-02T23:30:02+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-02:/nohup.html</id><summary type="html"/><content type="html">&lt;p&gt;Use &lt;code&gt;nohup&lt;/code&gt; to keep a curl process running even when the terminal (tty?) session autocloses at 3am.&lt;/p&gt;</content><category term="snippet"/><category term="linux"/><category term="cli"/></entry><entry><title>shell comparisons</title><link href="https://johnmathews.eu/shell-comparisons.html" rel="alternate"/><published>2021-03-02T23:28:35+01:00</published><updated>2021-03-02T23:28:35+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-02:/shell-comparisons.html</id><summary type="html"/><content type="html">&lt;p&gt;You can group shells into groups:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ksh&lt;/code&gt; - korn shell and zshell&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sh&lt;/code&gt; - bourne shell and bash (the bourne again shell)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Because&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;zsh&lt;/code&gt; isn’t a superset of bash.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bash&lt;/code&gt; is a superset of the bourne shell.&lt;/li&gt;
&lt;/ul&gt;</content><category term="snippet"/><category term="zsh"/><category term="bash"/><category term="bsh"/><category term="linux"/><category term="cli"/></entry><entry><title>nohup and Background Processes</title><link href="https://johnmathews.eu/nohup-and-background-processes.html" rel="alternate"/><published>2021-03-02T13:10:00+01:00</published><updated>2021-03-02T13:10:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-02:/nohup-and-background-processes.html</id><summary type="html"/><content type="html">&lt;h1 id="stop-stuff-from-stopping"&gt;Stop stuff from stopping&lt;/h1&gt;
&lt;p&gt;If you run a command in a terminal session and the terminal session is
disconnected, the processes running in it will also be terminated.&lt;/p&gt;
&lt;p&gt;I discovered this when I was trying to download a ~500gb database
overnight. I logged in the next morning expecting to see a completed download, but
found I only had half the file.&lt;/p&gt;
&lt;h1 id="use-nohup-to-ignore-hup-signals"&gt;Use &lt;code&gt;nohup&lt;/code&gt; to ignore &lt;code&gt;HUP&lt;/code&gt; signals&lt;/h1&gt;
&lt;p&gt;One solution to this seems to be to use &lt;code&gt;nohup&lt;/code&gt;, a command that
ignores the &lt;code&gt;HUP&lt;/code&gt; signal. It stops your programme from stopping if the terminal
session its running in is stopped.&lt;/p&gt;
&lt;p&gt;By convention, the &lt;code&gt;HUP&lt;/code&gt; signal is the method used by a terminal to warn
dependent processes that it is about to logout.&lt;/p&gt;
&lt;p&gt;You probably want to run &lt;code&gt;nohup&lt;/code&gt; in the background. You might want to prevent
it from creating &lt;code&gt;nohup.out&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="close-or-redirect-fd0-fd2"&gt;Close or redirect fd0 - fd2&lt;/h1&gt;
&lt;p&gt;On Linux,  &lt;code&gt;nohup&lt;/code&gt; automatically closes &lt;code&gt;stdin&lt;/code&gt;. If you’re using MacOS or &lt;span class="caps"&gt;BSD&lt;/span&gt;
this doesn’t automatically happen, so you might want to redirect it yourself.
This is because if a background process tries to read anything from &lt;code&gt;stdin&lt;/code&gt;
then it will pause itself whilst it waits for you to bring it to the foreground
and type some input. This is probably a waste of time.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;nohup&lt;/code&gt; detects that you have redirected &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; then it won’t
create &lt;code&gt;nohup.out&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As with all commands, if you put &lt;code&gt;&amp;amp;&lt;/code&gt; at the end of the command, it will run in
the background. You can bring it to the foreground by running &lt;code&gt;fg&lt;/code&gt;, or see a
list of jobs by running &lt;code&gt;jobs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you redirect input to /dev/null (&lt;code&gt;) you will stop the program
from receiving keyboard (stdin) input, but you won’t prevent it from accessing
the terminal directly. Also you haven’t removed the program from the shell’s
process group.&lt;/code&gt;&lt;/p&gt;
&lt;h1 id="stopping-signals-using-disown"&gt;Stopping signals using &lt;code&gt;disown&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;If you want to remove a program from the shell’s process group, then
immediately after you’ve run the command to start your programme, run &lt;code&gt;disown&lt;/code&gt;
with no arguments. This will make the background process no longer associated
with the shell job and it wont have any signals forwarded to it by the shell.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;disown&lt;/code&gt;ed process gets nothing (no signals) sent to it by the shell. But
without a &lt;code&gt;nohup&lt;/code&gt; it will still be sent a &lt;code&gt;HUP&lt;/code&gt; signal sent via other means,
such as a manual &lt;code&gt;kill&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;nohup&lt;/code&gt;ed process will ignore any and all &lt;code&gt;HUP&lt;/code&gt; signal, no matter how they
are sent.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/10408816/how-do-i-use-the-nohup-command-without-getting-nohup-out"&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="update-2021-03-31"&gt;Update (2021-03-31):&lt;/h1&gt;
&lt;p&gt;Use &lt;code&gt;w&lt;/code&gt; to see who is logged in and what they are doing. It’s summary of every
user logged into a computer, what each user is currently doing, and the
load all the current activity.&lt;/p&gt;
&lt;p&gt;It’s a combination of &lt;code&gt;who&lt;/code&gt;, &lt;code&gt;uptime&lt;/code&gt;, and &lt;code&gt;ps -a&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="process-groups"&gt;Process Groups&lt;/h2&gt;
&lt;p&gt;A collection of one or more processes. It’s used to control the distribution of
a signal. When a signal is directed to a process group, the signal is delivered
to each process that is a member of the group.&lt;/p&gt;
&lt;h2 id="sessions"&gt;Sessions&lt;/h2&gt;
&lt;p&gt;A collection of one or more process groups. A process may not create a process
group that belongs to another session. A process is not permitted
to join a process group that is a member of another session. A process
is not permitted to migrate from one session to another.&lt;/p&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>File Descriptors and /dev/null</title><link href="https://johnmathews.eu/file-descriptors.html" rel="alternate"/><published>2021-03-02T11:36:00+01:00</published><updated>2021-03-02T11:36:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-02:/file-descriptors.html</id><summary type="html"/><content type="html">&lt;h2 id="devnull"&gt;/dev/null&lt;/h2&gt;
&lt;p&gt;In Linux everything is a file, including virtual devices like keyboards. Processes
(programmes) can request access to or from these devices.&lt;/p&gt;
&lt;p&gt;The only difference between these virtual device “files” and real files, is
that for a virtual device the &lt;span class="caps"&gt;OS&lt;/span&gt; generates the data that goes into the file,
instead of reading the data from storage.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/dev/null&lt;/code&gt; is a virtual device that looks like a file and is used to write
output into a black hole that is discarded, lost forever and never seen. It
isn’t written to the terminal.&lt;/p&gt;
&lt;h2 id="file-descriptors"&gt;File Descriptors&lt;/h2&gt;
&lt;p&gt;File descriptors are integer values assigned to a file. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;stdin&lt;/strong&gt; has a file descriptor of 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;stdout&lt;/strong&gt; has a file descriptor of 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;stderr&lt;/strong&gt; has a file descriptor of 2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Two outputs are generated whenever a &lt;span class="caps"&gt;CLI&lt;/span&gt; is run &lt;code&gt;stdout&lt;/code&gt; and
&lt;code&gt;stderr&lt;/code&gt;. By default, both these data streams are associated with the
terminal. You can use file descriptors to redirect them.&lt;/p&gt;
&lt;p&gt;If a command exits successfully, the exit status is 0.&lt;/p&gt;
&lt;p&gt;If it exits unsuccessfully, the exit status will be something else.&lt;/p&gt;
&lt;p&gt;If you don’t specify which file descriptor you want to use, bash will use
&lt;code&gt;stdout&lt;/code&gt; by default.&lt;/p&gt;
&lt;p&gt;The following redirects &lt;code&gt;stdout&lt;/code&gt; away from the terminal and into &lt;code&gt;/dev/null&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; “Hello World” &amp;gt; log.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will redirect &lt;code&gt;stderr&lt;/code&gt; into a file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ asdfadsa &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt; error.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you run a command that generates lots of error messages along with “good”
messages, you can redirect all the error messages (&lt;code&gt;stderr&lt;/code&gt;) into &lt;code&gt;/dev/null&lt;/code&gt;
so that you can only see the useful &lt;code&gt;stdout&lt;/code&gt; messages. e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ grep -r hello /sys/ &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt; /dev/null
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you want to run a command and only see the errors, (&lt;code&gt;stderr&lt;/code&gt;) then you can
filter out all the &lt;code&gt;stdout&lt;/code&gt; by redirecting the &lt;code&gt;stdout&lt;/code&gt; messages to
&lt;code&gt;/dev/null&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ping google.com &lt;span class="m"&gt;1&lt;/span&gt;&amp;gt; /dev/null
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="redirect-all-output-into-devnull-if-you-want-a-command-to-run-quietly"&gt;Redirect all output into /dev/null if you want a command to run quietly,&lt;/h2&gt;
&lt;p&gt;Redirect all the output. The command below redirects &lt;code&gt;stdout&lt;/code&gt; to &lt;code&gt;/dev/null&lt;/code&gt;
(the default file descriptor is 1 if it isn’t specified) and then redirects
file descriptor 2 into file descriptor 1.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ grep -r hello /sys/ &amp;gt; /dev/null &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="read-input-from-a-file-instead-of-the-terminal"&gt;Read input from a file instead of the terminal&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;infile &lt;="" pre=""&gt;&lt;/infile&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="direct-stderr-to-append-to-a-particular-file"&gt;Direct stderr to append to a particular file&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&amp;gt;logfile
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="combining-file-descriptors"&gt;Combining file descriptors&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; means send &lt;code&gt;stderr&lt;/code&gt; wherever &lt;code&gt;stdout&lt;/code&gt; is going. This means that you’ve
combined &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; into one data stream and you can’t separate them
anymore. It also means you can pipe &lt;code&gt;stderr&lt;/code&gt; the same as you can &lt;code&gt;stdout&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="input"&gt;Input&lt;/h1&gt;
&lt;p&gt;You can redirect &lt;code&gt;stdin&lt;/code&gt; similarly. If you run &lt;code&gt; then if the program
attempt to read from &lt;code&gt;stdin&lt;/code&gt; then it will get end-of-file. &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The merge (or redirect) syntax (for example &lt;code&gt;&amp;lt;&amp;amp;2&lt;/code&gt;) won’t work, because you can
only redirect in the same direction.&lt;/p&gt;</content><category term="Technical/Developer Tools"/></entry></feed>