<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>John Mathews</title><link href="https://johnmathews.eu/" rel="alternate"/><link href="https://johnmathews.eu/feeds/all.atom.xml" rel="self"/><id>https://johnmathews.eu/</id><updated>2021-04-25T22:39:05+02:00</updated><entry><title>where command</title><link href="https://johnmathews.eu/where-command.html" rel="alternate"/><published>2021-04-25T22:39:05+02:00</published><updated>2021-04-25T22:39:05+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-25:/where-command.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;code&gt;where &lt;command/&gt;&lt;/code&gt; - shows all known locations of &lt;command/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;man where&lt;/code&gt; - show all builtin commands.&lt;/p&gt;</content><category term="snippet"/><category term="unix"/><category term="macOS"/><category term="cli"/><category term="bash"/></entry><entry><title>Reading - April 2021</title><link href="https://johnmathews.eu/reading-april-2021.html" rel="alternate"/><published>2021-04-21T12:55:20+02:00</published><updated>2021-04-21T12:55:20+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-21:/reading-april-2021.html</id><summary type="html"/><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-architecture-behind-a-one-person-tech-startup"&gt;The Architecture Behind A One-Person Tech Startup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#boring-tech-behind-a-one-person-saas"&gt;Boring tech behind a one person SaaS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#djangos-place-in-a-web-development-world"&gt;Djangos place in a web development world&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cache-invalidation"&gt;&lt;s&gt;Cache invalidation&lt;/s&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vim-abbreviations"&gt;Vim abbreviations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#to-fix-the-social-sciences-look-to-the-dark-ages-of-medicine"&gt;&lt;s&gt;To fix the social sciences, look to the “dark ages” of medicine&lt;/s&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#emotional-resilience-in-leadership-report"&gt;Emotional resilience in leadership report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-virtues-of-a-programmer"&gt;3 virtues of a programmer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#is-webassembly-magic-performance-pixie-dust"&gt;Is WebAssembly magic performance pixie dust?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#yamauchi-no10-family-office"&gt;Yamauchi No.10 Family Office&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#improve-and-extend-your-text-objects-with-targetsvim"&gt;Improve and Extend Your Text Objects With targets.vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-vim-guide-for-adept-users"&gt;A Vim Guide for Adept Users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deep-dive-in-cors"&gt;Deep dive in &lt;span class="caps"&gt;CORS&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-tty-demystified"&gt;The &lt;span class="caps"&gt;TTY&lt;/span&gt; demystified&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Articles and blog posts I saved to read later:&lt;/p&gt;
&lt;h1 id="the-architecture-behind-a-one-person-tech-startup"&gt;&lt;a href="https://anthonynsimon.com/blog/one-man-saas-architecture/"&gt;The Architecture Behind A One-Person Tech Startup&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;An article by &lt;a href="https://twitter.com/anthonynsimon"&gt;Anthony Najjar Simon&lt;/a&gt; about how he runs his one-man SaaS using Django.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Low stress, one-person company, run from a flat.&lt;/li&gt;
&lt;li&gt;Self-funded, taking things slow - &lt;em&gt;he likes taking things slow&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Grateful to be standing on the shoulders of the open source giants who went ahead and made the &lt;span class="caps"&gt;OSS&lt;/span&gt; stack we all enjoy and benefit from.&lt;/li&gt;
&lt;li&gt;Your own context matters when choosing a tech stack. There is no “holy grail”. I guess this means that you should use what you’re familiar with and what is &lt;em&gt;boring&lt;/em&gt; for you.&lt;/li&gt;
&lt;li&gt;Uses K8s on &lt;span class="caps"&gt;AWS&lt;/span&gt;. He says “dont fall into the trap of thinking you need to use it too” - expertise with these tools was learnt over several years fighting fires on the day job.&lt;/li&gt;
&lt;li&gt;Productive because he used the tools he is most familiar with and he can focus on shipping.&lt;/li&gt;
&lt;li&gt;Django, Celery, PostgreSQL, Python, &lt;span class="caps"&gt;AWS&lt;/span&gt;, Redis. - same as MoneyBar and PipPip.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="boring-tech-behind-a-one-person-saas"&gt;&lt;a href="https://www.listennotes.com/blog/the-boring-technology-behind-a-one-person-23/"&gt;Boring tech behind a one person SaaS&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;The tech-stack keeps evolving&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;Boring” means “what I’m familiar with so that I can focus on the business”&lt;/li&gt;
&lt;li&gt;Most of his time is spent talking to people and thinking. He spends 15% of his time on engineering. Probably it was more when he was setting stuff up.&lt;/li&gt;
&lt;li&gt;The methods described in the post are &lt;strong&gt;definitely not the best way&lt;/strong&gt;. &lt;em&gt;It’s just one way of doing engineering in a very specific type of business. It’s not the only way.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Django, Celery, PostgreSQL, Python, &lt;span class="caps"&gt;AWS&lt;/span&gt;, Redis. - same as MoneyBar and PipPip.&lt;/li&gt;
&lt;li&gt;Uses Ansible for provisioning machines. - &lt;span class="caps"&gt;YAML&lt;/span&gt; files. Should look into this.&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;Good enough for now”&lt;/li&gt;
&lt;li&gt;Doesn’t use &lt;span class="caps"&gt;CI&lt;/span&gt; tools, he uses Ansible with a shell script he wrote.&lt;/li&gt;
&lt;li&gt;Uses &lt;a href="https://www.datadoghq.com/"&gt;Datadog&lt;/a&gt; for monitoring and alerting, and PagerDuty.&lt;/li&gt;
&lt;li&gt;Uses &lt;a href="https://rollbar.com/"&gt;Rollbar&lt;/a&gt;, which seems similar to Sentry.&lt;/li&gt;
&lt;li&gt;Uses Slack, not to talk with humans, but integrations with Rollbar and Datadog, and also &lt;a href="https://api.slack.com/messaging/webhooks"&gt;slack incoming webhooks&lt;/a&gt; to be notified when someone signs up or does something interesting like deletes a thing.&lt;/li&gt;
&lt;li&gt;Make a “ding” sound whenever someone signs up.&lt;/li&gt;
&lt;li&gt;He’s &lt;em&gt;always very careful about operational stuff&lt;/em&gt; to prevent downtime and outages. Servers are over-provisioned to protect against spikes caused by sudden media interest.&lt;/li&gt;
&lt;li&gt;Avoids working from home or cafe cos its more productive in an office. Productivity is important - make every minute count. He doesn’t often work more than 8 hours/day.&lt;/li&gt;
&lt;li&gt;He optimizes for spending less time and making money instead of more time and saving money.&lt;/li&gt;
&lt;li&gt;Uses &lt;code&gt;Vagrant&lt;/code&gt; and &lt;code&gt;virtualbox&lt;/code&gt; on an &lt;span class="caps"&gt;MBP&lt;/span&gt; so that dev work is on the same systems as prod infra.&lt;/li&gt;
&lt;li&gt;Uses 1 monolithic repo. Likes this approach.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;He uses contractors&lt;/em&gt;!!&lt;/li&gt;
&lt;li&gt;Usually, the biggest obstacle to building and shipping things is overthinking. What if this, what if that. You are not important at all and no one cares. No one sees. Even if you screw up the initial product launch, no one will care because they’re not looking. Only when you’ve proved that you deserve their attention will you have any attention and visibility.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://hackernoon.com/think-big-start-small-act-fast-6fdab1f771ea"&gt;Think big, start small, act fast&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Use boring technology, or whatever tech you want. Just make sure you’re solving an actual problem.&lt;/li&gt;
&lt;li&gt;Ignore the &lt;a href="https://stevemcconnell.com/articles/cargo-cult-software-engineering/"&gt;cargo cult people&lt;/a&gt; and ignore the noise. Keep calm and carry on.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="djangos-place-in-a-web-development-world"&gt;&lt;a href="https://thenewstack.io/djangos-place-in-a-web-development-world-ruled-by-react/"&gt;Djangos place in a web development world&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Not everything needs to be an &lt;span class="caps"&gt;SPA&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Django is a back-end framework, it’ll work with an front-end framework, because separation of concerns.&lt;/li&gt;
&lt;li&gt;To use django with an &lt;span class="caps"&gt;SPA&lt;/span&gt;, you could use &lt;span class="caps"&gt;DRF&lt;/span&gt;, or just normal views that return &lt;span class="caps"&gt;JSON&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Reading this makes me want to check out React to see what all the fuss is about.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="cache-invalidation"&gt;&lt;s&gt;&lt;a href="https://yihui.org/en/2018/06/cache-invalidation/"&gt;Cache invalidation&lt;/a&gt;&lt;/s&gt;&lt;/h1&gt;
&lt;h1 id="vim-abbreviations"&gt;&lt;a href="https://jovica.org/posts/vim_abbreviations/"&gt;Vim abbreviations&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Cool and all, but not as powerful as snippets I think.&lt;/li&gt;
&lt;li&gt;Auto correcting typos: teh -&amp;gt; the&lt;/li&gt;
&lt;li&gt;Expanding phrases: kr -&amp;gt; kind regards&lt;/li&gt;
&lt;li&gt;Multi-line text expansion.&lt;/li&gt;
&lt;li&gt;It really seems similar to what I’m using UltiSnips for.&lt;/li&gt;
&lt;li&gt;I found &lt;a href="https://stackoverflow.com/questions/30266587/snippets-vs-abbreviations-in-vim"&gt;this&lt;/a&gt; question on &lt;span class="caps"&gt;SO&lt;/span&gt; comparing abbreviations and snippets. &lt;span class="caps"&gt;TLDR&lt;/span&gt;: It’s easier to add and maintain snippets than abbreviations, and you have less boilerplate with snippets than abbreviations, especially in complex cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="to-fix-the-social-sciences-look-to-the-dark-ages-of-medicine"&gt;&lt;s&gt;&lt;a href="https://thereader.mitpress.mit.edu/social-sciences-dark-ages/"&gt;To fix the social sciences, look to the “dark ages” of medicine&lt;/a&gt;&lt;/s&gt;&lt;/h1&gt;
&lt;h1 id="emotional-resilience-in-leadership-report"&gt;&lt;a href="https://docs.google.com/document/d/18FfZ86PGA_uSFf425EzKXAmiFQLFBPqjqPN7iu1TZRw/preview?pru=AAABdEZGCv8*_gdPBrQH8tAPyvMfLk6Unw"&gt;Emotional resilience in leadership report&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id="3-virtues-of-a-programmer"&gt;&lt;a href="http://threevirtues.com/"&gt;3 virtues of a programmer&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Laziness - The quality that makes you go to great effort to reduce overall energy expenditure. It makes you write labor-saving programs that other people will find useful and document what you wrote so you don’t have to answer so many questions about it.&lt;/li&gt;
&lt;li&gt;Impatience - The anger you feel when the computer is being lazy. This makes you write programs that don’t just react to your needs, but actually anticipate them. Or at least pretend to.&lt;/li&gt;
&lt;li&gt;Hubris - The quality that makes you write (and maintain) programs that other people won’t want to say bad things about.&lt;/li&gt;
&lt;li&gt;Also, I read a quote somewhere saying the mark of a great program is having people use it in ways you didn’t expect, or something like that.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="is-webassembly-magic-performance-pixie-dust"&gt;&lt;a href="https://surma.dev/things/js-to-asc/"&gt;Is WebAssembly magic performance pixie dust?&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id="yamauchi-no10-family-office"&gt;&lt;a href="https://y-n10.com/"&gt;Yamauchi No.10 Family Office&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;A beautifully designed website.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="improve-and-extend-your-text-objects-with-targetsvim"&gt;&lt;a href="https://www.barbarianmeetscoding.com/blog/exploring-vim-plugins-improve-and-extend-your-text-objects-with-targets-vim"&gt;Improve and Extend Your Text Objects With targets.vim&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id="a-vim-guide-for-adept-users"&gt;&lt;a href="https://thevaluable.dev/vim-adept"&gt;A Vim Guide for Adept Users&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;How to manipulate multiple quickfix and location lists.&lt;/li&gt;
&lt;li&gt;What are digraphs and how to use them.&lt;/li&gt;
&lt;li&gt;Useful keystrokes in &lt;span class="caps"&gt;INSERT&lt;/span&gt; mode.&lt;/li&gt;
&lt;li&gt;Useful keystrokes in &lt;span class="caps"&gt;VISUAL&lt;/span&gt; mode.&lt;/li&gt;
&lt;li&gt;Vim regular expressions.&lt;/li&gt;
&lt;li&gt;Using shell commands in Vim.&lt;/li&gt;
&lt;li&gt;Folding content.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="deep-dive-in-cors"&gt;&lt;a href="https://ieftimov.com/post/deep-dive-cors-history-how-it-works-best-practices/"&gt;Deep dive in &lt;span class="caps"&gt;CORS&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id="the-tty-demystified"&gt;&lt;a href="http://www.linusakesson.net/programming/tty/index.php"&gt;The &lt;span class="caps"&gt;TTY&lt;/span&gt; demystified&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ps 1&lt;/code&gt; - see which processes are running or sleeping. &lt;code&gt;WCHAN&lt;/code&gt; tells you which
    kernel event a waiting processing is awaiting.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Non-technical/Journal"/><category term="reading"/></entry><entry><title>Learning - April 2021</title><link href="https://johnmathews.eu/learning-april-2021.html" rel="alternate"/><published>2021-04-21T11:09:19+02:00</published><updated>2021-04-21T11:09:19+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-21:/learning-april-2021.html</id><summary type="html"/><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#google-cloud-platform-service-accounts"&gt;Google Cloud Platform Service Accounts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ansible"&gt;Ansible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ssh"&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vagrant"&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="google-cloud-platform-service-accounts"&gt;&lt;a href="https://www.youtube.com/playlist?list=PLIivdWyY5sqIlPnZ7cvkg2Ck-8ZZ8TA5t"&gt;Google Cloud Platform Service Accounts&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;It seems like I’m looking for some general overview of how roles are managed,
viewed, compared, and inherited.&lt;/p&gt;
&lt;p&gt;How can you tell if a users (or a service accounts) roles are adequate, or
too much or too little for a particular task? And what’s the difference
between a user having some roles, and a user using a service account that
has those roles. &lt;/p&gt;
&lt;p&gt;It would also be nice to have some kind of adversarial test, that would
identify how/if users or service accounts can create identities with more
flexible permissions that their own.&lt;/p&gt;
&lt;p&gt;These short videos are good, but they’re not a complete solution. I’m not sure
where to look next.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube-nocookie.com/embed/xXk1YlkKW_k" title="YouTube video player" width="560"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h1 id="ansible"&gt;&lt;a href="https://www.youtube.com/playlist?list=PL2_OBreMn7FplshFCWYlaN2uS8et9RjNG"&gt;Ansible&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Based on Jeff Geerlings book. There are 15 episodes. Jeff seems like a great
guy. I’m going to try listen to one of these each day.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube-nocookie.com/embed/goclfp6a2IQ" title="YouTube video player" width="560"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h1 id="ssh"&gt;&lt;a href="https://www.youtube.com/watch?v=hQWRp-FdTpc&amp;amp;list=PLQGMHRkCCyDw5arrPInZT_T8TbDdzmeBp&amp;amp;index=4"&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;br/&gt;&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube-nocookie.com/embed/hQWRp-FdTpc" title="YouTube video player" width="560"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/ssh-essentials-working-with-ssh-servers-clients-and-keys"&gt;This&lt;/a&gt;
is also a very useful article. I made notes from it in another &lt;a href="https://johnmathews.eu/ssh-notes.html"&gt;post&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="vagrant"&gt;&lt;a href="https://www.youtube.com/watch?v=vBrezgo&amp;amp;list=PLQGMHRkCCyDw5arrPInZT_T8TbDdzmeBp&amp;amp;index=2X"&gt;Vagrant&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;br/&gt;&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube-nocookie.com/embed/vBreXjkizgo" title="YouTube video player" width="560"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Good for local development. (Especially when on aeroplanes?)&lt;/li&gt;
&lt;li&gt;Not as good for cloud providers as Terraform.&lt;/li&gt;
&lt;li&gt;No more snowflake servers.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Technical/Developer Tools"/><category term="learning"/><category term="youtube"/><category term="ansible"/><category term="ssh"/><category term="vagrant"/><category term="gcp"/><category term="service-accounts"/><category term="iam"/></entry><entry><title>Tweets - April 2021</title><link href="https://johnmathews.eu/tweets-april-2021.html" rel="alternate"/><published>2021-04-21T10:39:48+02:00</published><updated>2021-04-21T10:39:48+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-21:/tweets-april-2021.html</id><summary type="html"/><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#front-end"&gt;Front-End&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#entrepreneurship"&gt;Entrepreneurship&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#mental-models"&gt;Mental Models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#agency"&gt;Agency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#razors"&gt;Razors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#crypto"&gt;Crypto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="front-end"&gt;Front-End&lt;/h1&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p dir="ltr" lang="en"&gt; 6 website for top landing page inspiration&lt;br/&gt;&lt;br/&gt;• onepagelove .com by &lt;a href="https://twitter.com/robhope?ref_src=twsrc%5Etfw"&gt;@robhope&lt;/a&gt; &lt;br/&gt;• lapa .ninja by &lt;a href="https://twitter.com/nguyendangtinh?ref_src=twsrc%5Etfw"&gt;@nguyendangtinh&lt;/a&gt; &lt;br/&gt;• landingfolio .com by &lt;a href="https://twitter.com/dannypostmaa?ref_src=twsrc%5Etfw"&gt;@dannypostmaa&lt;/a&gt;&lt;br/&gt;• saasframe .io by &lt;a href="https://twitter.com/AntoineMilkoff?ref_src=twsrc%5Etfw"&gt;@AntoineMilkoff&lt;/a&gt;&lt;br/&gt;• saaslandingpage .com by &lt;a href="https://twitter.com/Cruip_com?ref_src=twsrc%5Etfw"&gt;@Cruip_com&lt;/a&gt; &lt;br/&gt;• saaspages .xyz by &lt;a href="https://twitter.com/Versoly?ref_src=twsrc%5Etfw"&gt;@Versoly&lt;/a&gt;&lt;/p&gt;— Jim Raptis (@d__raptis) &lt;a href="https://twitter.com/d__raptis/status/1382240459288895491?ref_src=twsrc%5Etfw"&gt;April 14, 2021&lt;/a&gt; &lt;/blockquote&gt;
&lt;p&gt;&lt;script async="" charset="utf-8" src="https://platform.twitter.com/widgets.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h1 id="entrepreneurship"&gt;Entrepreneurship&lt;/h1&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p dir="ltr" lang="en"&gt;anyone interested in a fun &lt;a href="https://twitter.com/microacquire?ref_src=twsrc%5Etfw"&gt;@microacquire&lt;/a&gt; challenge?&lt;br/&gt;&lt;br/&gt;maybe 90 or 180 days from start to finish to build and sell a tiny company in public?&lt;br/&gt;&lt;br/&gt;would be really great M&amp;amp;A practice for my fellow founders&lt;/p&gt;— Jim Bisenius (@jim_bisenius) &lt;a href="https://twitter.com/jim_bisenius/status/1382169652403564546?ref_src=twsrc%5Etfw"&gt;April 14, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;script async="" charset="utf-8" src="https://platform.twitter.com/widgets.js"&gt;&lt;/script&gt; &lt;/p&gt;
&lt;h2 id="mental-models"&gt;Mental Models&lt;/h2&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p dir="ltr" lang="en"&gt;Tobi's favorite example of &lt;span class="caps"&gt;FIRST&lt;/span&gt; &lt;span class="caps"&gt;PRINCIPLES&lt;/span&gt; is a Truck driver.&lt;br/&gt;&lt;br/&gt;His truck was sat still for 8 &lt;span class="caps"&gt;HOURS&lt;/span&gt; on &lt;span class="caps"&gt;THANKSGIVING&lt;/span&gt; waiting for his cargo to be unloaded when he realized…&lt;br/&gt;&lt;br/&gt;“Why not take the &lt;span class="caps"&gt;WHOLE&lt;/span&gt; trailer off the back of my ship rather than unloading + reloading each item?”&lt;/p&gt;— George Mack (@george__mack) &lt;a href="https://twitter.com/george__mack/status/1262509025515786248?ref_src=twsrc%5Etfw"&gt;May 18, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;script async="" charset="utf-8" src="https://platform.twitter.com/widgets.js"&gt;&lt;/script&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p dir="ltr" lang="en"&gt;&lt;span class="caps"&gt;LUTKE&lt;/span&gt; &lt;span class="caps"&gt;LEARNING&lt;/span&gt; 6 - &lt;span class="caps"&gt;TALENT&lt;/span&gt; &lt;span class="caps"&gt;STACK&lt;/span&gt; &lt;span class="caps"&gt;LED&lt;/span&gt; &lt;span class="caps"&gt;BY&lt;/span&gt; &lt;span class="caps"&gt;CURIOSITY&lt;/span&gt; &amp;gt; &lt;span class="caps"&gt;MBA&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;He didn't have an &lt;span class="caps"&gt;MBA&lt;/span&gt;. He didn't grind 100-hour workweeks. &lt;br/&gt;&lt;br/&gt;Instead, he played video games (which led to coding) and he snowboarded (which led to an online snowboarding store). &lt;br/&gt;&lt;br/&gt;This 'Talent Stack' led to Shopify.&lt;/p&gt;— George Mack (@george__mack) &lt;a href="https://twitter.com/george__mack/status/1262509059841953801?ref_src=twsrc%5Etfw"&gt;May 18, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async="" charset="utf-8" src="https://platform.twitter.com/widgets.js"&gt;&lt;/script&gt; &lt;/p&gt;
&lt;p&gt;A super long thread, worth reading it all:
&lt;blockquote class="twitter-tweet"&gt;&lt;p dir="ltr" lang="en"&gt;Josh Waitzkin might be the most &lt;span class="caps"&gt;INTERESTING&lt;/span&gt; person alive.&lt;br/&gt;&lt;br/&gt;He doesn't have Twitter. And he barely uses the internet.&lt;br/&gt;&lt;br/&gt;I've compiled my favorite 5 &lt;span class="caps"&gt;MENTAL&lt;/span&gt; &lt;span class="caps"&gt;MODELS&lt;/span&gt; of his below.&lt;br/&gt;&lt;br/&gt;&lt;span class="caps"&gt;THREAD&lt;/span&gt;…&lt;/p&gt;— George Mack (@george__mack) &lt;a href="https://twitter.com/george__mack/status/1292206014746558471?ref_src=twsrc%5Etfw"&gt;August 8, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async="" charset="utf-8" src="https://platform.twitter.com/widgets.js"&gt;&lt;/script&gt; &lt;/p&gt;
&lt;h2 id="agency"&gt;Agency&lt;/h2&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p dir="ltr" lang="en"&gt;1/ &lt;span class="caps"&gt;HIGH&lt;/span&gt; &lt;span class="caps"&gt;AGENCY&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;Once you &lt;span class="caps"&gt;SEE&lt;/span&gt; it - you can never &lt;span class="caps"&gt;UNSEE&lt;/span&gt; it. &lt;br/&gt;&lt;br/&gt;Arguedbly the most important personality trait you can foster. &lt;br/&gt;&lt;br/&gt;I've thought about this concept every week for the last two years since I heard &lt;a href="https://twitter.com/EricRWeinstein?ref_src=twsrc%5Etfw"&gt;@EricRWeinstein&lt;/a&gt; discuss it on &lt;a href="https://twitter.com/tferriss?ref_src=twsrc%5Etfw"&gt;@tferriss&lt;/a&gt;' podcast. &lt;br/&gt;&lt;br/&gt;&lt;span class="caps"&gt;THREAD&lt;/span&gt;…&lt;/p&gt;— George Mack (@george__mack) &lt;a href="https://twitter.com/george__mack/status/1068238562443841538?ref_src=twsrc%5Etfw"&gt;November 29, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;script async="" charset="utf-8" src="https://platform.twitter.com/widgets.js"&gt;&lt;/script&gt; &lt;/p&gt;
&lt;h2 id="razors"&gt;Razors&lt;/h2&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p dir="ltr" lang="en"&gt;&lt;span class="caps"&gt;THREAD&lt;/span&gt;: 15 of the most useful razors and rules I've found.&lt;br/&gt;&lt;br/&gt;Rules of thumb that simplify decisions.&lt;/p&gt;— George Mack (@george__mack) &lt;a href="https://twitter.com/george__mack/status/1350513143387189248?ref_src=twsrc%5Etfw"&gt;January 16, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;script async="" charset="utf-8" src="https://platform.twitter.com/widgets.js"&gt;&lt;/script&gt; &lt;/p&gt;
&lt;h1 id="crypto"&gt;Crypto&lt;/h1&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p dir="ltr" lang="en"&gt; Now let’s compare this to the stock-to-flow model. Below I added in the &lt;span class="caps"&gt;S2F&lt;/span&gt; model, which is the aforementioned inflation rate regressed against price. /10 &lt;a href="https://t.co/eGRXIux6K2"&gt;pic.twitter.com/eGRXIux6K2&lt;/a&gt;&lt;/p&gt;— Jurrien Timmer (@TimmerFidelity) &lt;a href="https://twitter.com/TimmerFidelity/status/1382026424014548995?ref_src=twsrc%5Etfw"&gt;April 13, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async="" charset="utf-8" src="https://platform.twitter.com/widgets.js"&gt;&lt;/script&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p dir="ltr" lang="en"&gt;&lt;a href="https://twitter.com/hashtag/Bitcoin?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Bitcoin&lt;/a&gt; is looking strong at &lt;span class="caps"&gt;RSI&lt;/span&gt; 92. Still not above &lt;span class="caps"&gt;RSI&lt;/span&gt; 95 like 2017, 2013 and 2011 bull markets. I calculated &lt;span class="caps"&gt;BTC&lt;/span&gt; price needed for &lt;span class="caps"&gt;RSI&lt;/span&gt; 95 at April close: $92K. Let's see what the Coinbase &lt;span class="caps"&gt;IPO&lt;/span&gt; will do today🚀 &lt;a href="https://t.co/UTvdFWFhDK"&gt;pic.twitter.com/UTvdFWFhDK&lt;/a&gt;&lt;/p&gt;— PlanB (@100trillionUSD) &lt;a href="https://twitter.com/100trillionUSD/status/1382282077429719040?ref_src=twsrc%5Etfw"&gt;April 14, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;script async="" charset="utf-8" src="https://platform.twitter.com/widgets.js"&gt;&lt;/script&gt; &lt;/p&gt;</content><category term="Non-technical/Journal"/><category term="twitter"/></entry><entry><title>SSH-Notes</title><link href="https://johnmathews.eu/ssh-notes.html" rel="alternate"/><published>2021-04-21T10:21:15+02:00</published><updated>2021-04-21T10:21:15+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-21:/ssh-notes.html</id><summary type="html"/><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#background"&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#authentication"&gt;Authentication&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#passwords-and-keys"&gt;Passwords and Keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#handshake"&gt;Handshake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="background"&gt;Background&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Secure Shell lets you securely connect to remote servers. You connect using
   an account that exists on the remote server. Once you’ve connected you’ll be
   dropped into a shell session.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The computer you connect from is the “local” or “client” computer. The
   computer you connect to is the “host” or the “server”.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you’re connected to the server using &lt;span class="caps"&gt;SSH&lt;/span&gt;, any commands you input from
   the client are sent securely and privately (through a “tunnel”) to the remote
   computer, where the commands are executed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt; is implemented using the client-server model. The server must be running
   a small app to listen for &lt;span class="caps"&gt;SSH&lt;/span&gt; connections. This kind of app is
   called a daemon (pronounced day-mon). For &lt;span class="caps"&gt;SSH&lt;/span&gt; to work, the host must be
   running the &lt;span class="caps"&gt;SSH&lt;/span&gt; daemon. The &lt;span class="caps"&gt;SSH&lt;/span&gt; daemon listens for connections on a specific
   port (22), authenticates connections requests, and (if the connection
   request is approved) it will spawn the correct environment. The correct
   environment is a terminal session.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The client (the computer you connect from) must be running an &lt;span class="caps"&gt;SSH&lt;/span&gt; client,
   which is a small app that can communicate using the &lt;span class="caps"&gt;SSH&lt;/span&gt; protocol. (A
   protocol is a set of rules.) It needs to be able to receive information
   about which host to connect to, which user to connect as and which
   credentials to use when trying to connect.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="authentication"&gt;Authentication&lt;/h1&gt;
&lt;h2 id="passwords-and-keys"&gt;Passwords and Keys&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Clients authenticate using passwords or keys. Passwords are less secure than
   keys. Keys are very secure. You can also connect using no authentication by
   specifying a particular &lt;span class="caps"&gt;IP&lt;/span&gt; address I think.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Passwords are encrypted, and are conceptually familiar, but can (and will)
   be brute forced. There are tools that will block repeated attempts or
   block/allow authentication attempts from particular &lt;span class="caps"&gt;IP&lt;/span&gt; addresses.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt; keys using public and private (or secret) key pairs and are very secure.
   Keys are generated in pairs.  The public key can be shared freely without
   concern. The secret key must be kept as secure and secret as a password.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To authenticate using a key pair, the client must have both keys (a key
   pair) on their computer. The server must have the public key in a file
   called &lt;code&gt;authorized_keys&lt;/code&gt;. If the server has the private key then something
   has gone wrong and you should be alarmed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The server stores the public keys of users who can connect as a particular
   user in the file &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;. The file contains a list of
   public keys, one public key on each row.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The default location to store the public key on the remote server is in the
   users home folder in a subdirectory called &lt;code&gt;.ssh/authorized_keys&lt;/code&gt;. The full
   path would be &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="handshake"&gt;Handshake&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When a client wants to connect to a server using &lt;span class="caps"&gt;SSH&lt;/span&gt;, it tells the server
   which public key to use. The server then checks in the &lt;code&gt;authorized_keys&lt;/code&gt; file
   for the public key. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A unique session &lt;span class="caps"&gt;ID&lt;/span&gt; is generated and shared between the client and server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the server has the same public key that the client sent when it  began
   the connection attempt, the server generates a random string and encrypts
   it using the public key. This random string can only be decrypted using the
   private (secret) key associated with the public key.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The server sends the encrypted string to the client. The client decrypts it
   using the secret key and combines the original random string with the
   session &lt;span class="caps"&gt;ID&lt;/span&gt;. The client then hashes the combined string and sends the hash
   back to the server. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The server already has the hash of the string combining the original random
   string and the session &lt;span class="caps"&gt;ID&lt;/span&gt;. If the hash from the client matches the hash on
   the server, the server can be sure that the client has the private key.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/ssh-essentials-working-with-ssh-servers-clients-and-keys"&gt;Source&lt;/a&gt;&lt;/p&gt;</content><category term="Technical/Developer Tools"/><category term="ssh"/><category term="linux"/><category term="security"/></entry><entry><title>alias to real</title><link href="https://johnmathews.eu/alias-real.html" rel="alternate"/><published>2021-04-20T22:40:09+02:00</published><updated>2021-04-20T22:40:09+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-20:/alias-real.html</id><summary type="html"/><content type="html">&lt;p&gt;make aliased files the real file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; f in &lt;span class="k"&gt;$(&lt;/span&gt;find . -type l -maxdepth &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt; cp --remove-destination &lt;span class="k"&gt;$(&lt;/span&gt;readlink &lt;span class="nv"&gt;$f&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="snippet"/><category term="macos"/><category term="linux"/><category term="cli"/><category term="bash"/></entry><entry><title>ChezMoi</title><link href="https://johnmathews.eu/chezmoi.html" rel="alternate"/><published>2021-04-20T11:46:46+02:00</published><updated>2021-04-20T11:46:46+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-20:/chezmoi.html</id><summary type="html"/><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#background"&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#razor"&gt;Razor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#one-question"&gt;One Question&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#command-reference"&gt;Command Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#links"&gt;Links&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="background"&gt;Background&lt;/h1&gt;
&lt;p&gt;Chezmoi seems to be dotfiles management for power users. Until a few days ago,
when I realised I’d massively broken a lot of things, I’d been putting my
dotfiles in a version controlled directory and using a shell script to generate
symlinks in my home directory.&lt;/p&gt;
&lt;p&gt;This had worked really well for several years. It’s a great system for
maintaining dotfiles on a single machine. But it’s not robust or flexible enough
for managing multiple machines or multiple operating systems.&lt;/p&gt;
&lt;p&gt;Also, it’s not just files that sit in &lt;code&gt;$home&lt;/code&gt; anymore, I need to track
configuration files that live in other places too&lt;sup id="sf-chezmoi-1-back"&gt;&lt;a class="simple-footnote" href="#sf-chezmoi-1" title="For example, every file in $HOME/.vim/ftplugin/ should be version controlled."&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;I needed something more robust and flexible than generating symlinks from a
bash script.&lt;/p&gt;
&lt;h1 id="razor"&gt;Razor&lt;/h1&gt;
&lt;p&gt;I think I read somewhere that when purchasing a new appliance you should buy
the cheapest you think you can get away with, and if that doesn’t work then get
the best you can afford. Moving from a custom bash script to Chezmoi is an
example of this. My custom bash script was the most basic approach, and it
broke badly. Chezmoi seems like the most heavy duty tool for dotfiles management
I could find.&lt;/p&gt;
&lt;p&gt;For example, I think I’m able to encrypt my files using 1Password or similar.
I can use Jinja templates to create scripts for different scenarios. I
don’t even know what that means at the moment. I’ve only scratched the surface
but I’m happily managing dotfiles across different machines and
updating/modifying them safely. Chezmoi (aliased to cm) is free and &lt;span class="caps"&gt;OSS&lt;/span&gt; so I’m
confident it’ll be “my” tool for the next few decades. I’m happy to invest a
couple of hours to learn a few new habits and iron out a few
wrinkles&lt;sup id="sf-chezmoi-2-back"&gt;&lt;a class="simple-footnote" href="#sf-chezmoi-2" title="Happily, it seems like the amount of time required to learn or become familiar with a new tool is decreasing. I guess this is to be expected as experience increases but nonetheless it’s gratifying to realise.Dotfiles management was a fairly new and interesting concept when I first began symlinking into my home directory. It still feels amazing to bootstrap a fresh machine and have it feel like home in just a few minutes, but the technicalities of it are now familiar."&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h1 id="one-question"&gt;One Question&lt;/h1&gt;
&lt;p&gt;I don’t understand why &lt;code&gt;chezmoi cd&lt;/code&gt; creates a new shell in order to jump into the
Chezmoi directory. Why not simply &lt;code&gt;cd&lt;/code&gt; into the Chezmoi directory? What’s the
advantage/necessity of a new shell?&lt;/p&gt;
&lt;p&gt;You have to remember to &lt;code&gt;exit&lt;/code&gt; after you’ve done whatever you went there to do,
but my habit is to &lt;code&gt;cd&lt;/code&gt; or &lt;code&gt;z ..&lt;/code&gt;. I guess it’s nice to exit and then
immediately go back to where ever you were before, but there are other ways of
doing that - you could write the current directory to an environment variable.
It seems unnecessarily complex.&lt;/p&gt;
&lt;h1 id="command-reference"&gt;Command Reference&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Type &lt;code&gt;cm&lt;/code&gt; instead of &lt;code&gt;chezmoi&lt;/code&gt;: &lt;code&gt;alias cm="chezmoi"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Show which files have changed: &lt;code&gt;cm status&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start tracking a file: &lt;code&gt;cm add &lt;dir file=""&gt;&lt;/dir&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Update a file, add the file again: &lt;code&gt;cm add ..&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Edit tracked version of file: &lt;code&gt;cm edit &lt;file&gt;&lt;/file&gt;&lt;/code&gt; - don’t think I’m going to
    use this, I’d rather edit the source file, test it, and then update using
    &lt;code&gt;cm add ..&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Differences between local version and tracked versions: &lt;code&gt;cm diff &lt;file&gt;&lt;/file&gt;&lt;/code&gt; -
    this tells me which files I need to &lt;code&gt;cm add&lt;/code&gt; again. This feels clunky and I
    suspect there is a better workflow. Parsing git style diff files is horrible.&lt;/li&gt;
&lt;li&gt;Clobber local version with the tracked version: &lt;code&gt;cm apply&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Dry run and see diff between local version and tracked version: &lt;code&gt;cm -nv apply&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Pull the latest changes from your repo and apply them: &lt;code&gt;cm update&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove a file:&lt;ul&gt;
&lt;li&gt;Create &lt;code&gt;.chezmoiremove&lt;/code&gt; in the source directory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chezmoi apply --remove --dry-run --verbose&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;List of managed files: &lt;code&gt;cm managed&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;List of unmanaged files: &lt;code&gt;cm unmanaged&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="links"&gt;Links&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/twpayne/chezmoi"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chezmoi.io/"&gt;Project Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-chezmoi-1"&gt;For example, every file
in &lt;code&gt;$HOME/.vim/ftplugin/&lt;/code&gt; should be version controlled. &lt;a class="simple-footnote-back" href="#sf-chezmoi-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-chezmoi-2"&gt;Happily, it seems like the amount of time required to learn or
become familiar with a new tool is decreasing. I guess this is to be expected
as experience increases but nonetheless it’s gratifying to realise.&lt;br class="mb-3"/&gt;Dotfiles
management was a fairly new and interesting concept when I first began
symlinking into my home directory. It still feels amazing to bootstrap a fresh
machine and have it feel like home in just a few minutes, but the
technicalities of it are now familiar. &lt;a class="simple-footnote-back" href="#sf-chezmoi-2-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Developer Tools"/><category term="linux"/></entry><entry><title>tmux-window-reorg</title><link href="https://johnmathews.eu/tmux-window-reorg.html" rel="alternate"/><published>2021-04-19T22:42:42+02:00</published><updated>2021-04-19T22:42:42+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-19:/tmux-window-reorg.html</id><summary type="html"/><content type="html">&lt;p&gt;tmux reorganize windows:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;swap-window -s 3 -t 1&lt;/code&gt;&lt;/p&gt;</content><category term="snippet"/><category term="tmux"/><category term="macos"/><category term="linux"/><category term="cli"/></entry><entry><title>vim save sudo</title><link href="https://johnmathews.eu/vim-save-sudo.html" rel="alternate"/><published>2021-04-17T22:44:10+02:00</published><updated>2021-04-17T22:44:10+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-17:/vim-save-sudo.html</id><summary type="html"/><content type="html">&lt;p&gt;vim save a file with sudo when you opened it without sudo-ing:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:w !sudo tee %&lt;/code&gt;&lt;/p&gt;</content><category term="snippet"/><category term="vim"/><category term="macos"/><category term="linux"/></entry><entry><title>climbing higher</title><link href="https://johnmathews.eu/climbing-higher.html" rel="alternate"/><published>2021-04-16T22:45:44+02:00</published><updated>2021-04-16T22:45:44+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-16:/climbing-higher.html</id><summary type="html"/><content type="html">&lt;p&gt;The trouble with climbing higher is that eventually you lose sight of the ground.&lt;/p&gt;</content><category term="snippet"/><category term="advice"/><category term="thoughts"/><category term="meta"/></entry><entry><title>I Leaked Credentials Onto A Public GitHub Repo</title><link href="https://johnmathews.eu/i-leaked-credentials-onto-a-public-github-repo.html" rel="alternate"/><published>2021-04-15T19:19:35+02:00</published><updated>2021-04-15T19:19:35+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-15:/i-leaked-credentials-onto-a-public-github-repo.html</id><summary type="html"/><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#dont-post-secrets-to-public-github-repositories"&gt;Don’t post secrets to public GitHub repositories.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#background"&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-hack"&gt;The hack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#remediation"&gt;Remediation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#questions"&gt;Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#study"&gt;Study&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#comments"&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="dont-post-secrets-to-public-github-repositories"&gt;Don’t post secrets to public GitHub repositories.&lt;/h1&gt;
&lt;p&gt;I made this mistake a while ago, and in the interests of openness and learning
from others, I’d like to describe what happened. Maybe it’ll help others avoid
the mistake, and maybe I’ll learn something from any conversation this article generates.&lt;/p&gt;
&lt;h1 id="background"&gt;Background&lt;/h1&gt;
&lt;p&gt;Using Google Cloud Platform (&lt;span class="caps"&gt;GCP&lt;/span&gt;), I’ve been doing some work across multiple
compute instances. Thankfully, the work wasn’t business critical or on
production systems.  My account was isolated  away from the rest of the business.&lt;/p&gt;
&lt;p&gt;As the number of servers I was working with increased, I realised I needed to
begin using some tools to automate server setup. This lead me to begin using
Ansible, and once I’d cobbled together a working playbook I pushed my Ansible
project to my GitHub account… And accidentally leaked the key for an
account I’d been using.&lt;/p&gt;
&lt;h1 id="the-hack"&gt;The hack&lt;/h1&gt;
&lt;p&gt;Within a couple of minutes of pushing the repository to GitHub I:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Made the repository private.&lt;/li&gt;
&lt;li&gt;Stopped tracking the keys in git and removed them from the cache &lt;code&gt;git rm -r --cached &lt;dir&gt;&lt;/dir&gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Received an email from Google saying they’d found leaked credentials.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class="caps"&gt;OK&lt;/span&gt;, close call. The secret was leaked for less than 5 minutes. On my obscure
personal GitHub.&lt;/p&gt;
&lt;p&gt;I thought there was nothing to worry about.. But then I noticed some activity
in the console.&lt;/p&gt;
&lt;p&gt;Compute instances were being created, I could see the list growing rapidly.
Over the next few minutes 195 compute instances and disks were being created,
each with a unique name in zones across the world. The format of the name was
&lt;code&gt;node-&lt;type&gt;-&lt;number&gt;&lt;/number&gt;&lt;/type&gt;&lt;/code&gt;. Where type was either application, backup, jenkins,
gke, prod, staging, worker, www, build, redis, or runner. Maybe some others
too. The number seemed to be 5 random digits.&lt;/p&gt;
&lt;p&gt;Some of the instances were ephemeral. They all had delete protection enabled. I
checked the details of a few of them and noticed some scripts that included
references to Monero.&lt;/p&gt;
&lt;p&gt;So I guess a Monero mining bot was being set up.&lt;/p&gt;
&lt;p&gt;The logs showed that &lt;span class="caps"&gt;GKE&lt;/span&gt; and networking resources had also been requested, but
the account which the stolen credentials belonged to didn’t have the necessary
permissions. Our project also maxed out its quota of compute instances in
multiple regions and zones.&lt;/p&gt;
&lt;h1 id="remediation"&gt;Remediation&lt;/h1&gt;
&lt;p&gt;I deleted the account that had been leaked, and began quantifying the
damage. I wanted to know exactly what permissions the key had, which
resources could be created, and could the leaked account be used to create
other accounts? No, it can’t.&lt;/p&gt;
&lt;p&gt;After looking around and becoming confident that it was &lt;em&gt;only&lt;/em&gt; 195 compute
instances with disks and delete protection that had been created, in regions
and zones across the globe, I began to remove them. No other resources had been provisioned.&lt;/p&gt;
&lt;p&gt;It took me 10 minutes and some googling to create the following workflow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Get all the compute instances and dump them into a file. I expected to run a
   script that iterated through the file line by line, setting variables based
   on the content of the current line: &lt;code&gt;gcloud compute instances list --format 'csv[no-heading](name, zone)' &amp;gt; names.txt&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Vim, find the rows that contain the instances that I don’t want to
   delete, and remove these from the file. There are a handful of compute
   instances I want to keep, and 195 that I want to remove. &lt;code&gt;:v/node-&lt;/code&gt; shows
   any rows that &lt;em&gt;don’t&lt;/em&gt; include “node-”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Loop through the file and for each row, which contains the instance name and its zone,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remove delete protection&lt;/li&gt;
&lt;li&gt;Delete the instance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nv"&gt;IFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;, &lt;span class="nb"&gt;read&lt;/span&gt; -r name zone
  &lt;span class="k"&gt;do&lt;/span&gt; gcloud compute instances update &lt;span class="nv"&gt;$name&lt;/span&gt; --zone &lt;span class="nv"&gt;$zone&lt;/span&gt; --no-deletion-protection &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; gcloud compute instances delete &lt;span class="nv"&gt;$name&lt;/span&gt; --zone &lt;span class="nv"&gt;$zone&lt;/span&gt; --quiet
&lt;span class="k"&gt;done&lt;/span&gt; &amp;lt; names.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;--quiet&lt;/code&gt; flag is necessary because otherwise gcloud will ask me to confirm
that I want to delete the instance otherwise.&lt;/p&gt;
&lt;h1 id="questions"&gt;Questions&lt;/h1&gt;
&lt;p&gt;I’m surprised by the speed with which the attacker found the leaked
credentials. The repo did not belong to the clients account but my own, and I
assume that my account is obscure enough to not be on any interesting lists. If
my account is being scanned every few minutes, presumably all accounts are
being scanned regularly.&lt;/p&gt;
&lt;p&gt;How many resources are required to do that? I guess if one of these attacks
works you can use the stolen compute to scan more repositories for more leaked
credentials. It’s easy to imagine scenarios where large corporations that are
already running complicated cloud infrastructure deployments wouldn’t notice a
few (200?) unauthorized compute instances running.&lt;/p&gt;
&lt;h1 id="study"&gt;Study&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLIivdWyY5sqIlPnZ7cvkg2Ck-8ZZ8TA5t"&gt;Service accounts&lt;/a&gt; on Google Cloud Platform.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=goclfp6a2IQ&amp;amp;t=1962s"&gt;Ansible&lt;/a&gt; videos.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=hQWRp-FdTpc"&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt;&lt;/a&gt; crash course.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/vBrezgoX"&gt;Vagrant&lt;/a&gt; crash course.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/26479562/what-does-ifs-do-in-this-bash-loop-cat-file-while-ifs-read-r-line-do/26480210"&gt;&lt;span class="caps"&gt;IFS&lt;/span&gt;=&lt;/a&gt; syntax explanation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="comments"&gt;Comments&lt;/h1&gt;
&lt;p&gt;There was some useful &lt;a href="https://lobste.rs/s/5vwctk/i_leaked_credentials_onto_public_github"&gt;discussion&lt;/a&gt; about this article on Lobste.rs.&lt;/p&gt;</content><category term="Technical/Developer Tools"/><category term="hack"/><category term="github"/><category term="service-account"/><category term="keys"/><category term="security"/></entry><entry><title>broot</title><link href="https://johnmathews.eu/broot.html" rel="alternate"/><published>2021-04-13T22:49:26+02:00</published><updated>2021-04-13T22:49:26+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-13:/broot.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;a href="https://dystroy.org/broot/"&gt;broot&lt;/a&gt; - I’d forgotten the name and tried to re-find it by googling, without success.&lt;/p&gt;</content><category term="snippet"/><category term="broot"/><category term="macos"/><category term="cli"/></entry><entry><title>adding keyboard navigation</title><link href="https://johnmathews.eu/adding-keyboard-navigation.html" rel="alternate"/><published>2021-04-12T22:50:48+02:00</published><updated>2021-04-12T22:50:48+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-12:/adding-keyboard-navigation.html</id><summary type="html"/><content type="html">&lt;p&gt;I added keyboard navigation to my blog and it works really well. Now I find
myself trying to use the same shortcuts on other sites. &lt;/p&gt;</content><category term="snippet"/><category term="blog"/><category term="jam-stack"/><category term="jquery"/></entry><entry><title>Ansible</title><link href="https://johnmathews.eu/ansible.html" rel="alternate"/><published>2021-04-12T11:40:41+02:00</published><updated>2021-04-12T11:40:41+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-12:/ansible.html</id><summary type="html"/><content type="html">&lt;h1 id="background"&gt;Background&lt;/h1&gt;
&lt;p&gt;I’ve been spending a lot of time lately working on nodes for various blockchain
projects (Polkadot, Cardano, Tron, Binance Chain, Ethereum, …). The rosetta
api spec is super interesting, but like most things in crypto the documentation
is sometimes wrong or incomplete and there are bugs and undocumented features. &lt;/p&gt;
&lt;p&gt;Each of the nodes runs on a separate server, and we typically have one node for
mainnet and another for testnet.  I’m working across mutiple servers, doing
difficult stuff, and I want it to be as easy as possible.&lt;/p&gt;
&lt;p&gt;I need to reduce friction and cognitive load.&lt;/p&gt;
&lt;p&gt;Accessing the servers is easy - I use Tmux with the
&lt;a href="https://github.com/tmux-plugins/tmux-continuum"&gt;continuum&lt;/a&gt; and
&lt;a href="https://github.com/tmux-plugins/tmux-resurrect"&gt;resurrect&lt;/a&gt; plugins and
maintain different sessions for each type of server. This makes accessing
multiple servers during the same work day really simple and effortless. But
working on the servers is still awkward.&lt;/p&gt;
&lt;p&gt;On my dev machine I have &lt;code&gt;zsh&lt;/code&gt; with syntax highlighting, command completion,
and various tools, like &lt;a href="https://github.com/agkozak/zsh-z"&gt;z&lt;/a&gt; to make
navigation supper easy. I also have a lot of aliases defined. E.g. &lt;code&gt;..&lt;/code&gt; → &lt;code&gt;cd
..&lt;/code&gt;. Working on a remote server should be as convenient and familiar as working
on my local machine, so I want to find a way to configure a server the same way
as my laptop, and I want to do it automatically so that it can be done many
times, with no additional effort.&lt;/p&gt;
&lt;h1 id="ansible"&gt;Ansible&lt;/h1&gt;
&lt;p&gt;Ansible seems to be popular because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It’s free&lt;/li&gt;
&lt;li&gt;It’s got all the features and capabilities you’re going to need&lt;/li&gt;
&lt;li&gt;It’s agentless - you don’t need to install anything on the machine you want
   to control - you can use Ansible with anything that you can ssh into.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I used the following resources to get started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This &lt;a href="https://www.youtube.com/watch?v=w9eCU4bGgjQ"&gt;useful video&lt;/a&gt; gave me some
    orientation and helped me figure out what I was aiming for and how to get
    started. Before watching it, I didn’t know “which way was up”.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This &lt;a href="http://matthieure.me/2018/12/31/ansible_inventory_plugin.html"&gt;blog
    post&lt;/a&gt; showed
    me how to create an inventory using the &lt;code&gt;gcp_compute&lt;/code&gt; plugin.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I spent a lot of time being unnecessarily confused about service accounts.
    I guess until you have 1 success at understanding something you don’t know
    if you’ve misunderstood by a little or a lot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once you have an inventory of servers that you want to connect to, you
    still need to specify (and prepare for) how you will connect to them. I’d
    hoped that the &lt;code&gt;gcp_compute&lt;/code&gt; plugin would do some heavy lifting for me in
    this step, but it seems not. It &lt;em&gt;can&lt;/em&gt; do lots of useful stuff like
    creating instances and specifying disk space and networks, but it won’t
    really help you ssh into an instance. No matter though…&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This &lt;a href="https://alex.dzyoba.com/blog/gcp-ansible-service-account/"&gt;blog post&lt;/a&gt;
    turned out to be just what I needed. I found it at the beginning of my
    search when I was trying to create an inventory, and discarded it as almost
    useful. Turns out that &lt;code&gt;OS Login&lt;/code&gt; is the best way to ssh into a &lt;span class="caps"&gt;GCE&lt;/span&gt;
    instance and once you’ve got your inventory taken care of, this blog post
    really helps.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When I was installing python modules, I had some errors about pyenv shims
being incorrect. The scripts were looking for versions that weren’t present.
Running &lt;code&gt;pyenv reshash&lt;/code&gt; fixed it. Kind of magically, but annoying.&lt;/p&gt;
&lt;p&gt;Setting up a service account and giving it the correct permissions took more
time and was more confusing than anything to do with Ansible.&lt;/p&gt;
&lt;p&gt;I found this &lt;a href="https://www.arthurkoziel.com/setting-up-vim-for-yaml/"&gt;blog post&lt;/a&gt;
about setting up vim for &lt;code&gt;yml&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;The preferred way to install ansible on Mac is using &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When you use &lt;code&gt;OS Login&lt;/code&gt; the username you have when you ssh into the compute
instance will change. This &lt;a href="https://superuser.com/questions/1379434/google-compute-engine-ssh-different-username-after-switching-to-os-login"&gt;&lt;span class="caps"&gt;SO&lt;/span&gt;
question&lt;/a&gt;
explains why.&lt;/p&gt;
&lt;h1 id="commands"&gt;Commands&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gcloud auth list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible-config view|list|dump&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible-inventory -i inventory.compute.gcp.yml --graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible -i inventory.compute.gcp.yml all -m ping&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Technical/Developer Tools"/><category term="ansible"/><category term="servers"/><category term="ssh"/><category term="automation"/></entry><entry><title>github actions blog</title><link href="https://johnmathews.eu/github-actions-blog.html" rel="alternate"/><published>2021-04-10T22:53:39+02:00</published><updated>2021-04-10T22:53:39+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-10:/github-actions-blog.html</id><summary type="html"/><content type="html">&lt;p&gt;I should see if I can use GitHub actions to generate html from markdown and run
some shell and python scripts.&lt;/p&gt;</content><category term="snippet"/><category term="github"/><category term="blog"/></entry><entry><title>socially acceptable mistakes</title><link href="https://johnmathews.eu/socially-acceptable-mistakes.html" rel="alternate"/><published>2021-04-10T22:52:26+02:00</published><updated>2021-04-10T22:52:26+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-10:/socially-acceptable-mistakes.html</id><summary type="html"/><content type="html">&lt;p&gt;Its more socially acceptable to make mistakes and errors of omission than commission.&lt;/p&gt;</content><category term="snippet"/><category term="meta"/><category term="thinking"/><category term="advice"/></entry><entry><title>du command</title><link href="https://johnmathews.eu/du-command.html" rel="alternate"/><published>2021-04-07T22:55:19+02:00</published><updated>2021-04-07T22:55:19+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-07:/du-command.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;code&gt;du&lt;/code&gt; is a tool for showing disk usage.
There is a similar tool, with a list of other similar tools at https://dev.yorhel.nl/ncdu`&lt;/p&gt;</content><category term="snippet"/><category term="cli"/><category term="unix"/><category term="macos"/></entry><entry><title>safe bash scripting</title><link href="https://johnmathews.eu/safe-bash-scripting.html" rel="alternate"/><published>2021-04-06T22:56:14+02:00</published><updated>2021-04-06T22:56:14+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-06:/safe-bash-scripting.html</id><summary type="html"/><content type="html">&lt;p&gt;safe, good, better bash shell script
&lt;a href="https://t.co/MRxnbHgryD?amp=1"&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="snippet"/><category term="bash"/></entry><entry><title>running a binary in debian</title><link href="https://johnmathews.eu/running-a-binary-in-debian.html" rel="alternate"/><published>2021-04-05T22:58:02+02:00</published><updated>2021-04-05T22:58:02+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-05:/running-a-binary-in-debian.html</id><summary type="html"/><content type="html">&lt;p&gt;Was running a binary in debian that was complaining about an environment
variable not existing. I moved the binary into a &lt;span class="caps"&gt;PATH&lt;/span&gt; dir and logged in as a
&lt;span class="caps"&gt;SU&lt;/span&gt;. problem solved. why? &lt;/p&gt;</content><category term="snippet"/><category term="debian"/><category term="binary"/><category term="path"/></entry><entry><title>Over-Engineering this blog</title><link href="https://johnmathews.eu/over-engineering-this-blog.html" rel="alternate"/><published>2021-04-05T11:54:00+02:00</published><updated>2021-04-05T11:54:00+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-05:/over-engineering-this-blog.html</id><summary type="html"/><content type="html">&lt;p&gt;Over the last few weeks I’ve spent an unreasonable amount of time and energy
making unnecessary improvements to this blog.&lt;/p&gt;
&lt;p&gt;Some of these improvements are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Adding keyboard shortcuts (type &lt;code&gt;?&lt;/code&gt; to find out which).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://johnmathews.eu/Adding-search.html"&gt;Implementing&lt;/a&gt;, then
   &lt;a href="https://johnmathews.eu/fuse-search.html"&gt;reimplementing&lt;/a&gt;, and then optimizing client
   side fuzzy search.&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;src-set&lt;/code&gt; to serve responsive images
   (&lt;a href="https://github.com/pelican-plugins/image-process"&gt;Image-Process&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Lazy loading images to make this site load faster.&lt;/li&gt;
&lt;li&gt;Compressing page files using &lt;code&gt;brotli&lt;/code&gt; and also &lt;code&gt;gzip&lt;/code&gt;
   (&lt;a href="https://github.com/kurtmckee/pelican_precompress"&gt;Precompress&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Trying (and ultimately failing) to avoid a “white flash” when dark mode is
   chosen and a new page loads (&lt;a href="https://github.com/tailwindlabs/tailwindcss/discussions/3904"&gt;Github
   discussion&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’m not really sure why I did it. It makes almost no difference to anyone but
me. It felt a bit compulsive.&lt;/p&gt;
&lt;p&gt;I like tinkering, and it’s nice to build something that will continue to work
with no maintenance. I tell myself that over the next few years I will gain the
benefits of these features even when I’ve forgotten I implemented them.&lt;/p&gt;
&lt;p&gt;It’s taught me a lot of JavaScript, which is a great language to be familiar
with - it’s everywhere. I would warmly encourage someone younger than myself to
pursue interests for the sake of curiosity and fun. And there is a very high
chance that even if no-one uses the shortcuts except me, my new javascript
skills will come in useful somewhere else.&lt;/p&gt;
&lt;p&gt;But even if they do I’m not sure its a good enough reason - things should be
built when they solve a present problem, not over-engineered for what-ifs and
maybes. &lt;a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it"&gt;&lt;span class="caps"&gt;YAGNI&lt;/span&gt;&lt;/a&gt;. I
wouldn’t let myself do this in a professional capacity. There is a tension
between being curious and being focussed.&lt;/p&gt;
&lt;p&gt;I’m not really sure that I need to justify myself. Its a hobby, I wanted to do
it, I enjoy tinkering with web technologies and learning new things.&lt;/p&gt;
&lt;p&gt;But also, I lost sleep over this - I stayed up too late, and let it put
pressure on other things.&lt;/p&gt;
&lt;p&gt;I know that being curious, and making room to play with interesting things, has
been one of the most useful approaches to personal development and up-skilling
myself. But there must be a limit..&lt;/p&gt;
&lt;p&gt;There is a tension between wasting my time and taking a risk, and it will take
a few years before I know for sure if these efforts were worthwhile, or not.&lt;/p&gt;
&lt;p&gt;If it’s not fun, don’t do it.&lt;/p&gt;
&lt;p&gt;Successful business owners seem to be very good at leaving things alone once
they’re “good enough”, and not being perfectionists. In fact, I think that
being a perfectionist is antithetical to being an entrepreneur. I am not a
perfectionist, I’m just really curious and have a big appetite for learning.&lt;/p&gt;
&lt;p&gt;But this “appetite for learning” stops me from focussing. I let myself become
distracted by adding new features to this blog, when instead I should zoom out
a bit and think about working towards a more substantial and meaningful goal,
to the exclusion of more minor goals.&lt;/p&gt;
&lt;p&gt;I think that good entrepreneurs are very focussed, to a fault. I am not that
focussed. I am too distracted by life.&lt;/p&gt;
&lt;p&gt;It’s a balancing act, there is a tension between being emotionally and
physically present with my family and friends, and ignoring as many things as
possible so that I can focus on doing something meaningful that is necessarily hard.&lt;/p&gt;</content><category term="Technical/Web"/><category term="blog"/><category term="javascript"/><category term="self-reflection"/></entry><entry><title>Fuse Search</title><link href="https://johnmathews.eu/fuse-search.html" rel="alternate"/><published>2021-04-05T10:45:00+02:00</published><updated>2021-04-05T10:45:00+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-05:/fuse-search.html</id><summary type="html"/><content type="html">&lt;h2 id="adding-search-made-the-site-feel-faster-and-more-accessible"&gt;Adding search made the site feel faster and more accessible&lt;/h2&gt;
&lt;p&gt;I’ve reimplemented search on this site using &lt;a href="https://fusejs.io/"&gt;fuse.js&lt;/a&gt;
instead of &lt;a href="https://github.com/tinysearch/tinysearch"&gt;tinySearch&lt;/a&gt;. You can read
about how I implemented tinysearch &lt;a href="https://johnmathews.eu/Adding-search.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When I first implemented search I was surprised how much faster and more accessible
the site began to feel. I could quickly access any content by typing a few
words, I didn’t need to scroll or follow a link.&lt;sup id="sf-fuse-search-1-back"&gt;&lt;a class="simple-footnote" href="#sf-fuse-search-1" title="It also immediately gave me the idea to add keyboard shortcuts. Type ? to see what happened"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;This means I can find content without having to think about how to get there -
I don’t need to break my flow or concentration. It might sound like a
trivially small consideration, but lowering friction or cognitive load in small
ways can make the difference between using or not using something when you’re
already working hard or concentrating on something else. &lt;/p&gt;
&lt;p&gt;For example, if I want to look up my notes about using the &lt;code&gt;nohup&lt;/code&gt; command, I
can quickly go to the site, type &lt;code&gt;/&lt;/code&gt; (the keyboard shortcut for search), type
“nohup” and hit enter. This is all muscle-memory level impulses. I don’t need
to think about the content, think about its category or when I posted it,
then scroll down and scan a list, or use a mouse to click on intermediate links.
Win. Working at the speed of thought rather than the speed of input is a big deal.&lt;/p&gt;
&lt;h2 id="why-i-switched-from-tinysearch-to-fusejs"&gt;Why I switched from tinySearch to Fuse.js&lt;/h2&gt;
&lt;p&gt;Before implementing &lt;code&gt;fuse.js&lt;/code&gt;, this site had a search feature powered by
TinySearch. I wouldn’t have had enough knowledge to implement fuse.js
if I hadn’t already learnt some JavaScript whilst setting-up tinySearch.&lt;/p&gt;
&lt;p&gt;TinySearch had an example for Pelican Blogs, and a simple and clear readme. By using
tinySearch first I saw an example of how to build the &lt;span class="caps"&gt;JSON&lt;/span&gt; array that becomes
the search index, and how to implement the javascript that’s required for
client side search.&lt;/p&gt;
&lt;p&gt;Also, in the course of developing and over-engineering this blog I’ve become
much more proficient and comfortable with JavaScript (and jQuery) in general. &lt;/p&gt;
&lt;p&gt;Fuse.js is really quite simple to set up once you’re familiar with JavaScript.
It’s much more flexible than tinySearch; you  can choose search
weights for different fields, accuracy thresholds, and some parameters for the
fuzzy search algorithm.&lt;/p&gt;
&lt;p&gt;The general approach is to instantiate an instance of &lt;code&gt;Fuse&lt;/code&gt; by calling Fuse
with a &lt;span class="caps"&gt;JSON&lt;/span&gt; array for it to parse, along with some options. You then give the
instance a string and get back an array of results which you can do whatever you
want with.&lt;/p&gt;
&lt;p&gt;The accuracy of the search results is higher with &lt;code&gt;fuse.js&lt;/code&gt; and the speed is
still acceptable. I did have to do some optimization of the search index that
Fuse generates, though.&lt;/p&gt;
&lt;h2 id="optimizing-the-search-index"&gt;Optimizing the search index&lt;/h2&gt;
&lt;p&gt;The “normal” search index that Fuse uses to return results is a &lt;span class="caps"&gt;JSON&lt;/span&gt; array of
all the content of all the articles that you want to be able to search. You can
generate it using a jinja template or any other way you want. (There simply
needs to be a &lt;span class="caps"&gt;JSON&lt;/span&gt; array that the browser downloads and does a fuzzy search
on). This gave me a file that was about &lt;span class="caps"&gt;4MB&lt;/span&gt;. Once I asked Fuse to search the
complete text of each article (not just the default first 600 chars, iirc) then
speed really suffered.&lt;/p&gt;
&lt;p&gt;I optimized the index file in the following three ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Removed any non-words. Some of my articles are jupyter notebooks that have
been converted to articles (the plugin to do this is one of the reasons why I
began using Pelican). When the index is built, lots of code and html gets
included, which isn’t helpful. Any “words” that are more than 20 chars I just delete.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Removed the 150 most common words. Any word that is in many articles is
not useful for distinguishing between different articles, so they can be
deleted from the index. They don’t add any meaning. I wrote a short pipeline of
shell commands using &lt;code&gt;tr&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;uiq&lt;/code&gt; to generate a file with a list of the
most common words. I then wrote a python script to update the original search
index by removing all the common words.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shortened any long words by only keeping the first 12 characters. If a
word was 15 characters long, I simply removed that last 3 chars. I figured this
would work fine because matching the first 12 characters would already be quite
unique and give a good result.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Doing these 3 optimizations reduced the file size by about 90%. Compressing the
&lt;span class="caps"&gt;JSON&lt;/span&gt; using &lt;code&gt;gzip&lt;/code&gt; or &lt;code&gt;brotli&lt;/code&gt; makes the files even smaller, and now the amount
of data transferred to the client seems reasonably small. (This is a static
site, and therefore search has to happen client side.)&lt;/p&gt;
&lt;p&gt;The browser would still begin to lag as the search string length increased. It
takes more time to search for a 10 character string than for a 5 character
string, and initially fuse was doing a search every time a character was typed.&lt;/p&gt;
&lt;p&gt;I wanted the site to feel as fast as possible and thought that if search was
paused whilst typing and occurred a short time after the last key was pressed
this would be an improvement. I added a short delay of 200ms to the function
call, and typing during the delay time resets the time. This reduced the lag
and made the search tool feel responsive. I learnt that this is called “debouncing”.&lt;/p&gt;
&lt;p&gt;There was some further complexity when I wanted to debounce characters used for
searching, but not the navigation or keyboard shortcuts. Getting the
debounce function to only run on some key presses was surprisingly complex. It
taught me a lot of JavaScript though, and it’s satisfying to have made a useful
user interface.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-fuse-search-1"&gt;It also immediately gave
me the idea to add keyboard shortcuts. Type &lt;code&gt;?&lt;/code&gt; to see what happened &lt;a class="simple-footnote-back" href="#sf-fuse-search-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Web"/><category term="Fuse"/><category term="Search"/><category term="Web"/></entry><entry><title>creating slowly</title><link href="https://johnmathews.eu/creating-slowly.html" rel="alternate"/><published>2021-04-01T23:02:09+02:00</published><updated>2021-04-01T23:02:09+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-01:/creating-slowly.html</id><summary type="html"/><content type="html">&lt;p&gt;As a hacker, or creator, or whatever the best label is, I always want to create
something (usually code) and have it finished.&lt;/p&gt;
&lt;p&gt;But a strange creativity and productivity boost comes from dabbling, dipping in
and out.&lt;/p&gt;
&lt;p&gt;I think that if the technical challenges aren’t too hard, then the main
criteria for success is creativity.&lt;/p&gt;
&lt;p&gt;Creativity needs time away from the project, and sleep, to bubble up and let
ideas grow.&lt;/p&gt;
&lt;p&gt;Ultimately, the most successful path is usually the most interesting, because
success has more consequences than failure. “Interesting” requires elements of
novelty and surprise, and without creativity these elements can’t flourish. 3/n&lt;/p&gt;
&lt;p&gt;Dabbling results in more creativity than 6+ hours of strenuous work, and is
more likely to give you satisfying results.&lt;/p&gt;</content><category term="snippet"/><category term="meta"/><category term="thinking"/><category term="advice"/></entry><entry><title>arrow syntax in bash</title><link href="https://johnmathews.eu/arrow-syntax-in-bash.html" rel="alternate"/><published>2021-04-01T22:59:00+02:00</published><updated>2021-04-01T22:59:00+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-04-01:/arrow-syntax-in-bash.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;code&gt;bar &amp;lt;&amp;lt; foo&lt;/code&gt; bar will stop reading input when it reached “foo” (here-document)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bar &amp;lt;&amp;lt;&amp;lt; "foo"&lt;/code&gt; foo is all the input. bar wont run interactively. (here-string)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bar &amp;lt; &amp;lt;(foo:list)&lt;/code&gt; process subscription. kind of like piping in the output of multiple commands&lt;/p&gt;</content><category term="snippet"/><category term="bash"/><category term="syntax"/></entry><entry><title>pretty print json in typescript</title><link href="https://johnmathews.eu/pretty-print-json-in-typescript.html" rel="alternate"/><published>2021-03-31T23:04:25+02:00</published><updated>2021-03-31T23:04:25+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-31:/pretty-print-json-in-typescript.html</id><summary type="html"/><content type="html">&lt;p&gt;typescript: pretty print json stuff:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://console.info(`foo: &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;`);
&lt;/pre&gt;&lt;/div&gt;</content><category term="snippet"/><category term="typescript"/><category term="json"/><category term="syntax"/></entry><entry><title>useful business</title><link href="https://johnmathews.eu/useful-business.html" rel="alternate"/><published>2021-03-30T23:07:07+02:00</published><updated>2021-03-30T23:07:07+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-30:/useful-business.html</id><summary type="html"/><content type="html">&lt;p&gt;analystsnow.com/# looks like a really useful business&lt;/p&gt;</content><category term="snippet"/><category term="entrepreneur"/><category term="saas"/></entry><entry><title>frantic distraction</title><link href="https://johnmathews.eu/frantic-distraction.html" rel="alternate"/><published>2021-03-30T23:05:59+02:00</published><updated>2021-03-30T23:05:59+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-30:/frantic-distraction.html</id><summary type="html"/><content type="html">&lt;p&gt;frantic distraction via productive procrastination is exhausting, and useful.&lt;/p&gt;</content><category term="snippet"/><category term="meta"/><category term="thinking"/></entry><entry><title>vim split rearranging</title><link href="https://johnmathews.eu/vim-split-rearranging.html" rel="alternate"/><published>2021-03-29T23:09:27+02:00</published><updated>2021-03-29T23:09:27+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-29:/vim-split-rearranging.html</id><summary type="html"/><content type="html">&lt;p&gt;Vim  split rearranging:&lt;/p&gt;
&lt;p&gt;&lt;c-w&gt;x swap buffers, but keep arrangement the same
&lt;c-w&gt;H (capital H) - make the current split cover the left of the screen. (J,
K, L covers the bottom, top, right of the screen) &lt;/c-w&gt;&lt;/c-w&gt;&lt;/p&gt;</content><category term="snippet"/><category term="vim"/></entry><entry><title>pelican plugin guide</title><link href="https://johnmathews.eu/pelican-plugin-guide.html" rel="alternate"/><published>2021-03-29T23:07:52+02:00</published><updated>2021-03-29T23:07:52+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-29:/pelican-plugin-guide.html</id><summary type="html"/><content type="html">&lt;p&gt;Here is a guide about writing plugins for Pelican, a static site generator written in Python.&lt;/p&gt;
&lt;p&gt;https://blog.geographer.fr/pelican-plugins&lt;/p&gt;
&lt;p&gt;Thanks @geographeur&lt;/p&gt;</content><category term="snippet"/><category term="pelican"/><category term="plugin"/><category term="guide"/></entry><entry><title>read and write same file</title><link href="https://johnmathews.eu/read-and-write-same-file.html" rel="alternate"/><published>2021-03-24T23:11:55+01:00</published><updated>2021-03-24T23:11:55+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-24:/read-and-write-same-file.html</id><summary type="html"/><content type="html">&lt;p&gt;Tried to read and write the same file in a pipeline, and got caught out by a race condition (why is the file empty?!). Do this instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;some_script &amp;lt; file &amp;gt; smscrpt.&lt;span class="nv"&gt;$$&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; mv smscrpt.&lt;span class="nv"&gt;$$&lt;/span&gt; file &lt;span class="o"&gt;||&lt;/span&gt; rm smscrpt.&lt;span class="nv"&gt;$$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the last part removes the temporary file if it errors&lt;/p&gt;</content><category term="snippet"/><category term="shell"/><category term="pipe"/><category term="syntax"/><category term="bash"/></entry><entry><title>json tools</title><link href="https://johnmathews.eu/json-tools.html" rel="alternate"/><published>2021-03-24T23:10:45+01:00</published><updated>2021-03-24T23:10:45+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-24:/json-tools.html</id><summary type="html"/><content type="html">&lt;p&gt;json tools:&lt;/p&gt;
&lt;p&gt;jj - json stream editor https://github.com/tidwall/jj
jq - json processor 
python -m json.tool &lt;/p&gt;
&lt;p&gt;I like jq for pretty printing json output, jj for making json pretty or condensed&lt;/p&gt;</content><category term="snippet"/><category term="json"/></entry><entry><title>docker commands</title><link href="https://johnmathews.eu/docker-commands.html" rel="alternate"/><published>2021-03-17T23:14:43+01:00</published><updated>2021-03-17T23:14:43+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-17:/docker-commands.html</id><summary type="html"/><content type="html">&lt;p&gt;docker containers - foreground, background, attach, logs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -d ... 
docker logs -f &lt;id&gt;
docker run -it ...
docker run -itd 
docker container attach &lt;id&gt;
&lt;c-p&gt;&lt;c-q&gt; -&amp;gt; detach from container interactively
&lt;/c-q&gt;&lt;/c-p&gt;&lt;/id&gt;&lt;/id&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;https://stackoverflow.com/questions/34029680/docker-detached-mode&lt;/p&gt;</content><category term="snippet"/><category term="docker"/></entry><entry><title>Python Notes</title><link href="https://johnmathews.eu/python-notes-2.html" rel="alternate"/><published>2021-03-17T09:12:00+01:00</published><updated>2021-03-17T09:12:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-17:/python-notes-2.html</id><summary type="html"/><content type="html">&lt;h1 id="95_call__"&gt;__call__()&lt;/h1&gt;
&lt;p&gt;In Python, every time you call a function or method such as &lt;code&gt;my_function()&lt;/code&gt; or
&lt;code&gt;my_class.my_method()&lt;/code&gt; the interpreter will replace the &lt;code&gt;(&lt;/code&gt; with
&lt;code&gt;.__call__(&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Prefixer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then use &lt;em&gt;prefixer&lt;/em&gt; like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;simonsays&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Prefixer&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Simon says: "&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; simonsays&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"jump up high!"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;'Simon says: jump up high!'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Every time you call a function or method, you’re really just calling a built in
&lt;code&gt;__call__&lt;/code&gt; method.&lt;/p&gt;
&lt;h1 id="there-should-be-one-and-preferably-only-one-obvious-way-to-do-something"&gt;There should be one, and preferably only one, obvious way to do something&lt;/h1&gt;
&lt;p&gt;It’s in the ‘zen of Python’, which is a set of guidelines that help make
design decisions. It’s a choice that Python made, and other languages do it differently.&lt;/p&gt;
&lt;p&gt;There are different
&lt;a href="https://johnmathews.eu/python-notes.html#levels-of-python-code"&gt;levels&lt;/a&gt; to
languages and this applies more to the idiom level than the design pattern
level. It applies even less at the architectural level where there can be
several equally good ways of organizing business logic and data representations.&lt;/p&gt;
&lt;p&gt;Perl has the “&lt;span class="caps"&gt;TMTOWTDI&lt;/span&gt;” (tim towtdi) principle - “There’s More Than One Way To Do
It”. Perl’s philosophy is to give users more than one way to do something.&lt;/p&gt;</content><category term="Technical/Developer Tools"/><category term="python"/><category term="learning notes"/></entry><entry><title>Adding Search</title><link href="https://johnmathews.eu/Adding-search.html" rel="alternate"/><published>2021-03-12T17:27:00+01:00</published><updated>2021-03-12T17:27:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-12:/Adding-search.html</id><summary type="html"/><content type="html">&lt;p&gt;I’ve added search to this blog. Results are generated as you type. Try it by
typing &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;cmd-k&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you look on the Pelican &lt;a href="https://github.com/pelican-plugins"&gt;plugins&lt;/a&gt; index
you’ll see that &lt;a href="https://github.com/pelican-plugins/tipue-search"&gt;Tipue search&lt;/a&gt;
is the only search tool with a ready-made Pelican plugin, but unfortunately the
project seems to have died and the projects &lt;a href="https://tipue.com/"&gt;website&lt;/a&gt; is
now something else.&lt;/p&gt;
&lt;p&gt;But searching a static site must be quite a common need and googling for
alternatives gave me a few choices. &lt;a href="https://lunrjs.com/"&gt;Lunr.js&lt;/a&gt; seems to be
the most popular, but it also seemed fairly complicated and like it was
probably more than I needed. I went with &lt;a href="https://github.com/tinysearch/tinysearch"&gt;Tiny
Search&lt;/a&gt; because it seemed to do what
I needed and was easy to setup. There’s even an example for
Pelican blogs.&lt;/p&gt;
&lt;p&gt;One hurdle to success was minimising the false positives. The default settings
seem to prioritise keeping the size of the index small (tiny) over giving a
good user experience. Maybe its because the amount of text on my site is
significanly less, or more, than the typical use case. Either way, after
checking the project’s issues on Github I found an issue that matched my
problem perfectly. The solution is to increase the tiny_magic variable at build time.&lt;/p&gt;
&lt;p&gt;According to the Readme, this requires using a container and building the index
using &lt;code&gt;docker run...&lt;/code&gt;. Unfortunately the Dockerfile wouldn’t complete without
errors. Checking the issues again and adding to the discussion resulted in an
alternative Dockerfile being suggested, which works. Woohoo! I could then build
the search index with a massive tiny_magic value (2048).&lt;/p&gt;
&lt;p&gt;Then something weird happened. I write in Vim and I use &lt;code&gt;fzf&lt;/code&gt; to find and open
files. I realised that &lt;code&gt;fzf&lt;/code&gt; had stopped working. After some investigating, I
realised it was only not working in the blog project, and that &lt;code&gt;fzf.vim&lt;/code&gt; calls
the &lt;code&gt;fzf&lt;/code&gt; &lt;span class="caps"&gt;CLI&lt;/span&gt; tool, which in turn calls the &lt;code&gt;ripgrep&lt;/code&gt; tool. The underlying
issue was that &lt;code&gt;ripgrep&lt;/code&gt;  wasn’t working, and after a few hours (sob) of
debugging, I found out that one of the things that makes &lt;code&gt;rg&lt;/code&gt; special is that
it ignores stuff in your .gitignore file. Sneakily, and without me  noticing,
the Docker image for constructing the tinysearch files had created a
.gitignore file with a single entry. The entry was *, which selects
everything. So &lt;code&gt;rg&lt;/code&gt; was ignoring everything, and giving no results. Which
meant I couldn’t find and open files.&lt;/p&gt;
&lt;p&gt;I still don’t know how (or which part of) the Dockerfile does this, so I’ve
created a .gitignore-master file which contains the correct content, and
after I generate a new search index I replace the new traitorous .gitignore
with the contents of .gitignore-master. I’ll come back to it later
when/if I have a better understanding of Dockerfile syntax, or Rust.&lt;/p&gt;
&lt;p&gt;Adding search to the site made the content feel a lot closer and more
accessible. Once it was working I immediately wanted to use some keyboard
shortcuts to open the search box and select results. Kind of like
&lt;a href="https://tailwindcss.com/"&gt;tailwindcss.com&lt;/a&gt; does it. It feels really fast and precise.&lt;/p&gt;
&lt;p&gt;Googling for some jquery packages, and also some vanilla javaScript showed me
enough to get things working. You can hit &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;ctrl-k&lt;/code&gt; or &lt;code&gt;cmd-k&lt;/code&gt; and bring up a search box
that populates results as you type!&lt;/p&gt;
&lt;p&gt;Only whole words are matched unfortunately, but its still a super useful
feature. The search index includes article content as well as article titles
and categories. I’d like to tweak a few of the keyboard shortcut behaviours,
and add the contents of various pages (which aren’t articles) to the search index.&lt;/p&gt;
&lt;h2 id="update"&gt;Update&lt;/h2&gt;
&lt;p&gt;I’ve reimplemented search using &lt;code&gt;fuse.js&lt;/code&gt;. You can read about it &lt;a href="https://johnmathews.eu/fuse-search.html"&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="Technical/Web"/><category term="blog"/><category term="search"/><category term="tinysearch"/><category term="web"/></entry><entry><title>pipe a script files into bash</title><link href="https://johnmathews.eu/pipe-a-script-files-into-bash.html" rel="alternate"/><published>2021-03-11T23:16:13+01:00</published><updated>2021-03-11T23:16:13+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-11:/pipe-a-script-files-into-bash.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;code&gt;sh -s&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Pipe a script file into bash, probably one you just &lt;code&gt;curl&lt;/code&gt;-ed&lt;/p&gt;
&lt;p&gt;e.g:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -sSfL https://example.com/install.sh &lt;span class="p"&gt;|&lt;/span&gt; sh -s
&lt;/pre&gt;&lt;/div&gt;</content><category term="snippet"/><category term="bash"/><category term="syntax"/><category term="shell"/></entry><entry><title>split long output onto multiple lines</title><link href="https://johnmathews.eu/split-long-output-onto-multiple-lines.html" rel="alternate"/><published>2021-03-10T23:19:12+01:00</published><updated>2021-03-10T23:19:12+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-10:/split-long-output-onto-multiple-lines.html</id><summary type="html"/><content type="html">&lt;p&gt;Split long output onto multiple lines (find and replace on output)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;tr&lt;/span&gt; &lt;span class="s1"&gt;':'&lt;/span&gt; &lt;span class="s1"&gt;'\n'&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="s1"&gt;'s/:/\n/g'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="snippet"/><category term="bash"/><category term="linux"/></entry><entry><title>ripgrep regret</title><link href="https://johnmathews.eu/ripgrep-regret.html" rel="alternate"/><published>2021-03-10T23:18:09+01:00</published><updated>2021-03-10T23:18:09+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-10:/ripgrep-regret.html</id><summary type="html"/><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Without noticing, create a .gitignore file with a single * in it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spend a day trying to understand why ripgrep has stopped working for only 1 project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sad face.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="snippet"/><category term="ripgrep"/><category term="fail"/></entry><entry><title>teaching kids about money</title><link href="https://johnmathews.eu/teaching-kids-about-money.html" rel="alternate"/><published>2021-03-05T23:23:46+01:00</published><updated>2021-03-05T23:23:46+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-05:/teaching-kids-about-money.html</id><summary type="html"/><content type="html">&lt;p&gt;Teaching my kids about money and work is having an effect. &lt;/p&gt;
&lt;p&gt;Yesterday, my daughter made a painting for me and asked my to buy it using
pretend money.&lt;/p&gt;</content><category term="snippet"/><category term="parenting"/><category term="kids"/><category term="money"/><category term="teaching"/></entry><entry><title>stop prepending sudo to docker commands</title><link href="https://johnmathews.eu/stop-prepending-sudo-to-docker-commands.html" rel="alternate"/><published>2021-03-05T23:22:58+01:00</published><updated>2021-03-05T23:22:58+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-05:/stop-prepending-sudo-to-docker-commands.html</id><summary type="html"/><content type="html">&lt;p&gt;Stop prepending docker commands with sudo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo groupadd docker -&amp;gt; make the group 
sudo gpasswd -a &lt;span class="nv"&gt;$USER&lt;/span&gt; docker -&amp;gt; add &lt;span class="nv"&gt;$USER&lt;/span&gt; to the docker group
newgrp docker -&amp;gt; activate the changes
&lt;/pre&gt;&lt;/div&gt;</content><category term="snippet"/><category term="sudo"/><category term="docker"/><category term="linux"/></entry><entry><title>cat and a new line</title><link href="https://johnmathews.eu/cat-and-a-new-line.html" rel="alternate"/><published>2021-03-05T23:21:43+01:00</published><updated>2021-03-05T23:21:43+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-05:/cat-and-a-new-line.html</id><summary type="html"/><content type="html">&lt;p&gt;If you’re &lt;code&gt;cat&lt;/code&gt;-ing a file and the bash prompt doesn’t start on a new line (cos
the file you displayed using cat doesn’t end with a new line char) the
following will fix it:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cat &lt;filename&gt; ; echo&lt;/filename&gt;&lt;/code&gt;&lt;/p&gt;</content><category term="snippet"/><category term="cat"/><category term="linux"/><category term="bash"/><category term="shell"/></entry><entry><title>Cardano: Generating Addresses</title><link href="https://johnmathews.eu/cardano-generating-addresses.html" rel="alternate"/><published>2021-03-05T16:14:00+01:00</published><updated>2021-03-05T16:14:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-05:/cardano-generating-addresses.html</id><summary type="html"/><content type="html">&lt;p&gt;If many different customers are to deposit or send &lt;span class="caps"&gt;ADA&lt;/span&gt; (The unit of currency on the
Cardano blockchain) to a Cardano node, it will be necessary to determine which
customer is responsible for each transaction so that the correct customer
account can be updated.&lt;/p&gt;
&lt;p&gt;As with many things involving blockchains, this initially seemed like a simple
requirement but involved several hours of work. &lt;/p&gt;
&lt;p&gt;Cardano wallets are generated using a parameter called ADDRESS_POOL_GAP. The
default value is 20, and is the number of unused addresses that the node will
generate and return to a client using the &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;. If one of the addresses is
used, the node will automatically generate another so that there are always 20
unused addresses.&lt;/p&gt;
&lt;p&gt;This is probably very convenient for personal use. If I want someone to send me
some funds, I can make a simple api call using cURL and get a fresh address.
But if you are running a service, weather its e-commerce or a financial
service, its not really good enough. Some advice on the forums says to generate
a wallet with a very large ADDRESS_POOL_GAP value such as 10,000 and just
generate a new wallet when you run out of fresh addresses, but it still
feels like a compromise.&lt;/p&gt;
&lt;p&gt;But lets explain our situation in more detail first. If a customer wants to
send us some &lt;span class="caps"&gt;ADA&lt;/span&gt;, we want to give them a fresh address that’s never been used
before and that only they have. Then we know that any funds that arrive to that
address are from a particular customer. However we don’t know if the customer
will actually use the address and transfer any funds. The address might remain
unused or it might not. Nevertheless, that address is now reserved for them,
and no one else can use it. &lt;/p&gt;
&lt;p&gt;In this way, we might need to generate and maintain a list of thousands of
addresses that are never used. Using ADDRESS_POOL_GAP for this seems like a bad solution. &lt;/p&gt;
&lt;p&gt;Fortunately,
&lt;a href="https://github.com/input-output-hk/cardano-addresses"&gt;Cardano-Addresses&lt;/a&gt; has
the answer, albeit in a fairly convoluted and obscured form. If you have the
mnemonic that was used to generate a wallet originally, you can generate 2^31
unique addresses like so:&lt;/p&gt;
&lt;p&gt;Clone the repo and build the docker image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/input-output-hk/cardano-wallet 
docker build -t cardano-address .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Get the mnemonic and generate a file containing a list of space separated words on one row.&lt;/p&gt;
&lt;p&gt;Run the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;increment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;increment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;increment+1&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; cat mnumonic.txt &lt;span class="p"&gt;|&lt;/span&gt; docker run --rm -i cardano-address key from-recovery-phrase Shelley &lt;span class="p"&gt;|&lt;/span&gt; docker run --rm -i cardano-address key child 1852H/1815H/0H/0/&lt;span class="nv"&gt;$increment&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; docker run --rm -i cardano-address key public --with-chain-code  &lt;span class="p"&gt;|&lt;/span&gt; docker run --rm -i cardano-address address payment --network-tag testnet &amp;gt; payment.addr &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; cat payment.addr &lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;</content><category term="Technical/Cryptocurrencies"/></entry><entry><title>creating users with sudo permissions</title><link href="https://johnmathews.eu/creating-users-with-sudo-permissions.html" rel="alternate"/><published>2021-03-04T23:25:50+01:00</published><updated>2021-03-04T23:25:50+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-04:/creating-users-with-sudo-permissions.html</id><summary type="html"/><content type="html">&lt;p&gt;Creating users with sudo permissions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;adduser -m &lt;username&gt;
usermod -aG sudo &lt;username&gt;
&lt;/username&gt;&lt;/username&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CentOS:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;adduser -m &lt;username&gt;
passwd &lt;username&gt;
usermod -aG wheel &lt;username&gt;
&lt;/username&gt;&lt;/username&gt;&lt;/username&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(wheel is a usergroup with sudo permissions)&lt;/p&gt;</content><category term="snippet"/><category term="sudo"/><category term="linux"/><category term="user"/><category term="admin"/></entry><entry><title>More VIM Notes</title><link href="https://johnmathews.eu/more-vim-notes.html" rel="alternate"/><published>2021-03-04T14:44:00+01:00</published><updated>2021-03-04T14:44:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-04:/more-vim-notes.html</id><summary type="html"/><content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;q:&lt;/code&gt; - opens the command line window. Good for yanking and viewing previous commands&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:UltiSnipsEdit&lt;/code&gt; - opens the ultiSnips file for the current buffers filetype.
    See which snippets are defined.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://thevaluable.dev/vim-advanced/"&gt;The Valuable Dev&lt;/a&gt;&lt;/em&gt; has the following gems that I’d like to start using.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gf&lt;/code&gt; - edit the file at the file path under the cursor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gx&lt;/code&gt; - open the file at the file path under the cursor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;[m&lt;/code&gt;, &lt;code&gt;]m&lt;/code&gt; - move to the start or end of a method &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@:&lt;/code&gt; - repeat the last command&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:&lt;c-f&gt;&lt;/c-f&gt;&lt;/code&gt; - open command history list&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; will indent a line. &lt;code&gt;.&lt;/code&gt; will repeat the operation, so &lt;code&gt;&amp;gt;&amp;gt;..&lt;/code&gt; would indent
    a line 3 times.&lt;/p&gt;
&lt;p&gt;You can use this along with a count, which will do the indention for &lt;code&gt;n&lt;/code&gt; number
of lines (with the current line being the top line). &lt;code&gt;3&amp;gt;&amp;gt;..&lt;/code&gt; will indent 3
lines 3 blocks to the right.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;c-y&gt;&lt;/c-y&gt;&lt;/code&gt; - moves screen up one line, and moves the cursor if it would go off
    the screen&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;c-e&gt;&lt;/c-e&gt;&lt;/code&gt; - moves the screen down one lines, and moves the cursor if the would
    go off screen&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;c-f&gt;&lt;/c-f&gt;&lt;/code&gt; - move screen down one page, with cursor at top of screen&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;c-b&gt;&lt;/c-b&gt;&lt;/code&gt; - move screen up one page, with cursor at bottom of screen&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.vimfromscratch.com/articles/vim-for-python/"&gt;Vim for Python&lt;/a&gt;&lt;/em&gt; has some great notes on linting and code completion plugins that
I’ve either copied or was more or less doing already.&lt;/p&gt;</content><category term="Technical/Developer Tools"/><category term="tips"/><category term="vim"/></entry><entry><title>Two Years Of Vim</title><link href="https://johnmathews.eu/two-years-of-vim.html" rel="alternate"/><published>2021-03-04T10:44:00+01:00</published><updated>2021-03-04T10:44:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-04:/two-years-of-vim.html</id><summary type="html"/><content type="html">&lt;p&gt;I’ve been feeling very comfortable with my Vim + Tmux setup recently.
Navigating around shells and files isn’t taking much mental effort anymore. Wohoo!&lt;/p&gt;
&lt;p&gt;It’s taken about 2 years of working full time with vim to get to the stage
where the commands are so intuitive that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I pepper text files outside of vim (email, notes, etc) with vim keys
     accidentally - &lt;code&gt;j&lt;/code&gt; &lt;code&gt;k&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; etc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I can’t remember what the command is to do something if I’m not actually
     doing it. When I need to do an action, I do it from muscle
     memory and I only pay attention to the underlying key press if something
     goes wrong.&lt;/p&gt;
&lt;p&gt;This is noticeable when trying to find an unbound key combination for some
 new action, or when reading an article about vim and thinking “that’s new”
 when actually I’ve been doing it without noticing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A pleasant surprise has been that it doesn’t take much effort to
     rebind a single command and retrain myself to use it. This is presumably
     because the mental effort for all the other commands has become negligible.
     In the early days, retraining a key combination took a lot more effort
     because I was already making an effort to get used to doing things in Vim.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I can work even when my vision is blurry (and my speech slurred and my head
     heavy) because I can use text objects and navigation commands to get to
     where I know text is. I’m not saying I &lt;em&gt;should&lt;/em&gt; work when I’m that tired,
     but I can, if I’m already familiar with the code/file.. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>disk full and usage commands</title><link href="https://johnmathews.eu/disk-full-and-usage-commands.html" rel="alternate"/><published>2021-03-03T23:27:11+01:00</published><updated>2021-03-03T23:27:11+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-03:/disk-full-and-usage-commands.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;code&gt;df -h&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Show disk space&lt;/p&gt;
&lt;p&gt;&lt;code&gt;du -hs .&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;See how big the current dir is&lt;/p&gt;</content><category term="snippet"/><category term="linux"/><category term="du"/><category term="df"/><category term="shell"/><category term="cli"/></entry><entry><title>cloning git repos using lfs</title><link href="https://johnmathews.eu/cloning-git-repos-using-lfs.html" rel="alternate"/><published>2021-03-03T23:24:35+01:00</published><updated>2021-03-03T23:24:35+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-03:/cloning-git-repos-using-lfs.html</id><summary type="html"/><content type="html">&lt;p&gt;Cloning large repos, or repos with large files in them, doesn’t work with &lt;code&gt;git
clone ...&lt;/code&gt; you need to use &lt;code&gt;git lfs clone ...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So why is &lt;code&gt;git lfs clone&lt;/code&gt; deprecated? What’s the replacement? &lt;/p&gt;</content><category term="snippet"/><category term="git"/><category term="git-lfs"/></entry><entry><title>Binance-Chain: Running a node</title><link href="https://johnmathews.eu/binance-node-api.html" rel="alternate"/><published>2021-03-03T15:28:00+01:00</published><updated>2021-03-03T15:28:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-03:/binance-node-api.html</id><summary type="html"/><content type="html">&lt;p&gt;This week I’ve been setting up a binance-chain node. Unlike Polkadot or
Cardano, I’m not going to run it from a container until it’s working reliably.&lt;/p&gt;
&lt;p&gt;The Binance &lt;a href="https://docs.binance.org/guides/node/install.html"&gt;docs&lt;/a&gt; show a
couple of ways to install a node. I used the &lt;code&gt;install.sh&lt;/code&gt; script and went with
default values as much as possible.&lt;/p&gt;
&lt;h1 id="installation"&gt;Installation&lt;/h1&gt;
&lt;p&gt;My first attempts to sync a full node used the &lt;code&gt;install.sh&lt;/code&gt; script, but
the node wouldn’t sync completely, it would get stuck. I setup a new &lt;span class="caps"&gt;VM&lt;/span&gt; and did
a manual install (“Option Two”) and so far the node has been syncing without
any issues. You need to download the genesis file separately in this
case. Also, be sure to download the &lt;code&gt;node-binary&lt;/code&gt; repo using &lt;code&gt;git lfs&lt;/code&gt; and not
just &lt;code&gt;git&lt;/code&gt;. It will look like it worked but &lt;code&gt;bnbchaind&lt;/code&gt; wont have completely
downloaded unless you use &lt;code&gt;lfs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It took me awhile to realise that the documentation assumes that you have an
environment variable called &lt;code&gt;BNCHOME&lt;/code&gt;. You can either create it using&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;BNCHOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/path/to/.bnbchaind/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(like you would for any environment variable) or replace the environment
variable in the start node command with the file path:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nohup bnbchaind start --home BNCHOME &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: I’m not sure if the &lt;code&gt;bnbchaind&lt;/code&gt; needs the environment variable to be set
or not. It doesn’t give errors if it isn’t set, but I seem to be having more
success when &lt;code&gt;BNCHOME&lt;/code&gt; is defined.&lt;/p&gt;
&lt;h1 id="syncing-the-node"&gt;Syncing the node&lt;/h1&gt;
&lt;p&gt;There are &lt;a href="https://docs.binance.org/guides/node/synctypes.html"&gt;three ways&lt;/a&gt; to sync a node.&lt;/p&gt;
&lt;p&gt;Fast-sync isn’t the fastest way to sync your node, hot-sync is. Using
&lt;code&gt;install.sh&lt;/code&gt; &lt;em&gt;should&lt;/em&gt; put the correct default values in the
&lt;code&gt;$BNCHOME/config/config.toml&lt;/code&gt; file, but I needed to adjust &lt;code&gt;ping_interval&lt;/code&gt; and
&lt;code&gt;pong_timeout&lt;/code&gt; to the recommended values.&lt;/p&gt;
&lt;h1 id="surprises"&gt;Surprises&lt;/h1&gt;
&lt;p&gt;The documentation assumes you have familiarity with running tasks in the
background of a terminal session, and that you’re familiar with &lt;code&gt;nohup&lt;/code&gt;. I
wasn’t - I’d even forgotten what the &lt;code&gt;&amp;amp;&lt;/code&gt; symbol does&lt;sup id="sf-binance-node-api-1-back"&gt;&lt;a class="simple-footnote" href="#sf-binance-node-api-1" title="It starts a process in the background. You can move it to the foreground with fg or see a list of running jobs using jobs. You can move a running job to the background (like a vim session) using ctrl-z"&gt;1&lt;/a&gt;&lt;/sup&gt; so I did some research and wrote some
&lt;a href="https://johnmathews.eu/nohup-and-background-processes.html"&gt;notes&lt;/a&gt;&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-binance-node-api-1"&gt;It starts a process in
the background. You can move it to the foreground with &lt;code&gt;fg&lt;/code&gt; or see a list of
running jobs using &lt;code&gt;jobs&lt;/code&gt;. You can move a running job to the background (like a
vim session) using &lt;code&gt;ctrl-z&lt;/code&gt; &lt;a class="simple-footnote-back" href="#sf-binance-node-api-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Cryptocurrencies"/></entry><entry><title>nohup</title><link href="https://johnmathews.eu/nohup.html" rel="alternate"/><published>2021-03-02T23:30:02+01:00</published><updated>2021-03-02T23:30:02+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-02:/nohup.html</id><summary type="html"/><content type="html">&lt;p&gt;Use &lt;code&gt;nohup&lt;/code&gt; to keep a curl process running even when the terminal (tty?) session autocloses at 3am.&lt;/p&gt;</content><category term="snippet"/><category term="linux"/><category term="cli"/></entry><entry><title>shell comparisons</title><link href="https://johnmathews.eu/shell-comparisons.html" rel="alternate"/><published>2021-03-02T23:28:35+01:00</published><updated>2021-03-02T23:28:35+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-02:/shell-comparisons.html</id><summary type="html"/><content type="html">&lt;p&gt;zsh isn’t a superset of bash.&lt;/p&gt;
&lt;p&gt;bash is a superset of the bourne shell.&lt;/p&gt;
&lt;p&gt;You can group shells into groups:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ksh - korn shell and zshell&lt;/li&gt;
&lt;li&gt;sh - bourne shell and bash (the bourne again shell)&lt;/li&gt;
&lt;/ol&gt;</content><category term="snippet"/><category term="zsh"/><category term="bash"/><category term="bsh"/><category term="linux"/><category term="cli"/></entry><entry><title>nohup and Background Processes</title><link href="https://johnmathews.eu/nohup-and-background-processes.html" rel="alternate"/><published>2021-03-02T13:10:00+01:00</published><updated>2021-03-02T13:10:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-02:/nohup-and-background-processes.html</id><summary type="html"/><content type="html">&lt;h1 id="stop-stuff-from-stopping"&gt;Stop stuff from stopping&lt;/h1&gt;
&lt;p&gt;If you run a command in a terminal session and the terminal session is
disconnected, the processes running in it will also be terminated.&lt;/p&gt;
&lt;p&gt;I discovered this when I was trying to download a ~500gb database
overnight. I logged in the next morning expecting to see a completed download, but
found I only had half the file.&lt;/p&gt;
&lt;h1 id="use-nohup-to-ignore-hup-signals"&gt;Use &lt;code&gt;nohup&lt;/code&gt; to ignore &lt;code&gt;HUP&lt;/code&gt; signals&lt;/h1&gt;
&lt;p&gt;One solution to this seems to be to use &lt;code&gt;nohup&lt;/code&gt;, a command that
ignores the &lt;code&gt;HUP&lt;/code&gt; signal. It stops your programme from stopping if the terminal
session its running in is stopped.&lt;/p&gt;
&lt;p&gt;By convention, the &lt;code&gt;HUP&lt;/code&gt; signal is the method used by a terminal to warn
dependent processes that it is about to logout.&lt;/p&gt;
&lt;p&gt;You probably want to run &lt;code&gt;nohup&lt;/code&gt; in the background. You might want to prevent
it from creating &lt;code&gt;nohup.out&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="close-or-redirect-fd0-fd2"&gt;Close or redirect fd0 - fd2&lt;/h1&gt;
&lt;p&gt;On Linux,  &lt;code&gt;nohup&lt;/code&gt; automatically closes &lt;code&gt;stdin&lt;/code&gt;. If you’re using MacOS or &lt;span class="caps"&gt;BSD&lt;/span&gt;
this doesn’t automatically happen, so you might want to redirect it yourself.
This is because if a background process tries to read anything from &lt;code&gt;stdin&lt;/code&gt;
then it will pause itself whilst it waits for you to bring it to the foreground
and type some input. This is probably a waste of time.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;nohup&lt;/code&gt; detects that you have redirected &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; then it won’t
create &lt;code&gt;nohup.out&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As with all commands, if you put &lt;code&gt;&amp;amp;&lt;/code&gt; at the end of the command, it will run in
the background. You can bring it to the foreground by running &lt;code&gt;fg&lt;/code&gt;, or see a
list of jobs by running &lt;code&gt;jobs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you redirect input to /dev/null (&lt;code&gt;) you will stop the program
from receiving keyboard (stdin) input, but you won’t prevent it from accessing
the terminal directly. Also you haven’t removed the program from the shell’s
process group.&lt;/code&gt;&lt;/p&gt;
&lt;h1 id="stopping-signals-using-disown"&gt;Stopping signals using &lt;code&gt;disown&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;If you want to remove a program from the shell’s process group, then
immediately after you’ve run the command to start your programme, run &lt;code&gt;disown&lt;/code&gt;
with no arguments. This will make the background process no longer associated
with the shell job and it wont have any signals forwarded to it by the shell.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;disown&lt;/code&gt;ed process gets nothing (no signals) sent to it by the shell. But
without a &lt;code&gt;nohup&lt;/code&gt; it will still be sent a &lt;code&gt;HUP&lt;/code&gt; signal sent via other means,
such as a manual &lt;code&gt;kill&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;nohup&lt;/code&gt;ed process will ignore any and all &lt;code&gt;HUP&lt;/code&gt; signal, no matter how they
are sent.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/10408816/how-do-i-use-the-nohup-command-without-getting-nohup-out"&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="update-2021-03-31"&gt;Update (2021-03-31):&lt;/h1&gt;
&lt;p&gt;Use &lt;code&gt;w&lt;/code&gt; to see who is logged in and what they are doing. It’s summary of every
user logged into a computer, what each user is currently doing, and the
load all the current activity.&lt;/p&gt;
&lt;p&gt;It’s a combination of &lt;code&gt;who&lt;/code&gt;, &lt;code&gt;uptime&lt;/code&gt;, and &lt;code&gt;ps -a&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="process-groups"&gt;Process Groups&lt;/h2&gt;
&lt;p&gt;A collection of one or more processes. It’s used to control the distribution of
a signal. When a signal is directed to a process group, the signal is delivered
to each process that is a member of the group.&lt;/p&gt;
&lt;h2 id="sessions"&gt;Sessions&lt;/h2&gt;
&lt;p&gt;A collection of one or more process groups. A process may not create a process
group that belongs to another session. A process is not permitted
to join a process group that is a member of another session. A process
is not permitted to migrate from one session to another.&lt;/p&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>File Descriptors and /dev/null</title><link href="https://johnmathews.eu/file-descriptors.html" rel="alternate"/><published>2021-03-02T11:36:00+01:00</published><updated>2021-03-02T11:36:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-02:/file-descriptors.html</id><summary type="html"/><content type="html">&lt;h2 id="devnull"&gt;/dev/null&lt;/h2&gt;
&lt;p&gt;In Linux everything is a file, including virtual devices like keyboards. Processes
(programmes) can request access to or from these devices.&lt;/p&gt;
&lt;p&gt;The only difference between these virtual device “files” and real files, is
that for a virtual device the &lt;span class="caps"&gt;OS&lt;/span&gt; generates the data that goes into the file,
instead of reading the data from storage.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/dev/null&lt;/code&gt; is a virtual device that looks like a file and is used to write
output into a black hole that is discarded, lost forever and never seen. It
isn’t written to the terminal.&lt;/p&gt;
&lt;h2 id="file-descriptors"&gt;File Descriptors&lt;/h2&gt;
&lt;p&gt;File descriptors are integer values assigned to a file. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;stdin&lt;/strong&gt; has a file descriptor of 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;stdout&lt;/strong&gt; has a file descriptor of 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;stderr&lt;/strong&gt; has a file descriptor of 2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Two outputs are generated whenever a &lt;span class="caps"&gt;CLI&lt;/span&gt; is run &lt;code&gt;stdout&lt;/code&gt; and
&lt;code&gt;stderr&lt;/code&gt;. By default, both these data streams are associated with the
terminal. You can use file descriptors to redirect them.&lt;/p&gt;
&lt;p&gt;If a command exits successfully, the exit status is 0.&lt;/p&gt;
&lt;p&gt;If it exits unsuccessfully, the exit status will be something else.&lt;/p&gt;
&lt;p&gt;If you don’t specify which file descriptor you want to use, bash will use
&lt;code&gt;stdout&lt;/code&gt; by default.&lt;/p&gt;
&lt;p&gt;The following redirects &lt;code&gt;stdout&lt;/code&gt; away from the terminal and into &lt;code&gt;/dev/null&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; “Hello World” &amp;gt; log.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will redirect &lt;code&gt;stderr&lt;/code&gt; into a file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ asdfadsa &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt; error.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you run a command that generates lots of error messages along with “good”
messages, you can redirect all the error messages (&lt;code&gt;stderr&lt;/code&gt;) into &lt;code&gt;/dev/null&lt;/code&gt;
so that you can only see the useful &lt;code&gt;stdout&lt;/code&gt; messages. e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ grep -r hello /sys/ &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt; /dev/null
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you want to run a command and only see the errors, (&lt;code&gt;stderr&lt;/code&gt;) then you can
filter out all the &lt;code&gt;stdout&lt;/code&gt; by redirecting the &lt;code&gt;stdout&lt;/code&gt; messages to
&lt;code&gt;/dev/null&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ping google.com &lt;span class="m"&gt;1&lt;/span&gt;&amp;gt; /dev/null
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="redirect-all-output-into-devnull-if-you-want-a-command-to-run-quietly"&gt;Redirect all output into /dev/null if you want a command to run quietly,&lt;/h2&gt;
&lt;p&gt;Redirect all the output. The command below redirects &lt;code&gt;stdout&lt;/code&gt; to &lt;code&gt;/dev/null&lt;/code&gt;
(the default file descriptor is 1 if it isn’t specified) and then redirects
file descriptor 2 into file descriptor 1.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ grep -r hello /sys/ &amp;gt; /dev/null &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="read-input-from-a-file-instead-of-the-terminal"&gt;Read input from a file instead of the terminal&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;infile &lt;="" pre=""&gt;&lt;/infile&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="direct-stderr-to-append-to-a-particular-file"&gt;Direct stderr to append to a particular file&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&amp;gt;logfile
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="combining-file-descriptors"&gt;Combining file descriptors&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; means send &lt;code&gt;stderr&lt;/code&gt; wherever &lt;code&gt;stdout&lt;/code&gt; is going. This means that you’ve
combined &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; into one data stream and you can’t separate them
anymore. It also means you can pipe &lt;code&gt;stderr&lt;/code&gt; the same as you can &lt;code&gt;stdout&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="input"&gt;Input&lt;/h1&gt;
&lt;p&gt;You can redirect &lt;code&gt;stdin&lt;/code&gt; similarly. If you run &lt;code&gt; then if the program
attempt to read from &lt;code&gt;stdin&lt;/code&gt; then it will get end-of-file. &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The merge (or redirect) syntax (for example &lt;code&gt;&amp;lt;&amp;amp;2&lt;/code&gt;) won’t work, because you can
only redirect in the same direction.&lt;/p&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>Cardano: Running a full node</title><link href="https://johnmathews.eu/cardano-node-api.html" rel="alternate"/><published>2021-03-01T18:01:00+01:00</published><updated>2021-03-01T18:01:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-01:/cardano-node-api.html</id><summary type="html"/><content type="html">&lt;p&gt;I recently deployed a Cardano node on Google Cloud Platform and used its &lt;span class="caps"&gt;API&lt;/span&gt; to
create and watch addresses, and make transactions.&lt;/p&gt;
&lt;p&gt;Helpfully, Cardano make it quite simple to get up and running if you are
familiar with Docker-Compose, and know where to look, and what questions to ask.&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#docker-compose"&gt;Docker Compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cardano-wallet"&gt;Cardano wallet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cardano-cli"&gt;Cardano-&lt;span class="caps"&gt;CLI&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rest-api"&gt;&lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#surprising-things"&gt;Surprising things&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="docker-compose"&gt;Docker Compose&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/input-output-hk/cardano-wallet"&gt;Cardano Wallet&lt;/a&gt;
repo&lt;sup id="sf-cardano-node-api-1-back"&gt;&lt;a class="simple-footnote" href="#sf-cardano-node-api-1" title="https://github.com/input-output-hk/cardano-wallet"&gt;1&lt;/a&gt;&lt;/sup&gt;
contains almost all you need to get started. The command to run is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NETWORK=testnet docker-compose up -d&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This does a couple of things for you:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Creates a Cardano node and begins syncing with the network&lt;/li&gt;
&lt;li&gt;Creates a Cardano Wallet instance&lt;/li&gt;
&lt;li&gt;Creates all the required data volumes&lt;/li&gt;
&lt;li&gt;Maps the ports required to make &lt;span class="caps"&gt;API&lt;/span&gt; calls.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Running &lt;code&gt;docker ps&lt;/code&gt; should show that two containers are running, &lt;code&gt;cardano-node&lt;/code&gt;
and &lt;code&gt;cardano-wallet&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="cardano-wallet"&gt;Cardano wallet&lt;/h1&gt;
&lt;p&gt;In order to run &lt;code&gt;cardano-wallet&lt;/code&gt; commands (not using the &lt;span class="caps"&gt;API&lt;/span&gt;, but directly on
the node) you’ll need to &lt;code&gt;docker exec&lt;/code&gt; into the container like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker &lt;span class="nb"&gt;exec&lt;/span&gt; -it cardano-wallet_cardano-wallet_1 sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you  can run commands like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cardano-wallet network information
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="cardano-cli"&gt;Cardano-&lt;span class="caps"&gt;CLI&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;Similarly, if you want to use the &lt;code&gt;cardano-cli&lt;/code&gt; programme, exec into the
&lt;code&gt;cardano-wallet&lt;/code&gt; container:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker &lt;span class="nb"&gt;exec&lt;/span&gt; -it cardano-wallet_cardano-node_1 sh 
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cardano-cli —version
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="rest-api"&gt;&lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;Perhaps you wont need to do this though because once the containers are up and
running and online, you can use the &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; to monitor the node, make
transactions, and watch
addresses.&lt;sup id="sf-cardano-node-api-2-back"&gt;&lt;a class="simple-footnote" href="#sf-cardano-node-api-2" title="https://input-output-hk.github.io/cardano-wallet/api/edge/#operation/postWallet"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;For example, a good test to see if the node is ok is to run &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl http://localhost:8090/v2/network/information
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Addresses on Cardano need to be &lt;span class="caps"&gt;BIP39&lt;/span&gt; compliant, and before you can use the
&lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; to create the address you will need to have already generated the keys
and the mnemonic. This can be done using various other tools
(&lt;a href="https://iancoleman.io/bip39/"&gt;web page&lt;/a&gt;, &lt;a href="https://github.com/trezor/python-mnemonic"&gt;python&lt;/a&gt;) and the results put into a &lt;span class="caps"&gt;JSON&lt;/span&gt; file
according to the &lt;span class="caps"&gt;API&lt;/span&gt; spec.&lt;/p&gt;
&lt;h1 id="surprising-things"&gt;Surprising things&lt;/h1&gt;
&lt;p&gt;Cardano requires that addresses are created sequentially and instead of
allowing the user to generate them &lt;em&gt;ad-hoc&lt;/em&gt;, the node by default will manage
the creation of addresses of each
wallet.&lt;sup id="sf-cardano-node-api-3-back"&gt;&lt;a class="simple-footnote" href="#sf-cardano-node-api-3" title="https://input-output-hk.github.io/adrestia/docs/common-use-cases/how-to-create-addresses/"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;The value of &lt;code&gt;ADDRESS_POOL_GAP&lt;/code&gt; sets the number of unused addresses in each
wallet. By default this is 20. When an address is used, the node will
automatically generate a new unused address for the wallet, so that there is
always a pool of 20 unused addresses.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-cardano-node-api-1"&gt;&lt;a href="https://github.com/input-output-hk/cardano-wallet"&gt;https://github.com/input-output-hk/cardano-wallet&lt;/a&gt; &lt;a class="simple-footnote-back" href="#sf-cardano-node-api-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-cardano-node-api-2"&gt;&lt;a href="https://input-output-hk.github.io/cardano-wallet/api/edge/#operation/postWallet"&gt;https://input-output-hk.github.io/cardano-wallet/api/edge/#operation/postWallet&lt;/a&gt; &lt;a class="simple-footnote-back" href="#sf-cardano-node-api-2-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-cardano-node-api-3"&gt;&lt;a href="https://input-output-hk.github.io/adrestia/docs/common-use-cases/how-to-create-addresses/"&gt;https://input-output-hk.github.io/adrestia/docs/common-use-cases/how-to-create-addresses/&lt;/a&gt; &lt;a class="simple-footnote-back" href="#sf-cardano-node-api-3-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Cryptocurrencies"/></entry><entry><title>Polkadot: Running and interacting with a full node</title><link href="https://johnmathews.eu/running-a-polkadot-node.html" rel="alternate"/><published>2021-03-01T17:40:00+01:00</published><updated>2021-03-01T17:40:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-03-01:/running-a-polkadot-node.html</id><summary type="html"/><content type="html">&lt;p&gt;I recently set up a Polkadot node on Google Cloud Platform that could create
addresses and make transactions.&lt;/p&gt;
&lt;p&gt;Instead of building from source I used Docker. After some troubleshooting, I
found the command to run is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -it -p &lt;span class="m"&gt;30333&lt;/span&gt;:30333 -p &lt;span class="m"&gt;9944&lt;/span&gt;:9944 -p &lt;span class="m"&gt;80&lt;/span&gt;:9933 -v /mnt/polkadot:/polkadot/.local/share parity/polkadot:latest --rpc-external --rpc-cors&lt;span class="o"&gt;=&lt;/span&gt;all --chain westend --ws-external
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This differs from the (current) documentation in two ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The data volume needs to point to &lt;code&gt;/polkadot/.local/share&lt;/code&gt;. The symlink that
     is supposed to exist for &lt;code&gt;/data&lt;/code&gt; appears to be broken in the current image.
     See this GitHub &lt;a href="https://github.com/paritytech/polkadot/issues/2482"&gt;issue&lt;/a&gt; for details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Port 9944 needs to be mapped.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One of the first &lt;span class="caps"&gt;API&lt;/span&gt; calls you are likely to make to check that things are
    working as expected, particularly for WebSocket connections, is to
    open to a &lt;span class="caps"&gt;WS&lt;/span&gt; connection to be notified when your node syncs a new block.
    The node only does this once it has caught up with its piers. Whilst it is
    still syncing it will only return the current highest block when you make
    the initial &lt;span class="caps"&gt;API&lt;/span&gt; call. I ended up chatting to one of the Parity devs about
    this issue on discord and then on &lt;a href="https://stackoverflow.com/questions/66358685/polkadot-websocket-api-doesnt-listen-for-new-blocks/66365716?noredirect=1#comment117342945_66365716"&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Other than that, everything went as described in the documentation.&lt;/p&gt;</content><category term="Technical/Cryptocurrencies"/></entry><entry><title>Microservices, Docker, Azure</title><link href="https://johnmathews.eu/microservices_events_docker.html" rel="alternate"/><published>2021-02-02T13:31:00+01:00</published><updated>2021-02-02T13:31:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-02-02:/microservices_events_docker.html</id><summary type="html"/><content type="html">&lt;p&gt;This is a great presentation about microservices and event driven architectures.&lt;/p&gt;
&lt;div class="relative" style="padding-top: 56.25%"&gt;
&lt;iframe allow="autoplay; encrypted-media" allowfullscreen="" class="absolute inset-0 w-full h-full" frameborder="0" src="https://www.youtube.com/embed/sSm2dRarhPo"&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;And this is a comprehensive overview of Azure&lt;/p&gt;
&lt;div class="relative" style="padding-top: 56.25%"&gt;
&lt;iframe allow="autoplay; encrypted-media" allowfullscreen="" class="absolute inset-0 w-full h-full" frameborder="0" src="https://www.youtube.com/embed/NKEFWyqJ5XA"&gt;
&lt;/iframe&gt;
&lt;/div&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>Regrets Of The Dying</title><link href="https://johnmathews.eu/regrets-of-the-dying.html" rel="alternate"/><published>2021-02-01T22:52:00+01:00</published><updated>2021-02-01T22:52:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-02-01:/regrets-of-the-dying.html</id><summary type="html"/><content type="html">&lt;p&gt;I wish that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I’d had the courage to live a life true to myself, not the life others expected of me.&lt;/li&gt;
&lt;li&gt;I hadn’t worked so hard.&lt;/li&gt;
&lt;li&gt;I’d had the courage to express my feelings.&lt;/li&gt;
&lt;li&gt;I had stayed in touch with my friends.&lt;/li&gt;
&lt;li&gt;I’d let myself be happier.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;…the five most common regrets of terminally ill patients, as described by a
palliative care nurse&lt;sup id="sf-regrets-of-the-dying-1-back"&gt;&lt;a class="simple-footnote" href="#sf-regrets-of-the-dying-1" title="Source"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-regrets-of-the-dying-1"&gt;&lt;a href="https://bronnieware.com/blog/regrets-of-the-dying/"&gt;Source&lt;/a&gt; &lt;a class="simple-footnote-back" href="#sf-regrets-of-the-dying-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Non-technical/Journal"/></entry><entry><title>A List Of Unconnected Thoughts And Aphorisms</title><link href="https://johnmathews.eu/a-list-of-unconnected-thoughts-and-aphorisms.html" rel="alternate"/><published>2021-02-01T22:27:00+01:00</published><updated>2021-02-01T22:27:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-02-01:/a-list-of-unconnected-thoughts-and-aphorisms.html</id><summary type="html"/><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Do the people you care about love you back?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It does not matter how slowly you go as long as you do not stop.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assume that nobody is going to help you, and nobody is going to stop you.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Money is (just) fuel.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lets talk about the end. My current self, existing now, is to be seen in
    the context of my end, and my beginning.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you want money, ask for advice. When you want advice, ask for money.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You follow the rules of war for you, not your enemy. You fight by rules to
   keep your
   humanity.&lt;sup id="sf-a-list-of-unconnected-thoughts-and-aphorisms-1-back"&gt;&lt;a class="simple-footnote" href="#sf-a-list-of-unconnected-thoughts-and-aphorisms-1" title="source"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to be a top performer in any field you must become abnormal.
   Normal is average, which by definition, is far below the top! “We can always
   be average and do what’s normal. I’m not in this to do what’s normal.”
   –Kobe Bryant&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Becoming Abnormally Good&lt;sup id="sf-a-list-of-unconnected-thoughts-and-aphorisms-2-back"&gt;&lt;a class="simple-footnote" href="#sf-a-list-of-unconnected-thoughts-and-aphorisms-2" title="source"&gt;2&lt;/a&gt;&lt;/sup&gt; at something:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No reasonable excuses - don’t make (reasonable) excuses that let you off the hook. You need the negative emotions that leads to inspired decision making.&lt;/li&gt;
&lt;li&gt;Not Worrying About What You Can’t Control&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We know it’s best to be genuinely friendly no matter who you’re trying to
    get information out of, thanks in part to the work of Hanns Scharff and a
    slew of studies on interrogation
    techniques&lt;sup id="sf-a-list-of-unconnected-thoughts-and-aphorisms-3-back"&gt;&lt;a class="simple-footnote" href="#sf-a-list-of-unconnected-thoughts-and-aphorisms-3" title="source"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-a-list-of-unconnected-thoughts-and-aphorisms-1"&gt;&lt;a href="https://www.globalo.com/history-wwii-charlie-brown-franz-stigler-incident/"&gt;source&lt;/a&gt; &lt;a class="simple-footnote-back" href="#sf-a-list-of-unconnected-thoughts-and-aphorisms-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-a-list-of-unconnected-thoughts-and-aphorisms-2"&gt;&lt;a href="https://capitalandgrowth.org/answers/Article/3217401/Become-Abnormal"&gt;source&lt;/a&gt; &lt;a class="simple-footnote-back" href="#sf-a-list-of-unconnected-thoughts-and-aphorisms-2-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-a-list-of-unconnected-thoughts-and-aphorisms-3"&gt;&lt;a href="https://psmag.com/social-justice/nazi-interrogator-revealed-value-kindness-84747"&gt;source&lt;/a&gt; &lt;a class="simple-footnote-back" href="#sf-a-list-of-unconnected-thoughts-and-aphorisms-3-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Non-technical/Journal"/></entry><entry><title>Notes From An Interview With Geoffrey Hinton</title><link href="https://johnmathews.eu/notes-from-an-interview-with-geoffrey-hinton.html" rel="alternate"/><published>2021-02-01T22:17:00+01:00</published><updated>2021-02-01T22:17:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-02-01:/notes-from-an-interview-with-geoffrey-hinton.html</id><summary type="html"/><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Read the literature, but don’t read too much&lt;/strong&gt; of it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Trust your intuitions&lt;/strong&gt;, because if you don’t trust them then there’s no point&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="quo"&gt;‘&lt;/span&gt;&lt;strong&gt;This person is either drunk or stupid&lt;/strong&gt;‘ - feedback on one of his papers that went on to become significant &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For creative researchers; read a bit of the literature and notice something that you think everybody is doing wrong. (I guess &lt;span class="caps"&gt;GH&lt;/span&gt; is contrarian in this sense)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Look for a problem that doesn’t feel &lt;em&gt;right&lt;/em&gt;. Then figure out how to do it right.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When people tell you that your (contrarian) approach is just no good, just keep at it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Either your intuitions are good or they’re not. If they are good then you should follow them and you will eventually be successful. If they are bad then it doesn’t matter what you do.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You might as well trust your intuitions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you try to replicate a published paper you discover all the little tricks needed to make it work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Never stop programming.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you give a student something to do and they are a bad student then they’ll come back and say it didn’t work. They’ll say this because of some little decision they made which they didn’t realise was crucial. But if you give it to a good student, you can give them anything and they will come back and say it works&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read enough so that you start developing intuitions, and then trust your intuitions and go for it! - Don’t be too worried if everybody else says its nonsense.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you think it’s a really good idea, and others tell you its complete nonsense, then you know you are really onto something!&lt;/p&gt;
&lt;p&gt;One example of this is when Ramford and I first came up with variational methods, I sent a mail explaining it to a former student, who showed it to his colleagues. He told me that they said ‘Either this guy is drunk or he is just stupid’. They really really thought is was nonsense.&lt;/p&gt;
&lt;p&gt;Maybe that is partly because of how i explained it - I explained it in intuitive terms, but when you have what you think is a good idea and other people think it is complete rubbish, that is the sign of a really good idea.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;See if you can find an advisor who has beliefs similar to your own, because if you work on stuff that your adviser feels deeply about, then you’ll get a lot of good advice and time from them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read enough so that you can &lt;em&gt;trust your intuitions&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="Non-technical/Learning"/></entry><entry><title>Questions For Interesting Conversations</title><link href="https://johnmathews.eu/questions.html" rel="alternate"/><published>2021-02-01T22:05:00+01:00</published><updated>2021-02-01T22:05:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-02-01:/questions.html</id><summary type="html"/><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;What’s the &lt;strong&gt;best piece of advice&lt;/strong&gt; you ever received?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What would you say to your &lt;strong&gt;18-year-old self&lt;/strong&gt; if you had a chat with them today?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Have you ever &lt;strong&gt;lost or rejected a friend&lt;/strong&gt;?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tell me about &lt;strong&gt;a time when you changed your mind&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What have you been &lt;strong&gt;thinking about lately&lt;/strong&gt;? What’s on your mind?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do you work in a language that’s not your mother tongue? &lt;strong&gt;What’s it like to live in translation&lt;/strong&gt;?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If there is a &lt;strong&gt;choice between remembering and forgetting&lt;/strong&gt;, do you lean towards the side of forgetting?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Were you raised for &lt;strong&gt;autonomy or loyalty&lt;/strong&gt;?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Was there ever a moment where you thought, &lt;strong&gt;‘I’m giving up’&lt;/strong&gt; — what did you do?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Was your identity given to you or chosen by you&lt;/strong&gt;?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="Non-technical/Journal"/></entry><entry><title>Portfolio: Image Recognition</title><link href="https://johnmathews.eu/portfolio-image-recognition.html" rel="alternate"/><published>2021-01-26T14:34:00+01:00</published><updated>2021-01-26T14:34:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-26:/portfolio-image-recognition.html</id><summary type="html"/><content type="html">&lt;p&gt;I’ve created a &lt;a href="https://johnmathews.eu/traffic.html"&gt;computer vision
model&lt;/a&gt; that recognizes
traffic lights. I’ve also created a page where the model can be queried and the
results shown. This needed to be a custom page and not a typical blog article,
so its hosted in the portfolio section
&lt;a href="https://johnmathews.eu/traffic.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This page will redirect automatically if you view it in a browser, but for
those of you reading this using &lt;span class="caps"&gt;RSS&lt;/span&gt;, head on over and see the results!&lt;/p&gt;</content><category term="Technical/Data"/></entry><entry><title>Photographs</title><link href="https://johnmathews.eu/photographs.html" rel="alternate"/><published>2021-01-22T11:42:00+01:00</published><updated>2021-01-22T11:42:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-22:/photographs.html</id><summary type="html"/><content type="html">&lt;p&gt;&lt;a href="https://johnmathews.eu/images/photos/polder.jpeg"&gt;&lt;img alt="Polder and windmill" class="image-process-article-inline-image" loading="lazy" sizes="(min-width: 1536x) 1020px, (min-width: 1280px) 850px, (min-width: 1024px) 800px, (min-width: 768px) 800px, (min-width: 640px) 800px, 100vw" src="https://johnmathews.eu/images/photos/derivatives/article-inline-image/800w/polder.jpeg" srcset="https://johnmathews.eu/images/photos/derivatives/article-inline-image/300w/polder.jpeg 300w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/600w/polder.jpeg 600w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/800w/polder.jpeg 800w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/1600w/polder.jpeg 1600w"/&gt;&lt;/a&gt;
&lt;a href="https://johnmathews.eu/images/photos/dog_walker.jpeg"&gt;&lt;img alt="dog walker" class="image-process-article-inline-image" loading="lazy" sizes="(min-width: 1536x) 1020px, (min-width: 1280px) 850px, (min-width: 1024px) 800px, (min-width: 768px) 800px, (min-width: 640px) 800px, 100vw" src="https://johnmathews.eu/images/photos/derivatives/article-inline-image/800w/dog_walker.jpeg" srcset="https://johnmathews.eu/images/photos/derivatives/article-inline-image/300w/dog_walker.jpeg 300w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/600w/dog_walker.jpeg 600w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/800w/dog_walker.jpeg 800w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/1600w/dog_walker.jpeg 1600w"/&gt;&lt;/a&gt;
&lt;a href="https://johnmathews.eu/images/photos/stompetoren.jpeg"&gt;&lt;img alt="stompetoren" class="image-process-article-inline-image" loading="lazy" sizes="(min-width: 1536x) 1020px, (min-width: 1280px) 850px, (min-width: 1024px) 800px, (min-width: 768px) 800px, (min-width: 640px) 800px, 100vw" src="https://johnmathews.eu/images/photos/derivatives/article-inline-image/800w/stompetoren.jpeg" srcset="https://johnmathews.eu/images/photos/derivatives/article-inline-image/300w/stompetoren.jpeg 300w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/600w/stompetoren.jpeg 600w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/800w/stompetoren.jpeg 800w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/1600w/stompetoren.jpeg 1600w"/&gt;&lt;/a&gt;
&lt;a href="https://johnmathews.eu/images/photos/geese_on_polder.jpeg"&gt;&lt;img alt="geese_on_polder" class="image-process-article-inline-image" loading="lazy" sizes="(min-width: 1536x) 1020px, (min-width: 1280px) 850px, (min-width: 1024px) 800px, (min-width: 768px) 800px, (min-width: 640px) 800px, 100vw" src="https://johnmathews.eu/images/photos/derivatives/article-inline-image/800w/geese_on_polder.jpeg" srcset="https://johnmathews.eu/images/photos/derivatives/article-inline-image/300w/geese_on_polder.jpeg 300w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/600w/geese_on_polder.jpeg 600w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/800w/geese_on_polder.jpeg 800w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/1600w/geese_on_polder.jpeg 1600w"/&gt;&lt;/a&gt;
&lt;a href="https://johnmathews.eu/images/photos/bridges_and_gates.jpeg"&gt;&lt;img alt="bridges and gates" class="image-process-article-inline-image" loading="lazy" sizes="(min-width: 1536x) 1020px, (min-width: 1280px) 850px, (min-width: 1024px) 800px, (min-width: 768px) 800px, (min-width: 640px) 800px, 100vw" src="https://johnmathews.eu/images/photos/derivatives/article-inline-image/800w/bridges_and_gates.jpeg" srcset="https://johnmathews.eu/images/photos/derivatives/article-inline-image/300w/bridges_and_gates.jpeg 300w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/600w/bridges_and_gates.jpeg 600w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/800w/bridges_and_gates.jpeg 800w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/1600w/bridges_and_gates.jpeg 1600w"/&gt;&lt;/a&gt;
&lt;a href="https://johnmathews.eu/images/photos/clouds_and_lake.jpeg"&gt;&lt;img alt="clounds above a lake" class="image-process-article-inline-image" loading="lazy" sizes="(min-width: 1536x) 1020px, (min-width: 1280px) 850px, (min-width: 1024px) 800px, (min-width: 768px) 800px, (min-width: 640px) 800px, 100vw" src="https://johnmathews.eu/images/photos/derivatives/article-inline-image/800w/clouds_and_lake.jpeg" srcset="https://johnmathews.eu/images/photos/derivatives/article-inline-image/300w/clouds_and_lake.jpeg 300w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/600w/clouds_and_lake.jpeg 600w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/800w/clouds_and_lake.jpeg 800w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/1600w/clouds_and_lake.jpeg 1600w"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/images/photos/sunset-turbines.jpeg"&gt;&lt;img alt="sunset turbines" class="image-process-article-inline-image" loading="lazy" sizes="(min-width: 1536x) 1020px, (min-width: 1280px) 850px, (min-width: 1024px) 800px, (min-width: 768px) 800px, (min-width: 640px) 800px, 100vw" src="https://johnmathews.eu/images/photos/derivatives/article-inline-image/800w/sunset-turbines.jpeg" srcset="https://johnmathews.eu/images/photos/derivatives/article-inline-image/300w/sunset-turbines.jpeg 300w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/600w/sunset-turbines.jpeg 600w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/800w/sunset-turbines.jpeg 800w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/1600w/sunset-turbines.jpeg 1600w"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/images/photos/boat_in_mist.jpeg"&gt;&lt;img alt="boat in the mist" class="image-process-article-inline-image" loading="lazy" sizes="(min-width: 1536x) 1020px, (min-width: 1280px) 850px, (min-width: 1024px) 800px, (min-width: 768px) 800px, (min-width: 640px) 800px, 100vw" src="https://johnmathews.eu/images/photos/derivatives/article-inline-image/800w/boat_in_mist.jpeg" srcset="https://johnmathews.eu/images/photos/derivatives/article-inline-image/300w/boat_in_mist.jpeg 300w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/600w/boat_in_mist.jpeg 600w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/800w/boat_in_mist.jpeg 800w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/1600w/boat_in_mist.jpeg 1600w"/&gt;&lt;/a&gt;
&lt;a href="https://johnmathews.eu/images/photos/path_to_knowwhere.jpeg"&gt;&lt;img alt="path going nowhere" class="image-process-article-inline-image" loading="lazy" sizes="(min-width: 1536x) 1020px, (min-width: 1280px) 850px, (min-width: 1024px) 800px, (min-width: 768px) 800px, (min-width: 640px) 800px, 100vw" src="https://johnmathews.eu/images/photos/derivatives/article-inline-image/800w/path_to_knowwhere.jpeg" srcset="https://johnmathews.eu/images/photos/derivatives/article-inline-image/300w/path_to_knowwhere.jpeg 300w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/600w/path_to_knowwhere.jpeg 600w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/800w/path_to_knowwhere.jpeg 800w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/1600w/path_to_knowwhere.jpeg 1600w"/&gt;&lt;/a&gt;
&lt;a href="https://johnmathews.eu/images/photos/path_to_the_stars.jpeg"&gt;&lt;img alt="path to the stars" class="image-process-article-inline-image" loading="lazy" sizes="(min-width: 1536x) 1020px, (min-width: 1280px) 850px, (min-width: 1024px) 800px, (min-width: 768px) 800px, (min-width: 640px) 800px, 100vw" src="https://johnmathews.eu/images/photos/derivatives/article-inline-image/800w/path_to_the_stars.jpeg" srcset="https://johnmathews.eu/images/photos/derivatives/article-inline-image/300w/path_to_the_stars.jpeg 300w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/600w/path_to_the_stars.jpeg 600w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/800w/path_to_the_stars.jpeg 800w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/1600w/path_to_the_stars.jpeg 1600w"/&gt;&lt;/a&gt;
&lt;a href="https://johnmathews.eu/images/photos/floating_huts.jpeg"&gt;&lt;img alt="floating huts" class="image-process-article-inline-image" loading="lazy" sizes="(min-width: 1536x) 1020px, (min-width: 1280px) 850px, (min-width: 1024px) 800px, (min-width: 768px) 800px, (min-width: 640px) 800px, 100vw" src="https://johnmathews.eu/images/photos/derivatives/article-inline-image/800w/floating_huts.jpeg" srcset="https://johnmathews.eu/images/photos/derivatives/article-inline-image/300w/floating_huts.jpeg 300w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/600w/floating_huts.jpeg 600w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/800w/floating_huts.jpeg 800w, https://johnmathews.eu/images/photos/derivatives/article-inline-image/1600w/floating_huts.jpeg 1600w"/&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="Non-technical/Other"/></entry><entry><title>Notes From “Mastering Vim Quickly”</title><link href="https://johnmathews.eu/notes-from-mastering-vim-quickly.html" rel="alternate"/><published>2021-01-21T16:22:00+01:00</published><updated>2021-01-21T16:22:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-21:/notes-from-mastering-vim-quickly.html</id><summary type="html"/><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#verbs"&gt;Verbs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#registers"&gt;Registers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#insert-mode"&gt;Insert Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#normal-mode"&gt;Normal Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#command-mode"&gt;Command Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#visual-block-mode-ltc-vgt"&gt;Visual Block Mode &lt;c-v&gt;&lt;/c-v&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ranges"&gt;Ranges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#searching"&gt;Searching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#undo"&gt;Undo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#splits"&gt;Splits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#macros"&gt;Macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#other"&gt;Other&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="verbs"&gt;Verbs&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; - delete char under cursor and enter Insert Mode.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt; - replace char under cursor.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c/hello&lt;/code&gt; - change until next occurrence of ‘hello’&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="registers"&gt;Registers&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;"ayy&lt;/code&gt; yank the entire row into register &lt;code&gt;a&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"Ay&lt;/code&gt; yank to register A and append the new text to the existing contents of
    the register.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:registers&lt;/code&gt; - preview the contents of your registers.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="insert-mode"&gt;Insert Mode&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&lt;c-w&gt;&lt;/c-w&gt;&lt;/code&gt; - delete back one word.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-u&gt;&lt;/c-u&gt;&lt;/code&gt; - delete back to the start of the line or start of current insert.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cgn&lt;/code&gt; - if you are searching for a word (either by using &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;#&lt;/code&gt;)
   and you want to change each instance of the search result, use &lt;code&gt;&lt;verb&gt;gn&lt;/verb&gt;&lt;/code&gt; to
   &lt;em&gt;change&lt;/em&gt; or &lt;em&gt;delete&lt;/em&gt; and then go to the next result. This will let you use
   the &lt;code&gt;.dot&lt;/code&gt; operator to repeat both the steps (moving and changing).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-r&gt; 0&lt;/c-r&gt;&lt;/code&gt; - paste. &lt;code&gt;&lt;c-r&gt;&lt;c-p&gt;0&lt;/c-p&gt;&lt;/c-r&gt;&lt;/code&gt; if there are new-line chars causing trouble.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="normal-mode"&gt;Normal Mode&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&lt;c-a&gt;&lt;/c-a&gt;&lt;/code&gt; or &lt;code&gt;&lt;c-x&lt; code=""&gt; increase or decrease a number.&lt;/c-x&lt;&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="command-mode"&gt;Command Mode&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;set ft?&lt;/code&gt; - find out which filetype is loaded.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="visual-block-mode-ltc-vgt"&gt;Visual Block Mode &lt;code&gt;&lt;c-v&gt;&lt;/c-v&gt;&lt;/code&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Select a column of numbers you want to increment, then &lt;code&gt;g&lt;c-a&gt;&lt;/c-a&gt;&lt;/code&gt; will turn
   them into an incremented list.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="ranges"&gt;Ranges&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;:put =range(1,10)&lt;/code&gt; - insert a list of ascending numbers.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:for i in range(1,100) | put ='192.168.1.'.i | endfor&lt;/code&gt; - use a loop to
   generate a long list.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="searching"&gt;Searching&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;g#&lt;/code&gt; or &lt;code&gt;g*&lt;/code&gt; for partial matches, like &lt;code&gt;#&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt; for exact matches. &lt;/li&gt;
&lt;li&gt;Search for the word under the cursor, or similar:&lt;ol&gt;
&lt;li&gt;Press &lt;code&gt;/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-r&gt;&lt;/c-r&gt;&lt;/code&gt; &lt;code&gt;&lt;c-w&gt;&lt;/c-w&gt;&lt;/code&gt; - this will copy and paste the word under the cursor
     into the search box. Edit it as necessary.&lt;/li&gt;
&lt;li&gt;After you’ve done your search, &lt;code&gt;&lt;c-o&gt;&lt;/c-o&gt;&lt;/code&gt; to jump back to where your cursor
     was before.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Find and replace whole words only: &lt;code&gt;:s/&lt;old_word\&gt;/new/g&lt;/old_word\&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Find and replace either old-word1 or old_word2: &lt;code&gt;:s/(old_word1\|old_word2\)/new/g&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;g &lt;c-g&gt;&lt;/c-g&gt;&lt;/code&gt; - show some stats about current bugger - word count, line count,
   char count.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="undo"&gt;Undo&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;g-&lt;/code&gt; and &lt;code&gt;g+&lt;/code&gt; - undo branches.&lt;/li&gt;
&lt;li&gt;Under changes within a period of time:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:earlier 2d&lt;/code&gt; - undo changes in the last 2 days&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:later 5m&lt;/code&gt; - redo all changes in the last 5 minutes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:earlier 3f&lt;/code&gt; - undo all changes in the last three buffer writes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; seconds, &lt;code&gt;m&lt;/code&gt; minutes, &lt;code&gt;h&lt;/code&gt; hours, &lt;code&gt;d&lt;/code&gt; days, &lt;code&gt;f&lt;/code&gt; saves&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:g/my_string/normal @a&lt;/code&gt; - Use the global command to execute macro &lt;code&gt;a&lt;/code&gt; on
    all lines of the current buffer containing string ‘my_string’&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:g/good/s/bad/ugly/g&lt;/code&gt; - For every line containing “good” substitute all
    “bad” with “ugly”&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="splits"&gt;Splits&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&lt;c-w&gt; r&lt;/c-w&gt;&lt;/code&gt; - rotate the splits from left to right but only if they are split
    vertically. &lt;code&gt;&lt;c-w&gt; R&lt;/c-w&gt;&lt;/code&gt; - rotate the splits from right to left. &lt;code&gt;&lt;c-w&gt; H&lt;/c-w&gt;&lt;/code&gt; -
    move the current split to the far left and make it full height. &lt;code&gt;&lt;c-w&gt; J&lt;/c-w&gt;&lt;/code&gt; -
    move the current split to the bottom of the screen and use the full width.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:only&lt;/code&gt; - close all splits except the current split.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="macros"&gt;Macros&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;:g/pattern/norm @o&lt;/code&gt; - do the macro stored in buffer &lt;code&gt;O&lt;/code&gt; on all lines that
    match the pattern “pattern”&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="other"&gt;Other&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&lt;c-o&gt;&lt;/c-o&gt;&lt;/code&gt; in Insert Mode will jump you into Command Mode for one command only
    and then put you back into Insert Mode automatically.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;.dot&lt;/code&gt; command only repeats commands that changes the buffer content. It
    wont repeat navigation commands.&lt;/li&gt;
&lt;/ol&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>Notes From “Powerful Python”</title><link href="https://johnmathews.eu/python-notes.html" rel="alternate"/><published>2021-01-21T14:55:00+01:00</published><updated>2021-01-21T14:55:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-21:/python-notes.html</id><summary type="html"/><content type="html">&lt;p&gt;The parts of Aaron Maxwell’s &lt;a href="https://twitter.com/powerfulpython"&gt;Power Python&lt;/a&gt;
newsletter that I don’t want to forget:&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#emergent-abstractions"&gt;Emergent Abstractions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#practioner-engineer-scientist"&gt;Practioner, Engineer, Scientist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sentinel-values"&gt;Sentinel Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#levels-of-python-code"&gt;Levels of Python Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#read-peps"&gt;Read PEPs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="emergent-abstractions"&gt;Emergent Abstractions&lt;/h2&gt;
&lt;p&gt;Get used to expecting and letting abstractions emerge from projects. If you
find yourself repeatedly solving similar problems in similar ways, what can you
do that will simplify the code and the implementation&lt;sup id="sf-python-notes-1-back"&gt;&lt;a class="simple-footnote" href="#sf-python-notes-1" title=" Abstraction as a principal of OOP"&gt;1&lt;/a&gt;&lt;/sup&gt;?&lt;/p&gt;
&lt;p&gt;Is it a couple of convenience methods on some helper class?&lt;/p&gt;
&lt;p&gt;The below code snippet gives you three ways of instantiating the twitter &lt;span class="caps"&gt;API&lt;/span&gt; client:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A generic “normal” way&lt;/li&gt;
&lt;li&gt;A specialized way that looks for certain environment variables&lt;/li&gt;
&lt;li&gt;A specialized way that looks for a configuration file&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="c1"&gt;# so you can get the environment variables&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;twitter&lt;/span&gt; &lt;span class="c1"&gt;# https://pypi.org/project/python-twitter/&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApiClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumer_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumer_secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;access_token_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;access_token_secret&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;consumer_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;consumer_secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;access_token_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;access_token_secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;from_environ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'TWITTER_CONSUMER_KEY'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'TWITTER_CONSUMER_SECRET'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'TWITTER_ACCESS_TOKEN_KEY'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'TWITTER_ACCESS_TOKEN_SECRET'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;from_config_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;config_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# ...&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="practioner-engineer-scientist"&gt;Practioner, Engineer, Scientist&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Practioner&lt;/strong&gt; - You can use a thing (a framework, a tool)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Engineer&lt;/strong&gt; - You can use a thing and if you needed to, you could recreate it&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scientist&lt;/strong&gt; - You can create frameworks and paradigms that have never existed before&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Aim for the engineer level.&lt;/p&gt;
&lt;h2 id="sentinel-values"&gt;Sentinel Values&lt;/h2&gt;
&lt;p&gt;Instead of setting your sentinel value to something that is not quite
impossible, like &lt;code&gt;None&lt;/code&gt; or &lt;code&gt;"None"&lt;/code&gt; set it to &lt;code&gt;object()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is better because it creates a unique instance of the &lt;code&gt;object&lt;/code&gt; class and
there can be no ambiguity about where it came from.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A sentinel value is a value you can set a variable to.&lt;/li&gt;
&lt;li&gt;It’s special because it differs from all other legal or possible values that the variable could have.&lt;/li&gt;
&lt;li&gt;It’s used as a signal or as a canary that something has happened.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="levels-of-python-code"&gt;Levels of Python Code&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Syntax&lt;/em&gt; - understand what indentation is important, sometimes you need
    parenthesis, etc&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Idiom&lt;/em&gt; - the building blocks of a program. “Paragraphs” of code that
    follow common patterns, like for loops, or context managers.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Design Pattern&lt;/em&gt; - Less well defined that Idioms, but more useful.
        - Creational Patterns, like factories
        - Structural Patterns, like Adapters or Proxies
        - Behavioural Patterns, like &lt;code&gt;Visitor&lt;/code&gt; or &lt;code&gt;Strategy&lt;/code&gt;
    These tend to be the same across different languages.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Architectural&lt;/em&gt; - the large-scale structure of your software system. The
   language itself doesn’t make a lot of difference, an application would have
   the same architecture whether it is written in Python or Java. The interface
   between different components would be different, but the “organs” of the
   body would essentially be the same.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="read-peps"&gt;Read PEPs&lt;/h2&gt;
&lt;p&gt;A Python Enhancement Proposal is a document that’s written to propose a new
feature of Python.&lt;/p&gt;
&lt;p&gt;It fully details the proposed feature, the arguments for and against it, and
lots of sample code.&lt;/p&gt;
&lt;p&gt;If the &lt;span class="caps"&gt;PEP&lt;/span&gt; is accepted into a future version of Python, the &lt;span class="caps"&gt;PEP&lt;/span&gt; becomes
the authoritative document for that feature and how to use it.&lt;/p&gt;
&lt;p&gt;PEPs tend to be written by the best programmers in the world, so hang out with them.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-python-notes-1"&gt;
&lt;a href="https://johnmathews.eu/principles-of-oop.html#2-abstraction"&gt;Abstraction&lt;/a&gt; as a
principal of &lt;span class="caps"&gt;OOP&lt;/span&gt; &lt;a class="simple-footnote-back" href="#sf-python-notes-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>Mental Models I Used To Use</title><link href="https://johnmathews.eu/mental-models-i-used-to-use.html" rel="alternate"/><published>2021-01-20T16:48:00+01:00</published><updated>2021-01-20T16:48:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-20:/mental-models-i-used-to-use.html</id><summary type="html"/><content type="html">&lt;p&gt;The rules&lt;sup id="sf-mental-models-i-used-to-use-1-back"&gt;&lt;a class="simple-footnote" href="#sf-mental-models-i-used-to-use-1" title="or policies"&gt;1&lt;/a&gt;&lt;/sup&gt; and mental models that helped me
succeed in one season or phase of life may not be the best for the next phase.&lt;/p&gt;
&lt;p&gt;Here is a list of a few mental models I remember being concious of in previous
years. Probably I’ve already forgotten some.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Always ask “why…”&lt;/em&gt;. Be obsessive about this. It’s going to make things
    harder for a while before things get easier. You’ll find difficult answers
    that you otherwise wouldn’t. If you’re only concerned with the present then
    its true that ignorance is bliss, but otherwise it’s a liability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;What if…”&lt;/em&gt; is another good question to ask a lot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Adapt&lt;/em&gt; to the situation, don’t make it adapt to you if you have any
    choice. Be kind of like water, going around things and through the gaps.
    Look for the edges and the gaps, the parts that aren’t well known.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Let people talk&lt;/em&gt; as much as they want to. Shut up and listen. If they
    mean you harm or don’t respect you then it’ll become more obvious the more
    they keep talking. If they mean you well or they’re saying something
    useful, you will benefit more from letting them talk more.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Inversion&lt;/em&gt; - it can be hard to know if you should do something, but how
    would you feel if you didn’t do it, or if it didn’t happen?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Regrets are inevitable&lt;/em&gt;, everyone has them. Same as making mistakes. Let
    your regrets be for things that you did do, and not what you didn’t do.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you are willing to try something, fail at it, and still be glad that you
    tried, then you should almost definitely do it. Commit to it and enjoy the
    experience! Don’t be scared, or at least, be scared &lt;em&gt;and&lt;/em&gt; optimistic and
    happy&lt;sup id="sf-mental-models-i-used-to-use-2-back"&gt;&lt;a class="simple-footnote" href="#sf-mental-models-i-used-to-use-2" title="Courage isn’t the absence of fear. It’s being scared and doing     the right thing anyway."&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is beauty and luxury in being in such a bad spot that you are backed
    into a corner with seemingly no way out. Things become black and white,
    instead of shades of gray, and that will make priorities and options much
    clearer. You are likely to work very efficiently and effectively in this
    scenario, and you will learn important things about yourself.&lt;/p&gt;
&lt;p&gt;Now that I’m older and I have responsibilities, I can’t ever let things
become so bad that a situation becomes black and white. I have to
navigate a world of grays. If they do become black and white, I’ll
already have a long list of failings.&lt;/p&gt;
&lt;p&gt;When I was younger, things were more fragile. My resources were smaller and
things could quickly flip from good to bad. Enjoy the few benefits that a
situation like that gives, because (hopefully) once its gone its gone for good.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The best way to solve a problem is to prevent it from occurring in the first
    place. Succeeding at this will bring its own challenges.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Take responsibility for things you are not responsible for, kind of. Do it
    deliberately and for your own benefit, but don’t forget that you are only
    pretending that it’s your responsibility.&lt;/p&gt;
&lt;p&gt;If you do this, you will force yourself to understand a situation more
deeply and from other peoples perspectives. This will let you learn faster
and help you in future. Keep this at arms length though - it’s make-believe
and you need to be able to switch it on and off. It’s a toy for you to play
with. This seems to be what “extreme responsibility” is.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I think its important to have mental models that you’re comfortable with,
because it lets you make decisions quickly and consistently. But understand
that &lt;a href="https://fs.blog/2015/11/map-and-territory/"&gt;the map is not the
territory&lt;/a&gt;, and these are just
tools in a toolbox.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-mental-models-i-used-to-use-1"&gt;or policies &lt;a class="simple-footnote-back" href="#sf-mental-models-i-used-to-use-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-mental-models-i-used-to-use-2"&gt;Courage isn’t the absence of fear. It’s being scared and doing
    the right thing anyway. &lt;a class="simple-footnote-back" href="#sf-mental-models-i-used-to-use-2-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Non-technical/Learning"/></entry><entry><title>Vim: GoTo Tag Definition</title><link href="https://johnmathews.eu/vim-notes-goto-tag-definition.html" rel="alternate"/><published>2021-01-20T15:57:00+01:00</published><updated>2021-01-20T15:57:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-20:/vim-notes-goto-tag-definition.html</id><summary type="html"/><content type="html">&lt;h2 id="update-2021-03-31"&gt;Update (2021-03-31):&lt;/h2&gt;
&lt;p&gt;Just use neovim.coc instead of YouCompleteMe or Syntastic.&lt;/p&gt;
&lt;p&gt;It’s faster, easier to setup, and works intuitively. &lt;span class="caps"&gt;ALE&lt;/span&gt; is still wonderful and
useful, though there’s a lot of overlap - coc can lint as well.&lt;/p&gt;
&lt;h2 id="jump-lists-and-change-lists"&gt;Jump Lists and Change Lists&lt;/h2&gt;
&lt;p&gt;If you’re going to be jumping around to where things are defined, you will need
to know how to jump back again. It seems there are two lists you need to be
aware of, the &lt;em&gt;jump list&lt;/em&gt;&lt;sup id="sf-vim-notes-goto-tag-definition-1-back"&gt;&lt;a class="simple-footnote" href="#sf-vim-notes-goto-tag-definition-1" title=":help jumplist"&gt;1&lt;/a&gt;&lt;/sup&gt; and the &lt;em&gt;change
list&lt;/em&gt;&lt;sup id="sf-vim-notes-goto-tag-definition-2-back"&gt;&lt;a class="simple-footnote" href="#sf-vim-notes-goto-tag-definition-2" title=":help changelist"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3 id="jump-list"&gt;Jump List&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A list of locations that the cursor has jumped to.&lt;/li&gt;
&lt;li&gt;Relevant to jumping to a definition.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-o&gt;&lt;/c-o&gt;&lt;/code&gt; move up the jump list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;c-i&gt;&lt;/c-i&gt;&lt;/code&gt; mode down the jump list&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="change-list"&gt;Change List&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A list of locations where a change was made.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A change is something that can be undone using &lt;code&gt;u&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;'.&lt;/code&gt; will move you to the &lt;code&gt;.&lt;/code&gt; mark.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; is a special mark that is automatically set at the location of your last edit.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;''&lt;/code&gt; will bring you back to where you were before your last jump&lt;/li&gt;
&lt;li&gt;&lt;code&gt;g;&lt;/code&gt; and &lt;code&gt;g,&lt;/code&gt;  will also move you up and down the &lt;code&gt;change list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="original-post"&gt;Original Post:&lt;/h2&gt;
&lt;p&gt;There are multiple ways of doing anything with vim, including going to where a
function or object is defined, and I usually need to do something at least 3 times
before I can do it without breaking my focus or train of thought.&lt;/p&gt;
&lt;p&gt;My memory is hazy but I remember spending a 1/2 day looking into this and
considering which solution I wanted to commit to.&lt;sup id="sf-vim-notes-goto-tag-definition-3-back"&gt;&lt;a class="simple-footnote" href="#sf-vim-notes-goto-tag-definition-3" title="The more powerful the tool, the more worthwhile it is to take a closer look at what it can and can’t do."&gt;3&lt;/a&gt;&lt;/sup&gt; My options seemed to be between
&lt;a href="https://github.com/ycm-core/YouCompleteMe"&gt;YouCompleteMe&lt;/a&gt; and
&lt;a href="https://github.com/dense-analysis/ale"&gt;&lt;span class="caps"&gt;ALE&lt;/span&gt;&lt;/a&gt;. [Update!&lt;sup id="sf-vim-notes-goto-tag-definition-4-back"&gt;&lt;a class="simple-footnote" href="#sf-vim-notes-goto-tag-definition-4" title="YCM and ALE work fine for goto definition and linting, but they don’t give me satisfactory autocompletion. neoclide/coc.nvim looks like it might offer some improvements. neoclide/coc.nvim"&gt;4&lt;/a&gt;&lt;/sup&gt;]&lt;/p&gt;
&lt;p&gt;I can’t remember everything I read and tried, but I trust my conclusions.
Looking in my &lt;code&gt;.vimrc&lt;/code&gt; I see that I have &lt;code&gt;&lt;leader&gt;x&lt;/leader&gt;&lt;/code&gt; mapped to &lt;code&gt;:YcmCompleter
GoTo&lt;/code&gt; and it works just fine, even when a module is imported from somewhere
outside the current project. The tool was working and ready to use, I just
hadn’t internalized it yet.&lt;/p&gt;
&lt;h2 id="commands-to-remember"&gt;Commands to remember:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;leader&gt;x&lt;/leader&gt;&lt;/code&gt; - GoTo definition - YCMs best guess at an ‘intelligent’ goto
command, whether its a declaration or a definition.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;f2&gt;&lt;/f2&gt;&lt;/code&gt; - Toggle tagbar&lt;/li&gt;
&lt;/ul&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-vim-notes-goto-tag-definition-1"&gt;&lt;code&gt;:help jumplist&lt;/code&gt; &lt;a class="simple-footnote-back" href="#sf-vim-notes-goto-tag-definition-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-vim-notes-goto-tag-definition-2"&gt;&lt;code&gt;:help changelist&lt;/code&gt; &lt;a class="simple-footnote-back" href="#sf-vim-notes-goto-tag-definition-2-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-vim-notes-goto-tag-definition-3"&gt;The more powerful the
tool, the more worthwhile it is to take a closer look at what it can and can’t
do. &lt;a class="simple-footnote-back" href="#sf-vim-notes-goto-tag-definition-3-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-vim-notes-goto-tag-definition-4"&gt;&lt;span class="caps"&gt;YCM&lt;/span&gt; and
&lt;span class="caps"&gt;ALE&lt;/span&gt; work fine for goto definition and linting, but they don’t give me
satisfactory autocompletion. &lt;code&gt;neoclide/coc.nvim&lt;/code&gt; looks like it might offer some
improvements.
&lt;a href="https://www.vimfromscratch.com/articles/vim-for-python/"&gt;neoclide/coc.nvim&lt;/a&gt; &lt;a class="simple-footnote-back" href="#sf-vim-notes-goto-tag-definition-4-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>What’s So Different About Now</title><link href="https://johnmathews.eu/whats-so-different-about-now.html" rel="alternate"/><published>2021-01-20T14:44:00+01:00</published><updated>2021-01-20T14:44:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-20:/whats-so-different-about-now.html</id><summary type="html"/><content type="html">&lt;p&gt;I think we are less aware of our ignorance than previous generations. It is
easy to implicitly assume that all useful information is available to us, and
that we are therefore more informed than we really are.&lt;/p&gt;
&lt;p&gt;I think this is because the internet has made information more accessible
and global air travel have made the world feel smaller.&lt;/p&gt;
&lt;p&gt;Whilst an individual would hopefully never pretend to know everything, I think
its easy to assume that the right information exists and is being used by the
people to whom it is relevant.&lt;/p&gt;
&lt;p&gt;But the accessibility of all information has put us in a situation similar to
information scarcity. We still need to actively search for the information we
want, because the information that comes to us easily or for free is not equal
to what we find when we apply effort.&lt;/p&gt;
&lt;p&gt;I can easily have so many short pieces of news or information that I am
always slightly overwhelmed. The pace of modern communications encourages me to
never slow down enough to form my own questions or frame my own arguments. I
can always find &lt;em&gt;an&lt;/em&gt; answer to my questions, but when was the last time I checked
that whoever gave it to me wasn’t going to profit from it?&lt;/p&gt;</content><category term="Non-technical/Social"/></entry><entry><title>Predicting the Future using Human Nature and Technology</title><link href="https://johnmathews.eu/what-happens-next.html" rel="alternate"/><published>2021-01-20T14:05:00+01:00</published><updated>2021-01-20T14:05:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-20:/what-happens-next.html</id><summary type="html"/><content type="html">&lt;p&gt;Predicting the future sounds like a tough problem, but we try to do it all the
time without realising it.&lt;/p&gt;
&lt;p&gt;We predict the future when we think about how risky or scary something is, or
when we think about what’s really going to change because of an announcement or
press release. We try to predict the future when we’re at the supermarket
checkouts and we try to pick the queue that will move the fastest. I always
seem to pick the wrong one.&lt;/p&gt;
&lt;p&gt;There must be a million ways of trying to predicting the future but all the good
ones are models which reduce complexity and emphasise key considerations. One
of them could be comparing the influence of human nature and technology on the
outcome, and then comparing the event to what’s happened before.&lt;/p&gt;
&lt;p&gt;Human nature doesn’t change, so if something is driven by fear or greed then it
probably doesn’t matter what century it occurs in. Technology &lt;em&gt;is&lt;/em&gt; change, and
if something is enabled or prevented due to technological progress then the
date is important.&lt;/p&gt;
&lt;p&gt;What is driving the scenario? Is it human nature or technology? Supermarket
checkouts are mostly manual and require a couple of adults to work together, so
human nature has a much bigger role on efficiency than tech. Young men will
stack and pack quickly, old women will be the opposite. What types of shopping
bags they have, or how they pay, or even how many items they’re buying, are
probably not going to lead you to the right decision.&lt;/p&gt;
&lt;p&gt;The same probably works for getting through airport security.&lt;/p&gt;</content><category term="Non-technical/Social"/></entry><entry><title>Financial Doom And Gloom</title><link href="https://johnmathews.eu/financial-doom-and-gloom.html" rel="alternate"/><published>2021-01-19T14:57:00+01:00</published><updated>2021-01-19T14:57:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-19:/financial-doom-and-gloom.html</id><summary type="html"/><content type="html">&lt;p&gt;Financial crises seem to happen fairly regularly so they shouldn’t be
unexpected. But no-one seems particularly concerned about our current financial
system, at the moment our attention is controlled by other threats.&lt;/p&gt;
&lt;p&gt;I’m concerned that a lot of money has been injected into the money supply but
we haven’t seen any inflation. And I am concerned that the price of stocks
is no longer related to the value created by the company but instead by macro economics.&lt;/p&gt;
&lt;p&gt;It’s a terrible time to be a value investor. This should be an alarming
statement. Value investing should &lt;em&gt;always&lt;/em&gt; be a decent way to make money
unless markets are broken. If the price of something doesn’t represent its
value then a correction is inevitable.&lt;/p&gt;
&lt;p&gt;Interest rates are really low at the moment so if you have spare money and you
want to make it work for you then where do you put it? Not into a bank account,
because interest rates are low&lt;sup id="sf-financial-doom-and-gloom-1-back"&gt;&lt;a class="simple-footnote" href="#sf-financial-doom-and-gloom-1" title="Why are interest rates low? Because confidence in the economy is low, so central bankers have to lower interest rates to make it 1. Cheaper for a business to borrow money to invest in their business and therefore easier for a business investments to be profitable, and 2. So that its more attractive for investors to use their capital to invest in a business  (which grows the economy) relative to depositing spare cash in a bank account (which is safer but a less efficient way to deploy capital). Interest rates affect the relative risk-reward ratios of different investment strategies"&gt;1&lt;/a&gt;&lt;/sup&gt;, and not into government debt, because
the yield is so low. It has to be stocks if you want the value of your
investments to increase meaningfully.&lt;/p&gt;
&lt;p&gt;But everyone is doing this which drives the price up, and because their price
is increasing they increase even further.&lt;/p&gt;
&lt;p&gt;I think that the main reason for concern is super low interest rates and
massive increases in the money supply, but there are a couple of other factors
that are also contributing.&lt;/p&gt;
&lt;p&gt;It’s easier than ever for retail investors to participate in the stock market,
and this seems like a good idea. Democratization. However if retail investors
have influence to effect prices, and they themselves can be manipulated or
influenced regarding what or when they buy or sell, then that is likely a new
kind of threat to financial stability. We’ve never seen social media combined
with quick, cheap investment services for amateurs before.&lt;/p&gt;
&lt;p&gt;Index funds are also more popular than ever&lt;sup id="sf-financial-doom-and-gloom-2-back"&gt;&lt;a class="simple-footnote" href="#sf-financial-doom-and-gloom-2" title="Index Funds Are the New Kings of Wall Street"&gt;2&lt;/a&gt;&lt;/sup&gt; - the efficacy of index investing
relative to traditional funds that use stock pickers is very high over medium
or long time horizons because index funds are much cheaper. But if index
funds become too large then they end up influencing the market in predictable
and rigid ways.&lt;/p&gt;
&lt;p&gt;Index funds cannot choose what they buy or how much they buy - they just track
the index. If a company’s stock crosses certain thresholds, their stock has
to be bought or sold. It seems like its possible to create feedback loops where
funds have to buy more of a rising stock, which increases its scarcity and
price, which then requires index funds to purchase more of the same stock.&lt;/p&gt;
&lt;p&gt;The amount of euros in existence in 2019 was 90% more than in
2010.&lt;sup id="sf-financial-doom-and-gloom-3-back"&gt;&lt;a class="simple-footnote" href="#sf-financial-doom-and-gloom-3" title="statista"&gt;3&lt;/a&gt;&lt;/sup&gt;
But inflation between 2010 and 2020 is
13%.&lt;sup id="sf-financial-doom-and-gloom-4-back"&gt;&lt;a class="simple-footnote" href="#sf-financial-doom-and-gloom-4" title="in2013dollars.com"&gt;4&lt;/a&gt;&lt;/sup&gt;
Why is that?&lt;/p&gt;
&lt;p&gt;If the price of something doesn’t represent its value, then a correction is inevitable.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-financial-doom-and-gloom-1"&gt;Why are interest rates low? Because
confidence in the economy is low, so central bankers have to lower interest
rates to make it 1. Cheaper for a business to borrow money to invest in their business and
therefore easier for a business investments to be profitable, and 2. So that
its more attractive for investors to use their capital to invest in a business 
(which grows the economy) relative to depositing spare cash in a bank account (which is safer but a less efficient way to deploy capital). Interest rates affect the relative risk-reward ratios of
different investment strategies &lt;a class="simple-footnote-back" href="#sf-financial-doom-and-gloom-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-financial-doom-and-gloom-2"&gt;&lt;a href="https://web.archive.org/web/20210119144242/https://www.wsj.com/articles/index-funds-are-the-new-kings-of-wall-street-11568799004"&gt;Index Funds Are the New Kings of Wall Street&lt;/a&gt; &lt;a class="simple-footnote-back" href="#sf-financial-doom-and-gloom-2-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-financial-doom-and-gloom-3"&gt;&lt;a href="https://www.statista.com/statistics/254220/value-of-euro-coins-in-circulation-since-2002/"&gt;statista&lt;/a&gt; &lt;a class="simple-footnote-back" href="#sf-financial-doom-and-gloom-3-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-financial-doom-and-gloom-4"&gt;&lt;a href="https://www.in2013dollars.com/europe/inflation/2010"&gt;in2013dollars.com&lt;/a&gt; &lt;a class="simple-footnote-back" href="#sf-financial-doom-and-gloom-4-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Non-technical/Social"/></entry><entry><title>Debugging the more_categories plugin for Pelican</title><link href="https://johnmathews.eu/debugging-more-categories-pelican-plugin.html" rel="alternate"/><published>2021-01-19T12:00:00+01:00</published><updated>2021-01-19T12:00:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-19:/debugging-more-categories-pelican-plugin.html</id><summary type="html"/><content type="html">&lt;p&gt;I’ve realised that one of the plugins I use to make this blog is not working
correctly. I use the &lt;code&gt;more_categories&lt;/code&gt; plugin to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;add subcategories&lt;/li&gt;
&lt;li&gt;assign multiple categories to articles.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Subcategories aren’t working and Pelican thinks each article just has
categories than contain forward slashes.&lt;/p&gt;
&lt;p&gt;In his “Powerful Python” emails, Aaron Maxwell recommends looking at the source
code for popular python libraries to see how really good Python is written, and
how talented developers write code and solve problems.&lt;/p&gt;
&lt;p&gt;This is a good opportunity to look at the code that powers the plugin and see
if if I can:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Understand the source code&lt;/li&gt;
&lt;li&gt;Locate the source of the problem&lt;/li&gt;
&lt;li&gt;Fix the problem&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I don’t know if Pelican is amazingly good quality or not, I get the feeling it
could do with more developer resources, but I’ve got a real reason and
motivation to look at the underlying code so I’m going to give it a shot.&lt;/p&gt;
&lt;p&gt;The documentation is sparse which doesn’t help, I get the impression that
whoever wrote it feels like Pelican is simple and it’s obvious what’s going on
&lt;sup id="sf-debugging-more-categories-pelican-plugin-1-back"&gt;&lt;a class="simple-footnote" href="#sf-debugging-more-categories-pelican-plugin-1" title="I guess it’s the “curse of knowledge”"&gt;1&lt;/a&gt;&lt;/sup&gt;. It’s not obvious to me.&lt;/p&gt;
&lt;h2 id="pelican-plugins"&gt;Pelican Plugins&lt;/h2&gt;
&lt;p&gt;Every plugin has to have a &lt;code&gt;register()&lt;/code&gt; function, here it is for the
&lt;code&gt;more-categories&lt;/code&gt; plugin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_generator_context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_categories&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_generator_finalized&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_categories&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I understand the idea of signals from Django, and generators are discussed a
bit in the &lt;a href="https://docs.getpelican.com/en/latest/internals.html#how-to-implement-a-new-generator"&gt;documentation&lt;/a&gt;. So what else is happening…&lt;/p&gt;
&lt;p&gt;As I write down my understanding of the plugin, I’m aware that my understanding
is definitely incomplete and probably wrong. I hope that as I progress I will
see the mistakes in what I’ve already written.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;get_categories()&lt;/code&gt; is called first, and it takes two arguments, &lt;code&gt;generator&lt;/code&gt; and
&lt;code&gt;metadata&lt;/code&gt;. The entire function is 3 lines so here it is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_categories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;categories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'category'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;','&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'categories'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'category'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'categories'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It looks like it gets the category from the metadata for each article.
Presumably by the time this function is called the articles have already been
parsed and a &lt;code&gt;metadata&lt;/code&gt; object has already been created and populated with
metadata about the articles, including categories.&lt;/p&gt;
&lt;p&gt;The first row of &lt;code&gt;get_categories()&lt;/code&gt; splits up the categories if multiple
categories are listed. &lt;code&gt;metadata&lt;/code&gt; must be a dictionary, and there must be a
metadata dict for each article, otherwise you couldn’t just get get the value
assoiciated with the dictionary key and then split the string on commas.&lt;/p&gt;
&lt;p&gt;This means that this function is called once for each article.&lt;/p&gt;
&lt;p&gt;I don’t know what &lt;code&gt;text_type&lt;/code&gt; does yet. Maybe it ensures that the output is
always a string. It’s imported from &lt;code&gt;six&lt;/code&gt; which I remember seeing being a
dependecy of some other packages.&lt;/p&gt;
&lt;p&gt;.. Having checked the
&lt;a href="https://six.readthedocs.io/#six.text_type"&gt;documentation&lt;/a&gt; for &lt;code&gt;six&lt;/code&gt; it looks like I was
right - it represents unicode textual data in both &lt;code&gt;python2&lt;/code&gt; and &lt;code&gt;python3&lt;/code&gt;.
Pelican was originally written in Python2 I guess.&lt;/p&gt;
&lt;p&gt;Next step is to write a new key-value pair to the metadata dictionary for each
article. This plugin adds functionality to python by enabling &lt;code&gt;categories&lt;/code&gt;
and not just a &lt;code&gt;category&lt;/code&gt; for each article. It seems clear that adding a
&lt;code&gt;categories&lt;/code&gt; key to the metadata dict is an obvious way to do this. The value
for the &lt;code&gt;categories&lt;/code&gt; key is a &lt;code&gt;list&lt;/code&gt; where each item is an instance of the 
&lt;code&gt;Category&lt;/code&gt; class. This class is instantiated using two arguments, &lt;code&gt;name&lt;/code&gt; which
is the string from the previous row, and &lt;code&gt;generator.settings&lt;/code&gt; which is
currently not understood.&lt;/p&gt;
&lt;p&gt;.. printing the contents of &lt;code&gt;generator.settings&lt;/code&gt; shows that its a dictionary of
all the settings. Easily assumed and good to confirm.&lt;/p&gt;
&lt;p&gt;I’ll dig into the &lt;code&gt;Category&lt;/code&gt; class in a moment, but first lets quickly cover
the last row of the function. The &lt;code&gt;category&lt;/code&gt; attribute of the articles metadata
is simply updated with the first item in the categories list (&lt;code&gt;categories&lt;/code&gt;
must be a list because it can be indexed.)&lt;/p&gt;
&lt;h2 id="class-category"&gt;class Category():&lt;/h2&gt;
&lt;p&gt;This class is the only class defined by the plugin (which is only 96 lines of
code). It has 6 methods, 5 of them are decorated, and it has no constants.&lt;/p&gt;
&lt;p&gt;The decorators are &lt;code&gt;property&lt;/code&gt; [3], &lt;code&gt;_name.setter&lt;/code&gt; [1] and &lt;code&gt;URLWrapper.name.setter&lt;/code&gt; [1].
&lt;code&gt;URLWrapper&lt;/code&gt; is imported from &lt;code&gt;pelican.urlwrappers&lt;/code&gt; and I don’t know what that
does beyond “wrapping URLs”.&lt;/p&gt;
&lt;h3 id="property"&gt;@property&lt;/h3&gt;
&lt;p&gt;Decorators are functions that takes methods or functions as inputs. Using
&lt;code&gt;property&lt;/code&gt; along with &lt;code&gt;setter&lt;/code&gt; decorators lets a class have a property assigned
to it whilst ensuring that arbitrary conditions or logic is upheld. If the &lt;code&gt;@property&lt;/code&gt;
decorator is over a method called &lt;code&gt;foo&lt;/code&gt;, then there would need to be a
decorator called &lt;code&gt;foo.setter&lt;/code&gt; on a method somewhere in the class.&lt;/p&gt;
&lt;p&gt;That doesn’t seem entirely right though, because in our &lt;code&gt;Category&lt;/code&gt; class, we
have a &lt;code&gt;@property&lt;/code&gt; decorator over a &lt;code&gt;_name&lt;/code&gt; method, and also a &lt;code&gt;@_name.setter&lt;/code&gt;
decorator over another method called &lt;code&gt;_name&lt;/code&gt;. But the other methods with
&lt;code&gt;@property&lt;/code&gt; decorators (&lt;code&gt;slug&lt;/code&gt; and &lt;code&gt;ancestors&lt;/code&gt;) do not have any associated setter
decorators or methods.&lt;/p&gt;
&lt;p&gt;The setter for &lt;code&gt;_name&lt;/code&gt; seems to create parent categories if the string contains slashes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@_name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setter&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;parentname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsplit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__class__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parentname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shortname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, &lt;code&gt;self.parent&lt;/code&gt; becomes an instance of the category class, that is
instantiated using &lt;code&gt;parentname&lt;/code&gt; and &lt;code&gt;self.settings&lt;/code&gt;. This is recursive to
however many levels of subcategories are specified.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ancestors&lt;/code&gt; and &lt;code&gt;as_dict&lt;/code&gt; methods seem more confusing. &lt;code&gt;ancestors&lt;/code&gt; isn’t
called or mentioned within the class definition, but is called from the
&lt;code&gt;create_categories&lt;/code&gt; function which is called after the &lt;code&gt;get_categories&lt;/code&gt;
function returns. I don’t understand why it needs an &lt;code&gt;@property&lt;/code&gt; decorator though.&lt;/p&gt;
&lt;p&gt;The class inherits from &lt;code&gt;URLWrapper&lt;/code&gt; so that is probably the next best place to
look… Indeed, looking at the definition of &lt;code&gt;URLWrapper&lt;/code&gt; shows that the
&lt;code&gt;as_dict&lt;/code&gt; method is overriding the definition in the base class.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-debugging-more-categories-pelican-plugin-1"&gt;I guess it’s the “curse of knowledge” &lt;a class="simple-footnote-back" href="#sf-debugging-more-categories-pelican-plugin-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>Different Views For Different Users</title><link href="https://johnmathews.eu/different-views-for-different-users.html" rel="alternate"/><published>2021-01-19T10:32:00+01:00</published><updated>2021-01-19T10:32:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-19:/different-views-for-different-users.html</id><summary type="html"/><content type="html">&lt;p&gt;This blog serves a variety of purposes. It’s partly a journal of how I’m
teaching myself to be a developer and a data scientist, and it’s also a
personal blog, with articles about my interests and experiences.&lt;/p&gt;
&lt;p&gt;It’s unlikely that anyone is interested in every type of article, and I’d
like to make it easy for people to only read the content they’re interested in.
Therefore I thought I would separate the articles into two broad groups,
&lt;code&gt;technical&lt;/code&gt; and &lt;code&gt;non-technical&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you visit this blog for the first time by clicking a link to a technical
article, the site will then only show you the technical articles on the blog.
It’s the same for non-technical articles. If you want, you can change these
settings by clicking the paw icon&lt;sup id="sf-different-views-for-different-users-1-back"&gt;&lt;a class="simple-footnote" href="#sf-different-views-for-different-users-1" title="It’s a paw because cat’s have paws and cat is like category. I might change this to something more intuitive in future, like making the icon an N if the user is only seeing non-technical posts, T for technical, and A for all posts."&gt;1&lt;/a&gt;&lt;/sup&gt; in the navbar on the
blog index page.&lt;/p&gt;
&lt;p&gt;I did this mainly because I could. I like playing around with the blog. The &lt;span class="caps"&gt;JAM&lt;/span&gt;
stack feels accessible and its fun working with tailwind and with jQuery.&lt;/p&gt;
&lt;p&gt;I think that playing (being curious, lighthearted, and unhurried and not being
concerned with failure) is really important. Especially for adults who don’t
usually do it much. Most of my successes or big opportunities have been the
result of a process that started with playing around.&lt;/p&gt;
&lt;p&gt;Here is the list of requirements I used when adding the feature:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;:&lt;/p&gt;
&lt;ul class="checklist"&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; If user lands on a page and &lt;span class="caps"&gt;DOESNT&lt;/span&gt; have local setting - create local setting based on type of article being read&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; If user lands lands on a page and &lt;span class="caps"&gt;DOES&lt;/span&gt; have local setting which is contradicted - reset local setting to “all”&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; If user lands on index and &lt;span class="caps"&gt;DOES&lt;/span&gt; have local settings, only show articles that match the setting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Steps&lt;/strong&gt;:&lt;/p&gt;
&lt;ul class="checklist"&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; Index page: check if local storage option exists, print to console the result&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; Index page: make button group&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; Index page: make correct button active on page load by using localstorage&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; Index page: update active button on page click&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; Index page: filter/unfilter articles when button clicked&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; Index page: if local storage does exist, respect it&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; Index page: add 3 stage switch to hamburger menu&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; Index page: make hamburger menu behave intuitively on small screens&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; Index page: if local storage does not exist, pop up a modal asking for a choice&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; Article page: check if local storage option exists, print to console the result&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; Article page: if local storage doesn’t exist, create it according to article type&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"/&gt; Article page: if local storage does exist and is contradicted, update article type to all&lt;/li&gt;
&lt;/ul&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-different-views-for-different-users-1"&gt;It’s a paw because cat’s have paws and
cat is like category. I might change this to something more intuitive in
future, like making the icon an &lt;code&gt;N&lt;/code&gt; if the user is only seeing non-technical
posts, &lt;code&gt;T&lt;/code&gt; for technical, and &lt;code&gt;A&lt;/code&gt; for all posts. &lt;a class="simple-footnote-back" href="#sf-different-views-for-different-users-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Web"/></entry><entry><title>3 Different Types Of Programming Problems</title><link href="https://johnmathews.eu/different-types-of-problem.html" rel="alternate"/><published>2021-01-18T13:00:00+01:00</published><updated>2021-01-18T13:00:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-18:/different-types-of-problem.html</id><summary type="html"/><content type="html">&lt;h2 id="three-categories-of-problem"&gt;Three categories of problem&lt;/h2&gt;
&lt;p&gt;Last year when I was creating &lt;a href="https://moneybar/nl"&gt;moneybar&lt;/a&gt; and
&lt;a href="https://pippip.email"&gt;pippip&lt;/a&gt; there were a few problems that took much more
effort to solve than all the others.&lt;/p&gt;
&lt;p&gt;I think I could group problems into 3 buckets, based on how much time they take
to solve. &lt;code&gt;Type 1&lt;/code&gt; takes less than 15 minutes to solve, &lt;code&gt;type 2&lt;/code&gt; takes between
15 and 45 minutes to solve, and &lt;code&gt;type 3&lt;/code&gt; takes more than 45 minutes (usualy
&lt;em&gt;much&lt;/em&gt; more).&lt;/p&gt;
&lt;h3 id="type-3"&gt;Type 3:&lt;/h3&gt;
&lt;p&gt;When I start learning a hard thing (like web development), almost everything is
in the third bucket and it’s exhausting. You need to set aside big chunks of
time, you need to be focussed and undistracted, calm and wide awake, and you
need to be prepared for a long arduous journey.&lt;/p&gt;
&lt;p&gt;Probably your criteria for success should be “am I dead?” because then if
you’re asking the question you’re guaranteed to be successful and keeping
morale high is necessary for success.&lt;/p&gt;
&lt;h3 id="type-2"&gt;Type 2:&lt;/h3&gt;
&lt;p&gt;Hopefully you can make good progress understanding the basics and internalizing
the relevant abstractions, and your problems quickly&lt;sup id="sf-different-types-of-problem-1-back"&gt;&lt;a class="simple-footnote" href="#sf-different-types-of-problem-1" title="on which timescale? Life is long, does it really matter if it takes 1 week or 1 month to learn something meaningful? Momentum, and having fun, is important though."&gt;1&lt;/a&gt;&lt;/sup&gt;
become &lt;code&gt;type 2&lt;/code&gt; problems. They each take from 15 to 45 minutes to solve.&lt;/p&gt;
&lt;p&gt;Maybe this is because you know enough to break some big general problem into
smaller problems (you are developing domain expertise) and your intuitions for
how to solve the problem are becoming better so your first or second attempts are
likely to be correct, rather than your fifth or sixth. &lt;/p&gt;
&lt;p&gt;Knowing how to google a problem so that you get the answer you need is also a
really important skill, which requires intuiting how an English speaking expert
would ask the question. This isn’t trivial but I don’t hear people discussing
this often.&lt;/p&gt;
&lt;p&gt;When most of my coding problems are &lt;code&gt;type 2&lt;/code&gt;, it feels like I’m learning most
efficiently and when I’m most productive&lt;sup id="sf-different-types-of-problem-2-back"&gt;&lt;a class="simple-footnote" href="#sf-different-types-of-problem-2" title="from a personal growth point of view. I suppose from an employers point of view they want all problems solved fast, type 1 problems."&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3 id="type-1"&gt;Type 1:&lt;/h3&gt;
&lt;p&gt;After a while, the problems that need to be solved become &lt;code&gt;type 1&lt;/code&gt; problems.
They take less than 15 minutes to solve, because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All the big problems have been solved and now you’ve only got smaller problems left, and&lt;/li&gt;
&lt;li&gt;Your intuitions are good and your expertise has increased and you know where to look for
answers.&lt;sup id="sf-different-types-of-problem-3-back"&gt;&lt;a class="simple-footnote" href="#sf-different-types-of-problem-3" title="Open the right file, google the right query (and follow the link to stack overflow), make some changes, run your static type checker and linter, run your tests, and push. Done and on to the next item."&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="exceptional-problems"&gt;Exceptional problems:&lt;/h2&gt;
&lt;p&gt;But there seems to be a consistent exception to this model.&lt;sup id="sf-different-types-of-problem-4-back"&gt;&lt;a class="simple-footnote" href="#sf-different-types-of-problem-4" title="which is totally fine. It’s just a mental model, and the map is not the territory"&gt;4&lt;/a&gt;&lt;/sup&gt; Let’s
be silly and call them &lt;code&gt;type W&lt;/code&gt; problems. These are the problems that eat up
far too many hours, and are tiring to solve, even when you are (in most other
respects) an expert.&lt;/p&gt;
&lt;p&gt;For me, these tend to relate to blob storage solutions for web apps deployed
into production. I can think of several factors why this is so, and I’ll
describe the specifics before generalising.&lt;/p&gt;
&lt;p&gt;When a web app runs in production, the data is not stored on the web server
because the things that make a web-server cheap and efficient are not the
things that make a database or a file storage bucket cheap and efficient.&lt;/p&gt;
&lt;p&gt;Therefore they are stored somewhere else and you need some plumbing to join
everything together. There are some abstractions involved to make this work
easily and securely. However when developing locally, you are doing everything
on your laptop. You have a web-server, relational database and file system all
in the same place.&lt;/p&gt;
&lt;p&gt;This is a big, fundamental, architectural difference between your development
environment and your production environment. As a general rule, these are
supposed to be as similar as possible.&lt;/p&gt;
&lt;p&gt;These differences make it much easier to make something that works locally but
doesn’t work in production, and it’s very hard to test if a thing will work in
production without deploying it to your staging environment, which you are
likely less familiar with than your local development setup.&lt;/p&gt;
&lt;p&gt;Deploying to staging and debugging on staging is slower and harder than doing
the same thing locally. Logging (and filtering) will likely be more important. &lt;/p&gt;
&lt;h2 id="solving-exceptional-problems"&gt;Solving exceptional problems&lt;/h2&gt;
&lt;p&gt;So how do you solve these problems quickly and efficiently? What is it about
this problem that makes it so hard? Let’s examine what makes the problem
difficult to solve:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Iteration cycles are slow - I can’t test locally, I have to deploy to
     staging and this takes time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The problem occurs in a ‘high friction’ environment - its difficult to dig
     around and figure out what’s really going on when its hidden below 3
     different layers of abstraction, on a remote machine that I have limited
     access to via a web browser. I want to be able to dig and investigate
     quickly and easily using the same tools I use for writing and testing code
     locally. I’ve taken great efforts to set up my local development
     environment so that I can do this, and its stressful to switch to a
     different and more limited set of tools.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The problem is the result of several things interacting at once, and I can’t
     just test things one at a time. These things are probably very similar to
     the abstractions.&lt;/p&gt;
&lt;p&gt;Thinking clearly, learning, buidling, solving problems, all rely on being
 able to separate or untangle a seemingly complex situation into its
 component parts so that you can figure out what causes what. If you can’t
 isolate individual concerns or components, you have a black box that is
 keeping you ignorant.&lt;/p&gt;
&lt;p&gt;In web development, customized logging is usually a good way to being
 isolating and exploring particular components.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Having said all that, I think the best way to solve a problem is to prevent it
from occurring in the first place, but I’m not good enough to figure out how to
do that, yet.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-different-types-of-problem-1"&gt;on which timescale?
Life is long, does it really matter if it takes 1 week or 1 month to learn
something meaningful? Momentum, and having fun, is important though. &lt;a class="simple-footnote-back" href="#sf-different-types-of-problem-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-different-types-of-problem-2"&gt;from a personal growth point of
view. I suppose from an employers point of view they want all problems solved
fast, &lt;code&gt;type 1&lt;/code&gt; problems. &lt;a class="simple-footnote-back" href="#sf-different-types-of-problem-2-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-different-types-of-problem-3"&gt;Open the right file, google the right query (and follow the link to
stack overflow), make some changes, run your static type checker and linter,
run your tests, and push. Done and on to the next item. &lt;a class="simple-footnote-back" href="#sf-different-types-of-problem-3-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-different-types-of-problem-4"&gt;which is totally
fine. It’s just a mental model, and the map is not the territory &lt;a class="simple-footnote-back" href="#sf-different-types-of-problem-4-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Web"/></entry><entry><title>Why I Want To Write Regularly</title><link href="https://johnmathews.eu/why-i-want-to-write-regularly.html" rel="alternate"/><published>2021-01-18T11:51:00+01:00</published><updated>2021-01-18T11:51:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-18:/why-i-want-to-write-regularly.html</id><summary type="html"/><content type="html">&lt;p&gt;I’ve started writing more frequently. I want to do this because I often have
thoughts which I’d like to explore and develop further but rarely do. Writing
forces me to organise my thoughts and look at how substantial they really are,
or aren’t.&lt;/p&gt;
&lt;p&gt;There is truth in the saying that “to know a thing you need to be able to teach
it” &lt;sup id="sf-why-i-want-to-write-regularly-1-back"&gt;&lt;a class="simple-footnote" href="#sf-why-i-want-to-write-regularly-1" title="Wikipedia article, and some external validation."&gt;1&lt;/a&gt;&lt;/sup&gt;
, and writing well has several similarities to teaching. Can I really copy a
collection of thoughts from my head to yours?&lt;/p&gt;
&lt;p&gt;Powerful ideas are resilient and have many consequences. The older I get the more I believe
that ideas matter&lt;sup id="sf-why-i-want-to-write-regularly-2-back"&gt;&lt;a class="simple-footnote" href="#sf-why-i-want-to-write-regularly-2" title="A complimentary notion is that asking the right question is more important than finding the right answer. I guess asking the right question is always necessary, but finding the right answer is only sometimes sufficient. Sometimes you can get the answer a bit wrong if you asked the right question, and still get enough benefits to avoid the problem."&gt;2&lt;/a&gt;&lt;/sup&gt;. They have so many
subtle consequences. They are the first
&lt;a href="https://en.wikipedia.org/wiki/Domino_effect"&gt;dominos&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I don’t expect writing regularly to become a permanent habit - it doesn’t need
to be. But I do want to focus on it for awhile so that I become significantly
better. It’s a skill that has too many benefits to be ignored.&lt;/p&gt;
&lt;p&gt;The blogs I remember most are focussed and unapologetic about their priorities.
Most of them have a lot of text and do not focus on design. They make it easy
to read content and don’t spend time or attention on header images or styling. &lt;/p&gt;
&lt;p&gt;Before I redesigned this blog I had default settings that asked me to supply an
image for each post, and for a summary, and a suggested tweet. None of it was
necessary and whilst they all tried to make the blog better they ended up
making it harder to write. These peripheral features added complexity and
distracted from the main thing.&lt;/p&gt;
&lt;p&gt;They’re are still there if I want to use them but they are not set up
to be used by default anymore. They’ve been moved to the background and if I
forget they exist then that’s &lt;span class="caps"&gt;OK&lt;/span&gt; - it just shows they weren’t as important in
practice as I thought they would be. I was probably just having fun adding new
features and working out how to build them.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it"&gt;You Ain’t Gonna Need
It&lt;/a&gt;, mate.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-why-i-want-to-write-regularly-1"&gt;Wikipedia
&lt;a href="https://en.wikipedia.org/wiki/Learning_by_teaching"&gt;article&lt;/a&gt;, and some
&lt;a href="https://web.archive.org/web/20210118112910/https://digest.bps.org.uk/2018/05/04/learning-by-teaching-others-is-extremely-effective-a-new-study-tested-a-key-reason-why/"&gt;external
validation&lt;/a&gt;. &lt;a class="simple-footnote-back" href="#sf-why-i-want-to-write-regularly-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-why-i-want-to-write-regularly-2"&gt;A complimentary notion is that asking the right question is more
important than finding the right answer. I guess asking the right question is
always necessary, but finding the right answer is only sometimes &lt;a href="https://en.wikipedia.org/wiki/Necessity_and_sufficiency"&gt;sufficient&lt;/a&gt;.
Sometimes you can get the answer a bit wrong if you asked the right question,
and still get enough benefits to avoid the problem. &lt;a class="simple-footnote-back" href="#sf-why-i-want-to-write-regularly-2-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Non-technical/Learning"/></entry><entry><title>Python: Becoming A Better Python Developer</title><link href="https://johnmathews.eu/becoming-a-better-python-developer.html" rel="alternate"/><published>2021-01-18T11:25:00+01:00</published><updated>2021-01-18T11:25:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-18:/becoming-a-better-python-developer.html</id><summary type="html"/><content type="html">&lt;p&gt;I’ve been subscribed to Aaron Maxwell’s “Powerful Python” newsletter for over a
year and I really like it. His emails are opinionated and candid, and
singularly focussed. He seems passionate about what he does and I like that.&lt;/p&gt;
&lt;p&gt;Ultimately, the emails are designed to drive sign-ups for his courses which I
suspect would be very good, but there is a lot of value in the free emails.
Thanks Aaron. I realised that the emails are sequential and each subscriber
gets the same sequence of messages regardless of when they signed up. There is
the ‘first’ message, and then the ‘second’, and they kind of progress and flow.&lt;/p&gt;
&lt;p&gt;This means that there are more benefits to paying attention than for usual
email subscriptions. Even though the emails arrive when I’m at a
supermarket, or making dinner for my kids, it’s good to try and read it
properly later.&lt;/p&gt;
&lt;p&gt;After being subscribed for several months, I unsubscribed and resubscribed. Now
that I know how reliable and high quality this advice is I’m going to
prioritise working through the examples and doing some of what I missed the
first time. I’ve gone back to the beginning to reinforce the parts I know and
to try again with what eluded me the first time.&lt;/p&gt;
&lt;p&gt;Three kinds of practice projects to become a better developer:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A web app - use &lt;code&gt;Django&lt;/code&gt; if you don’t know which framework to user. Done this.&lt;/li&gt;
&lt;li&gt;A command line tool - use the &lt;code&gt;argparse&lt;/code&gt; module, because it’s in the standard
   library. Haven’t done this yet, I guess now is a good time to start. It
   seems like the simplest and quickest of the three kinds of project, and I
   can see how useful it could be - it lets you use the app in many different
   contexts, outside the python eco-system and anywhere command line tools can
   be used (everywhere).&lt;/li&gt;
&lt;li&gt;A machine learning model - I’ve already studied this, from theory (&lt;code&gt;numpy&lt;/code&gt;)
   to frameworks (&lt;code&gt;tensorflow&lt;/code&gt;). I’m happy to see it’s included.&lt;/li&gt;
&lt;/ol&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>Using Vim with large codebases</title><link href="https://johnmathews.eu/vim-for-large-projects.html" rel="alternate"/><published>2021-01-15T15:02:00+01:00</published><updated>2021-01-15T15:02:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-15:/vim-for-large-projects.html</id><summary type="html"/><content type="html">&lt;p&gt;I use Vim as my text editor and &lt;span class="caps"&gt;IDE&lt;/span&gt;. I like that its free, open
source and customizable. Below are some of the most useful
plugins and features I’ve started using this year when I was building Moneybar
and learning how to use Django.&lt;/p&gt;
&lt;p&gt;There’s a copy of my &lt;code&gt;.vimrc&lt;/code&gt; at the end. &lt;/p&gt;
&lt;p&gt;I’m happy to invest time and effort learning how to make the most of
Vim and its plugins. I’m confident that I’ll still be using it twenty
years from now.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Filetype plugins - if you want some settings to be active only for
     particular filetypes, like &lt;code&gt;.py&lt;/code&gt; (python) or &lt;code&gt;.txt&lt;/code&gt; (text) then create a file in
     &lt;code&gt;~/.vim/ftplugin/&lt;filetype&gt;.vim&lt;/filetype&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Vim will look in this file when it opens a buffer of the corresponding
 file type. Good for formatting options like line length, tab spaces, vim
 commands that are language specific. &lt;/p&gt;
&lt;p&gt;You can’t activate plugins in these files though. All the plugins have to be
 activated in your &lt;code&gt;.vimrc&lt;/code&gt; in the usual way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;janko-m/vim-test&lt;/code&gt; - this plugin lets you runs tests without leaving vim.
   You can run the test that’s nearest the cursor, or all the tests in the
   current buffer. It’s very customizable. I wish it could be a bit faster, but
   I could probably improve that myself by changing some settings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dense-analysis/ale&lt;/code&gt; - The incredible Asyncronous Linting Engine (&lt;span class="caps"&gt;A.L.&lt;/span&gt;E)
   applies fixers and linters to various filetypes, when you want and how you want.
   Super useful for writing tidy code and catching mistakes before the code is run.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;junegunn/fzf&lt;/code&gt; and &lt;code&gt;junegunn/fzf.vim&lt;/code&gt; - It took a little getting used to at
   first, but now I can’t imagine not using a tool like this (this could be
   said about so many vim-related things). Use &lt;code&gt;fzf&lt;/code&gt; to switch between open
   buffers, open a new file, search for files using the filename, or search
   within all the files in the project for specific text. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;majutsushi/tagbar&lt;/code&gt; - This plugin opens a sidebar which contains a list of
   of functions and classes and methods (tags). You can use it to see which
   methods a class contains, and jump to the part of the buffer where a tag
   is defined.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is my &lt;code&gt;.vimrc&lt;/code&gt; during January 2021.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;" ========== Global ==========&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;nocompatible&lt;/span&gt;              &lt;span class="c"&gt;" always put it at the top of .vimrc. effects mappings, undo, etc.&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;utf&lt;span class="m"&gt;-8&lt;/span&gt;            &lt;span class="c"&gt;" utf-8 encoding&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; termguicolors
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;t_Co&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;256&lt;/span&gt;                  &lt;span class="c"&gt;" number of colors&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;noerrorbells&lt;/span&gt; &lt;span class="nb"&gt;vb&lt;/span&gt; &lt;span class="nb"&gt;t_vb&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;     &lt;span class="c"&gt;" no error bells, yes screnflash.&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;linespace&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;scrolloff&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;               &lt;span class="c"&gt;" minimum number of screen lines above and below the cursor&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;shortmess&lt;/span&gt;&lt;span class="p"&gt;-=&lt;/span&gt;S              &lt;span class="c"&gt;" show how many times a search result occurs in current buffer, and index of current match&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="k"&gt;number&lt;/span&gt; &lt;span class="nb"&gt;relativenumber&lt;/span&gt;     &lt;span class="c"&gt;" Line numbers&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;splitbelow&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;splitright&lt;/span&gt;
&lt;span class="c"&gt;" set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;undofile&lt;/span&gt;                  &lt;span class="c"&gt;" Maintain undo history between sessions&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;undodir&lt;/span&gt;&lt;span class="p"&gt;=~&lt;/span&gt;&lt;span class="sr"&gt;/.vim/&lt;/span&gt;undo       &lt;span class="c"&gt;" put all the undo files in this dir&lt;/span&gt;

&lt;span class="k"&gt;filetype&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;                   &lt;span class="c"&gt;" enables filetype detection&lt;/span&gt;
&lt;span class="k"&gt;filetype&lt;/span&gt; plugin indent &lt;span class="k"&gt;on&lt;/span&gt;     &lt;span class="c"&gt;" detection on, plugin on, indent on. To see the current status, type: :filetype&lt;/span&gt;
&lt;span class="nb"&gt;syntax&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;                 &lt;span class="c"&gt;" syntax highlighting - try 'syntax on/enable'&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;noesckeys&lt;/span&gt;           &lt;span class="c"&gt;" might break stuff, should make &lt;esc&gt; delay smaller&lt;/esc&gt;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;timeoutlen&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;350&lt;/span&gt;            &lt;span class="c"&gt;" timeoutlen is used for mapping delays&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;ttimeoutlen&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;             &lt;span class="c"&gt;" ttimeoutlen is used for key code delays&lt;/span&gt;

&lt;span class="c"&gt;"Search/Find/Highlight ======================================&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;incsearch&lt;/span&gt;  &lt;span class="nb"&gt;ignorecase&lt;/span&gt;  &lt;span class="nb"&gt;smartcase&lt;/span&gt;  &lt;span class="nb"&gt;hlsearch&lt;/span&gt;
&lt;span class="nb"&gt;highlight&lt;/span&gt; Search guibg&lt;span class="p"&gt;=&lt;/span&gt;purple guifg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'NONE'&lt;/span&gt;
&lt;span class="nb"&gt;highlight&lt;/span&gt; Search cterm&lt;span class="p"&gt;=&lt;/span&gt;none ctermbg&lt;span class="p"&gt;=&lt;/span&gt;green ctermfg&lt;span class="p"&gt;=&lt;/span&gt;black
&lt;span class="nb"&gt;highlight&lt;/span&gt; CursorColumn guibg&lt;span class="p"&gt;=&lt;/span&gt;blue guifg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;red&lt;/span&gt;
&lt;span class="nb"&gt;highlight&lt;/span&gt; CursorColumn ctermbg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;red&lt;/span&gt; ctermfg&lt;span class="p"&gt;=&lt;/span&gt;blue
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="sr"&gt;//&lt;/span&gt; :&lt;span class="k"&gt;nohlsearch&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; # #``
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; * *``

&lt;span class="c"&gt;" close buffers properly go to previous buffer, then delete the buffer you were just in.&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;bd&lt;/span&gt; :&lt;span class="k"&gt;bp&lt;/span&gt;\&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="k"&gt;bd&lt;/span&gt; #&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;inoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;bd&lt;/span&gt; :&lt;span class="k"&gt;bp&lt;/span&gt;\&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="k"&gt;bd&lt;/span&gt; #&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" Spell check ==============================================&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;spelllang&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;en&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;ss&lt;/span&gt; :&lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="k"&gt;spell&lt;/span&gt;&lt;span class="p"&gt;!&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;sf&lt;/span&gt; z&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" ========== Set leader and local leader ===================&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; mapleader&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"\&lt;space&gt;"&lt;/space&gt;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; localleader&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"\\"&lt;/span&gt;

&lt;span class="c"&gt;" insert 1 space to the right, without leaving normal mode&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;localleader&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;space&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Space&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;Right&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" Flash the cursor row (and column) colors are set after color scheme ========&lt;/span&gt;
&lt;span class="c"&gt;" nnoremap &lt;leader&gt;f :call Flash()&lt;cr&gt;&lt;/cr&gt;&lt;/leader&gt;&lt;/span&gt;
&lt;span class="c"&gt;" function! Flash()&lt;/span&gt;
&lt;span class="c"&gt;"     " set cursorline cursorcolumn&lt;/span&gt;
&lt;span class="c"&gt;"     set cursorline&lt;/span&gt;
&lt;span class="c"&gt;"     redraw&lt;/span&gt;
&lt;span class="c"&gt;"     sleep 110m&lt;/span&gt;
&lt;span class="c"&gt;"     set nocursorline&lt;/span&gt;
&lt;span class="c"&gt;" endfunction&lt;/span&gt;

&lt;span class="c"&gt;" Edit/Reload the .vimrc file&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;ve&lt;/span&gt; :&lt;span class="k"&gt;e&lt;/span&gt; $MYVIMRC&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;vr :&lt;span class="k"&gt;so&lt;/span&gt; $MYVIMRC&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

augroup VimReload
    autocmd&lt;span class="p"&gt;!&lt;/span&gt;
    autocmd &lt;span class="nb"&gt;BufWritePost&lt;/span&gt; $MYVIMRC source $MYVIMRC
augroup END

&lt;span class="c"&gt;" Yank to clipboard&lt;/span&gt;
&lt;span class="nb"&gt;vnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;"+y&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; has&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"clipboard"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;unnamed &lt;span class="c"&gt;" copy to the system clipboard&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; has&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"unnamedplus"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;" X11 support&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;+=&lt;/span&gt;unnamedplus
  &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;

&lt;span class="c"&gt;" Go into NORMAL mode&lt;/span&gt;
&lt;span class="nb"&gt;inoremap&lt;/span&gt; jk &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" view working directory&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;pwd&lt;/span&gt; :&lt;span class="k"&gt;cd&lt;/span&gt; %:&lt;span class="k"&gt;p&lt;/span&gt;:&lt;span class="k"&gt;h&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" toggle line wrap&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;lw&lt;/span&gt; :&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;nowrap&lt;/span&gt;&lt;span class="p"&gt;!&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" toggle line numbers&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;ln :&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;relativenumber&lt;/span&gt;&lt;span class="p"&gt;!&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" Insert current datetime&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;dt A &lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;hh&lt;/span&gt; &lt;span class="s2"&gt;"=strftime("&lt;/span&gt;\%Y&lt;span class="p"&gt;-&lt;/span&gt;\%&lt;span class="k"&gt;m&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;\%&lt;span class="k"&gt;d&lt;/span&gt;"&lt;span class="p"&gt;)&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;gp&lt;/span&gt;

&lt;span class="c"&gt;" map w to `&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; ` &lt;span class="k"&gt;w&lt;/span&gt;

&lt;span class="c"&gt;" Swap : and ;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; ; :
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; : ;
&lt;span class="nb"&gt;vnoremap&lt;/span&gt; ; :
&lt;span class="nb"&gt;vnoremap&lt;/span&gt; : ;

&lt;span class="c"&gt;" Navigation &amp;amp; movemement&lt;/span&gt;
&lt;span class="c"&gt;" save buffer if it has been changed&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="nb"&gt;ww&lt;/span&gt; :&lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;" close Vim, but not if there are unsaved changes&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;qa&lt;/span&gt; :&lt;span class="k"&gt;qa&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;" save all changes&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;wa&lt;/span&gt; :&lt;span class="k"&gt;wa&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;" close buffer&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; qq :&lt;span class="k"&gt;bp&lt;/span&gt;\&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="k"&gt;bd&lt;/span&gt; #&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;wq&lt;/span&gt; :&lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="k"&gt;bp&lt;/span&gt;\&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="k"&gt;bd&lt;/span&gt; #&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;" switch buffers&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; :&lt;span class="k"&gt;bn&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; _ :&lt;span class="k"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" Split navigations&lt;/span&gt;
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;W&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;H&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;j&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;W&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;J&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;k&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;W&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;K&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;W&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;L&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;ww&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;W&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;W&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;wq&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;W&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Q&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" split (pane) resize&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;k&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;resize&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;j&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;resize&lt;/span&gt; &lt;span class="m"&gt;-2&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;vertical&lt;/span&gt; &lt;span class="k"&gt;resize&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;vertical&lt;/span&gt; &lt;span class="k"&gt;resize&lt;/span&gt; &lt;span class="m"&gt;-2&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" open help in vertical split by default&lt;/span&gt;
cabbrev vhelp &lt;span class="k"&gt;vert&lt;/span&gt; help

&lt;span class="c"&gt;" Natural cursor movement over wrapped lines&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;j&lt;/span&gt; gj
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;k&lt;/span&gt; gk

&lt;span class="c"&gt;" Insert blank lines in normal mode&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;o&lt;/span&gt; &lt;span class="k"&gt;o&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;k&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;O O&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;j&lt;/span&gt;

&lt;span class="c"&gt;"*****************************&lt;/span&gt;
&lt;span class="c"&gt;"========== PLUGINS ==========&lt;/span&gt;
&lt;span class="c"&gt;"*****************************&lt;/span&gt;

&lt;span class="k"&gt;call&lt;/span&gt; plug#begin&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'~/.vim/plugged'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;" numbers as text objects&lt;/span&gt;
Plug &lt;span class="s1"&gt;'MisanthropicBit/vim-numbers'&lt;/span&gt;


&lt;span class="c"&gt;"run shell commands async in vim8"&lt;/span&gt;
Plug &lt;span class="s1"&gt;'skywind3000/asyncrun.vim'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:asyncrun_open &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;

&lt;span class="c"&gt;" When using :python or :!python, access the packages in venv&lt;/span&gt;
&lt;span class="c"&gt;" :VirtualEnvList&lt;/span&gt;
&lt;span class="c"&gt;" :VirtualEnvActivate &lt;tab&gt;&lt;/tab&gt;&lt;/span&gt;
Plug &lt;span class="s1"&gt;'jmcantrell/vim-virtualenv'&lt;/span&gt;

&lt;span class="c"&gt;" force quickfix to be full widtth&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; qf &lt;span class="k"&gt;wincmd&lt;/span&gt; J

&lt;span class="c"&gt;" testing - many languages and test runners&lt;/span&gt;
Plug &lt;span class="s1"&gt;'janko-m/vim-test'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; test#strategy &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"asyncrun_background"&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; test#python#runner &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'pytest'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; test#python#pytest#&lt;span class="k"&gt;options&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'-x'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; test#&lt;span class="k"&gt;vim&lt;/span&gt;#term_position &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"belowright"&lt;/span&gt;

&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;t&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;LEADER&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;n&lt;/span&gt; :TestNearest&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;t&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;LEADER&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;f&lt;/span&gt; :TestFile&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;t&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;LEADER&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;s :TestSuite&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;t&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;LEADER&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt; :TestLast&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;t&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;LEADER&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;g&lt;/span&gt; :TestVisit&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" toggle the quickfix window&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; ToggleQuickFix&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; empty&lt;span class="p"&gt;(&lt;/span&gt;filter&lt;span class="p"&gt;(&lt;/span&gt;getwininfo&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;'v:val.quickfix'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;copen&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;
    &lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="nb"&gt;norelativenumber&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;cclose&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;cc&lt;/span&gt; :&lt;span class="k"&gt;call&lt;/span&gt; ToggleQuickFix&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;


&lt;span class="c"&gt;" generates an index (or tag) file of language objects found in source files&lt;/span&gt;
&lt;span class="c"&gt;" &lt;c-]&gt; jump to definition&lt;/c-]&gt;&lt;/span&gt;
&lt;span class="c"&gt;" &lt;c-o&gt; jump back&lt;/c-o&gt;&lt;/span&gt;
&lt;span class="c"&gt;" g] see a list of multiple matches&lt;/span&gt;
&lt;span class="c"&gt;" &lt;c-t&gt;&lt;/c-t&gt;&lt;/span&gt;
Plug &lt;span class="s1"&gt;'universal-ctags/ctags'&lt;/span&gt;

&lt;span class="c"&gt;" (re)generate tags file in the bg&lt;/span&gt;
Plug &lt;span class="s1"&gt;'ludovicchabant/vim-gutentags'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:gutentags_ctags_exclude &lt;span class="p"&gt;=&lt;/span&gt; [&lt;span class="s1"&gt;'.json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'.mypy_cache/**'&lt;/span&gt;]

&lt;span class="c"&gt;" sidebar that displays the ctags-generated tags of the current file, ordered by their scope&lt;/span&gt;
Plug &lt;span class="s1"&gt;'majutsushi/tagbar'&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;F2&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :TagbarToggle&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;F2&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :TagbarToggle&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" add python library code to tags file, goto def with &lt;c-]&gt;&lt;/c-]&gt;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; pyEnvLib &lt;span class="p"&gt;=&lt;/span&gt; $VIRTUAL_ENV
&lt;span class="k"&gt;let&lt;/span&gt; pyEnvLib .&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/lib/python3.8/'&lt;/span&gt;

&lt;span class="c"&gt;" Async linting engine&lt;/span&gt;
Plug &lt;span class="s1"&gt;'dense-analysis/ale'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ale_lint_on_enter &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ale_lint_on_save &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="c"&gt;" ALE completion&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ale_completion_enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;omnifunc&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;ale#completion#OmniFunc
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ale_completion_autoimport &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;at :ALEToggle&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;af :ALEFix&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;aj :ALENext&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;ak :ALEPrevious&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" iSort&lt;/span&gt;
Plug &lt;span class="s1"&gt;'fisadev/vim-isort'&lt;/span&gt;
&lt;span class="c"&gt;" track the snippets engine&lt;/span&gt;
Plug &lt;span class="s1"&gt;'sirver/ultisnips'&lt;/span&gt;
&lt;span class="c"&gt;" Snippets are separated from the engine. Add this if you want them:&lt;/span&gt;
Plug &lt;span class="s1"&gt;'honza/vim-snippets'&lt;/span&gt;
&lt;span class="c"&gt;" Trigger configuration. Do not use &lt;tab&gt; if you use https://github.com/Valloric/YouCompleteMe.&lt;/tab&gt;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:UltiSnipsExpandTrigger&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;c-a&gt;"&lt;/c-a&gt;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:UltiSnipsJumpForwardTrigger&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;c-b&gt;"&lt;/c-b&gt;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:UltiSnipsJumpBackwardTrigger&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;c-z&gt;"&lt;/c-z&gt;&lt;/span&gt;
&lt;span class="c"&gt;" If you want :UltiSnipsEdit to split your window.&lt;/span&gt;
&lt;span class="c"&gt;" let g:UltiSnipsEditSplit="vertical"&lt;/span&gt;

Plug &lt;span class="s1"&gt;'Valloric/YouCompleteMe'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'davidhalter/jedi'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'maksimr/vim-jsbeautify'&lt;/span&gt;

&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;x&lt;/span&gt;  :YcmCompleter GoTo&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;" the subcommands add entries to Vim's 'jumplist' so you can use&lt;/span&gt;
&lt;span class="c"&gt;" 'CTRL-O' to jump back to where you were before invoking the command (and&lt;/span&gt;
&lt;span class="c"&gt;" 'CTRL-I' to jump forward; see ':h jumplist' for details)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_confirm_extra_conf &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_autoclose_preview_window_after_completion&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_collect_identifiers_from_tags_files &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_use_ultisnips_completer &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_seed_identifiers_with_syntax &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_complete_in_comments &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_complete_in_strings &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_collect_identifiers_from_tags_files &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;


&lt;span class="c"&gt;" autoclose parens, brackets etc&lt;/span&gt;
&lt;span class="c"&gt;" Plug 'townk/vim-autoclose'&lt;/span&gt;

&lt;span class="c"&gt;" vim-tmux focus events&lt;/span&gt;
Plug &lt;span class="s1"&gt;'tmux-plugins/vim-tmux-focus-events'&lt;/span&gt;

&lt;span class="c"&gt;" Code folding&lt;/span&gt;
&lt;span class="c"&gt;" Plug 'konfekt/fastfold'&lt;/span&gt;

&lt;span class="c"&gt;" match m of n https://vimawesome.com/plugin/indexedsearch&lt;/span&gt;
&lt;span class="c"&gt;" Plug 'henrik/vim-indexed-search'&lt;/span&gt;

&lt;span class="c"&gt;" adds vertical lines to easily show indent levels&lt;/span&gt;
Plug &lt;span class="s1"&gt;'yggdroot/indentline'&lt;/span&gt;

&lt;span class="c"&gt;" Fugitive&lt;/span&gt;
Plug &lt;span class="s1"&gt;'tpope/vim-fugitive'&lt;/span&gt;

&lt;span class="c"&gt;" Marks&lt;/span&gt;
Plug &lt;span class="s1"&gt;'kshenoy/vim-signature'&lt;/span&gt;

&lt;span class="c"&gt;" Latex Vimtex&lt;/span&gt;
Plug &lt;span class="s1"&gt;'lervag/vimtex'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:tex_flavor &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'latex'&lt;/span&gt;
autocmd Filetype tex &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;updatetime&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:livepreview_previewer &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'open -a Preview'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:tex_IgnoredWarnings &lt;span class="p"&gt;=&lt;/span&gt;
    \&lt;span class="s1"&gt;'Underfull'&lt;/span&gt;.&lt;span class="s2"&gt;"\n"&lt;/span&gt;.
    \&lt;span class="s1"&gt;'Overfull'&lt;/span&gt;.&lt;span class="s2"&gt;"\n"&lt;/span&gt;.
    \&lt;span class="s1"&gt;'specifier changed to'&lt;/span&gt;.&lt;span class="s2"&gt;"\n"&lt;/span&gt;.
    \&lt;span class="s1"&gt;'You have requested'&lt;/span&gt;.&lt;span class="s2"&gt;"\n"&lt;/span&gt;.
    \&lt;span class="s1"&gt;'Missing number, treated as zero.'&lt;/span&gt;.&lt;span class="s2"&gt;"\n"&lt;/span&gt;.
    \&lt;span class="s1"&gt;'There were undefined references'&lt;/span&gt;.&lt;span class="s2"&gt;"\n"&lt;/span&gt;.
    \&lt;span class="s1"&gt;'Citation %.%# undefined'&lt;/span&gt;.&lt;span class="s2"&gt;"\n"&lt;/span&gt;.
    \&lt;span class="s1"&gt;'Double space found.'&lt;/span&gt;.&lt;span class="s2"&gt;"\n"&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:Tex_IgnoreLevel &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;

&lt;span class="c"&gt;" Rainbow parenthesis&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; blacklist &lt;span class="p"&gt;=&lt;/span&gt; [&lt;span class="s1"&gt;'html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'md'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'wiki'&lt;/span&gt;]
autocmd &lt;span class="nb"&gt;BufWritePre&lt;/span&gt; * &lt;span class="k"&gt;if&lt;/span&gt; index&lt;span class="p"&gt;(&lt;/span&gt;blacklist&lt;span class="p"&gt;,&lt;/span&gt; &amp;amp;&lt;span class="nb"&gt;ft&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; Plug &lt;span class="s1"&gt;'luochen1990/rainbow'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:rainbow_active &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:rainbow_conf &lt;span class="p"&gt;=&lt;/span&gt; {
    \&lt;span class="s1"&gt;'guifgs'&lt;/span&gt;: [&lt;span class="s1"&gt;'green'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'magenta1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'gold'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'red'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'deepskyblue'&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
    \&lt;span class="s1"&gt;'guis'&lt;/span&gt;: [&lt;span class="s1"&gt;'bold'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'standout'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'undercurl'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'italic'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'strikethrough'&lt;/span&gt;]
    \}

&lt;span class="c"&gt;" Set color scheme.&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;background&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;dark&lt;/span&gt;

Plug &lt;span class="s1"&gt;'chriskempson/base16-vim'&lt;/span&gt;
&lt;span class="c"&gt;" colorscheme base16-default-dark&lt;/span&gt;
&lt;span class="k"&gt;colorscheme&lt;/span&gt; badwolf
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:badwolf_darkgutter &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:badwolf_html_link_underline &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:badwolf_css_props_highlight &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="c"&gt;" colorscheme modifications&lt;/span&gt;
&lt;span class="nb"&gt;highlight&lt;/span&gt; Comment ctermfg&lt;span class="p"&gt;=&lt;/span&gt;cyan guifg&lt;span class="p"&gt;=&lt;/span&gt;cyan
&lt;span class="nb"&gt;highlight&lt;/span&gt; pythonComment ctermfg&lt;span class="p"&gt;=&lt;/span&gt;cyan guifg&lt;span class="p"&gt;=&lt;/span&gt;cyan
&lt;span class="nb"&gt;highlight&lt;/span&gt; LineNr ctermfg&lt;span class="p"&gt;=&lt;/span&gt;cyan guifg&lt;span class="p"&gt;=&lt;/span&gt;cyan
&lt;span class="k"&gt;hi&lt;/span&gt; nontext &lt;span class="nb"&gt;term&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt; ctermfg&lt;span class="p"&gt;=&lt;/span&gt;Cyan guifg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;#80a0ff&lt;/span&gt; &lt;span class="k"&gt;gui&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt;
&lt;span class="k"&gt;hi&lt;/span&gt; vimLineComment &lt;span class="nb"&gt;term&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt; ctermfg&lt;span class="p"&gt;=&lt;/span&gt;Cyan guifg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;#80a0ff&lt;/span&gt; &lt;span class="k"&gt;gui&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt;
&lt;span class="c"&gt;" SpecialKey - use :set list to toggle visibility of EOL, CR, etc&lt;/span&gt;
&lt;span class="k"&gt;hi&lt;/span&gt; specialKey &lt;span class="nb"&gt;term&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt; ctermfg&lt;span class="p"&gt;=&lt;/span&gt;Cyan guifg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;#80a0ff&lt;/span&gt; &lt;span class="k"&gt;gui&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt;

&lt;span class="c"&gt;" colors for flashing cursorline and cursorcolumn&lt;/span&gt;
&lt;span class="k"&gt;hi&lt;/span&gt; CursorLine   cterm&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;NONE&lt;/span&gt; ctermbg&lt;span class="p"&gt;=&lt;/span&gt;green ctermfg&lt;span class="p"&gt;=&lt;/span&gt;black guibg&lt;span class="p"&gt;=&lt;/span&gt;green guifg&lt;span class="p"&gt;=&lt;/span&gt;black
&lt;span class="k"&gt;hi&lt;/span&gt; CursorColumn cterm&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;NONE&lt;/span&gt; ctermbg&lt;span class="p"&gt;=&lt;/span&gt;green ctermfg&lt;span class="p"&gt;=&lt;/span&gt;black guibg&lt;span class="p"&gt;=&lt;/span&gt;green guifg&lt;span class="p"&gt;=&lt;/span&gt;black

&lt;span class="c"&gt;" query what kind of syntax is this color? - wc&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="nb"&gt;wc&lt;/span&gt; :echo &lt;span class="s2"&gt;"hi&amp;lt;"&lt;/span&gt; . synIDattr&lt;span class="p"&gt;(&lt;/span&gt;synID&lt;span class="p"&gt;(&lt;/span&gt;line&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="k"&gt;col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; . &lt;span class="s1"&gt;'&amp;gt; trans&amp;lt;'&lt;/span&gt; . synIDattr&lt;span class="p"&gt;(&lt;/span&gt;synID&lt;span class="p"&gt;(&lt;/span&gt;line&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="k"&gt;col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; .&lt;span class="s2"&gt;"&amp;gt; lo&amp;lt;"&lt;/span&gt; . synIDattr&lt;span class="p"&gt;(&lt;/span&gt;synIDtrans&lt;span class="p"&gt;(&lt;/span&gt;synID&lt;span class="p"&gt;(&lt;/span&gt;line&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="k"&gt;col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; . &lt;span class="s2"&gt;"&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" fuzzy file, buffer, tag finder&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;rtp&lt;/span&gt;&lt;span class="p"&gt;+=&lt;/span&gt;&lt;span class="sr"&gt;/usr/&lt;/span&gt;local&lt;span class="sr"&gt;/opt/&lt;/span&gt;fzf

&lt;span class="c"&gt;" ensure you have the latest version&lt;/span&gt;
Plug &lt;span class="s1"&gt;'junegunn/fzf'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; { &lt;span class="s1"&gt;'do'&lt;/span&gt;: { &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; fzf#install&lt;span class="p"&gt;()&lt;/span&gt; } }
Plug &lt;span class="s1"&gt;'junegunn/fzf.vim'&lt;/span&gt;

&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;e&lt;/span&gt; :Files&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;r&lt;/span&gt; :Buffers&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;t&lt;/span&gt; :Tags&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;ff&lt;/span&gt; :Rg&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;" nnoremap &lt;silent&gt; &lt;leader&gt;ff :Ag&lt;cr&gt;&lt;/cr&gt;&lt;/leader&gt;&lt;/silent&gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;la&lt;/span&gt; :BLines&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;ll&lt;/span&gt; :Lines&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;' :Marks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;fh :Helptags&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;fs&lt;/span&gt; :Snippets&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;fc :Commits&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;fbc :BCommits&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;hh&lt;/span&gt; :History&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt;: :History:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt;&lt;span class="sr"&gt;/ :History/&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" let $FZF_DEFAULT_OPTS = '--layout=reverse --info=inline'&lt;/span&gt;
&lt;span class="c"&gt;" let $FZF_DEFAULT_COMMAND="rg --files --hidden"&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:fzf_buffers_jump &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:fzf_layout &lt;span class="p"&gt;=&lt;/span&gt; { &lt;span class="s1"&gt;'down'&lt;/span&gt;: &lt;span class="s1"&gt;'~50%'&lt;/span&gt; }
&lt;span class="c"&gt;" let g:fzf_preview_window = ''&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:fzf_preview_window &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'right:0%'&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; s:copy_results&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; joined_lines &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt;:&lt;span class="nb"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"\n"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; len&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt;:&lt;span class="nb"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; joined_lines .&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"\n"&lt;/span&gt;
  &lt;span class="k"&gt;endif&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; @&lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; joined_lines
&lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:fzf_action &lt;span class="p"&gt;=&lt;/span&gt; {
  \ &lt;span class="s1"&gt;'ctrl-t'&lt;/span&gt;: &lt;span class="s1"&gt;'tab split'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'ctrl-x'&lt;/span&gt;: &lt;span class="s1"&gt;'split'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'ctrl-v'&lt;/span&gt;: &lt;span class="s1"&gt;'vsplit'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'ctrl-o'&lt;/span&gt;: &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'s:copy_results'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  \ }

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:fzf_colors &lt;span class="p"&gt;=&lt;/span&gt;
\ { &lt;span class="s1"&gt;'fg'&lt;/span&gt;:      [&lt;span class="s1"&gt;'fg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Normal'&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'bg'&lt;/span&gt;:      [&lt;span class="s1"&gt;'bg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Normal'&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'hl'&lt;/span&gt;:      [&lt;span class="s1"&gt;'fg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Comment'&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'fg+'&lt;/span&gt;:     [&lt;span class="s1"&gt;'fg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'CursorLine'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'CursorColumn'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Normal'&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'bg+'&lt;/span&gt;:     [&lt;span class="s1"&gt;'bg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'CursorLine'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'CursorColumn'&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'hl+'&lt;/span&gt;:     [&lt;span class="s1"&gt;'fg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Statement'&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'info'&lt;/span&gt;:    [&lt;span class="s1"&gt;'fg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'PreProc'&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'prompt'&lt;/span&gt;:  [&lt;span class="s1"&gt;'fg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Conditional'&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'pointer'&lt;/span&gt;: [&lt;span class="s1"&gt;'fg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Exception'&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'marker'&lt;/span&gt;:  [&lt;span class="s1"&gt;'fg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Keyword'&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'spinner'&lt;/span&gt;: [&lt;span class="s1"&gt;'fg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Label'&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;'header'&lt;/span&gt;:  [&lt;span class="s1"&gt;'fg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Comment'&lt;/span&gt;] }


&lt;span class="c"&gt;" grep in vim - shows results in a split window&lt;/span&gt;
Plug &lt;span class="s1"&gt;'mileszs/ack.vim'&lt;/span&gt;

&lt;span class="c"&gt;" session tracking&lt;/span&gt;
Plug &lt;span class="s1"&gt;'tpope/vim-obsession'&lt;/span&gt;

&lt;span class="c"&gt;" pairs of handy bracket mapping&lt;/span&gt;
Plug &lt;span class="s1"&gt;'tpope/vim-unimpaired'&lt;/span&gt;

&lt;span class="c"&gt;" https://vimawesome.com/plugin/surround-vim&lt;/span&gt;
Plug &lt;span class="s1"&gt;'tpope/vim-surround'&lt;/span&gt;

&lt;span class="c"&gt;" repeat commands from plugin mappings&lt;/span&gt;
Plug &lt;span class="s1"&gt;'tpope/vim-repeat'&lt;/span&gt;

&lt;span class="c"&gt;" vinegar&lt;/span&gt;
Plug &lt;span class="s1"&gt;'tpope/vim-vinegar'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:netrw_liststyle &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;

&lt;span class="c"&gt;" CSV&lt;/span&gt;
Plug &lt;span class="s1"&gt;'chrisbra/csv.vim'&lt;/span&gt;

&lt;span class="c"&gt;" nerdtree&lt;/span&gt;
Plug &lt;span class="s1"&gt;'scrooloose/nerdtree'&lt;/span&gt;

&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;n&lt;/span&gt; :NERDTreeToggle&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:nerdtree_tabs_autoclose&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; NERDTreeAutoDeleteBuffer &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="c"&gt;" Automatically delete the buffer of the file you just deleted&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:nerdtree_tabs_open_on_gui_startup&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="c"&gt;" 2 - open nerdtree only if directory was given as startup argument&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:nerdtree_tabs_smart_startup_focus&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="c"&gt;" always focus file window after startup&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; NERDTreeShowHidden&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="c"&gt;" Status bars&lt;/span&gt;
Plug &lt;span class="s1"&gt;'vim-airline/vim-airline'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'vim-airline/vim-airline-themes'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline_powerline_fonts &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:hybrid_custom_term_colors &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:hybrid_reduced_contrast &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline_statusline_ontop&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline_section_y&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt; &lt;span class="c"&gt;" remove encoding status&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline_skip_empty_sections &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline_theme&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'badwolf'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#fugitiveline#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#tmuxline#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#gutentags#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#virtualenv#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#ale#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#csv#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#tagbar#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#vimtex#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#&lt;span class="nb"&gt;tabline&lt;/span&gt;#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#&lt;span class="nb"&gt;tabline&lt;/span&gt;#formatter &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'unique_tail_improved'&lt;/span&gt;

&lt;span class="c"&gt;" comments&lt;/span&gt;
Plug &lt;span class="s1"&gt;'scrooloose/nerdcommenter'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:NERDSpaceDelims &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:NERDCompactSexyComs &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:NERDDefaultAlign &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'left'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:NERDCommentEmptyLines &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:NERDTrimTrailingWhitespace &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="c"&gt;" markdown. tabular is required&lt;/span&gt;
Plug &lt;span class="s1"&gt;'plasticboy/vim-markdown'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'godlygeek/tabular'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vim_markdown_fenced_languages &lt;span class="p"&gt;=&lt;/span&gt; [&lt;span class="s1"&gt;'python=py'&lt;/span&gt;]
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vim_markdown_follow_anchor &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vim_markdown_conceal_code_blocks &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vim_markdown_folding_disabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vim_markdown_conceal &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:tex_conceal &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vim_markdown_math &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vim_markdown_new_list_item_indent &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vim_markdown_strikethrough &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="c"&gt;" writing prose&lt;/span&gt;
Plug &lt;span class="s1"&gt;'reedes/vim-pencil'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'junegunn/goyo.vim'&lt;/span&gt;

augroup pencil
  autocmd&lt;span class="p"&gt;!&lt;/span&gt;
  autocmd &lt;span class="nb"&gt;FileType&lt;/span&gt; wiki&lt;span class="p"&gt;,&lt;/span&gt;md&lt;span class="p"&gt;,&lt;/span&gt;txt &lt;span class="k"&gt;call&lt;/span&gt; pencil#init&lt;span class="p"&gt;()&lt;/span&gt;
  autocmd &lt;span class="nb"&gt;FileType&lt;/span&gt; wiki&lt;span class="p"&gt;,&lt;/span&gt;md&lt;span class="p"&gt;,&lt;/span&gt;txt :PencilSoft
augroup END

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:pencil#wrapModeDefault &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'soft'&lt;/span&gt; 

autocmd&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;User&lt;/span&gt; GoyoEnter 
autocmd&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;User&lt;/span&gt; GoyoLeave

&lt;span class="c"&gt;" Ensure :q to quit even when Goyo is active&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; s:goyo_enter&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;b&lt;/span&gt;:quitting &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;b&lt;/span&gt;:quitting_bang &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
  autocmd &lt;span class="nb"&gt;QuitPre&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;b&lt;/span&gt;:quitting &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  cabbrev &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;q&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;b&lt;/span&gt;:quitting_bang &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;bar&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;q&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;
  &lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="nb"&gt;wrap&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="c"&gt;" Quit Vim if this is the only remaining buffer&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; s:goyo_leave&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;b&lt;/span&gt;:quitting &amp;amp;&amp;amp; len&lt;span class="p"&gt;(&lt;/span&gt;filter&lt;span class="p"&gt;(&lt;/span&gt;range&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; bufnr&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'$'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="s1"&gt;'buflisted(v:val)'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;b&lt;/span&gt;:quitting_bang
      &lt;span class="k"&gt;qa&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="k"&gt;qa&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;
  &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

autocmd&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;User&lt;/span&gt; GoyoEnter &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;goyo_enter&lt;span class="p"&gt;()&lt;/span&gt;
autocmd&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;User&lt;/span&gt; GoyoLeave &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;goyo_leave&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;g&lt;/span&gt; :Goyo&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" python linting&lt;/span&gt;
&lt;span class="c"&gt;" F7 checks flake8&lt;/span&gt;
Plug &lt;span class="s1"&gt;'nvie/vim-flake8'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'vim-scripts/pylint.vim'&lt;/span&gt;

&lt;span class="c"&gt;"Flagging Unnecessary Whitespace&lt;/span&gt;
&lt;span class="nb"&gt;highlight&lt;/span&gt; BadWhitespace ctermbg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;red&lt;/span&gt; guibg&lt;span class="p"&gt;=&lt;/span&gt;darkred

Plug &lt;span class="s1"&gt;'sheerun/vim-polyglot'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:polyglot_disabled &lt;span class="p"&gt;=&lt;/span&gt; [&lt;span class="s1"&gt;'latex'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'html'&lt;/span&gt;]
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:python_highlight_all &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:graphql_javascript_tags &lt;span class="p"&gt;=&lt;/span&gt; []

&lt;span class="c"&gt;" javaScript&lt;/span&gt;
Plug &lt;span class="s1"&gt;'pangloss/vim-javascript'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:javascript_plugin_jsdoc &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:javascript_plugin_flow &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c"&gt;" format .JSON files by using the jq cli tool&lt;/span&gt;
&lt;span class="k"&gt;com&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; JQ %&lt;span class="p"&gt;!&lt;/span&gt;jq

&lt;span class="c"&gt;" HTML/JINJA&lt;/span&gt;
Plug &lt;span class="s1"&gt;'glench/vim-jinja2-syntax'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'valloric/matchtagalways'&lt;/span&gt;
&lt;span class="c"&gt;" Plug 'alvan/vim-closetag'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:closetag_filenames &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"*.html, *.xhtml, *.phtml"&lt;/span&gt;

&lt;span class="k"&gt;call&lt;/span&gt; plug#&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Technical/Developer Tools"/></entry><entry><title>Using RSS</title><link href="https://johnmathews.eu/using-rss.html" rel="alternate"/><published>2021-01-14T16:52:00+01:00</published><updated>2021-01-14T16:52:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-14:/using-rss.html</id><summary type="html"/><content type="html">&lt;h3 id="updated-10-feb-2021"&gt;Updated: 10 Feb 2021&lt;/h3&gt;
&lt;p&gt;I found a &lt;a href="https://brandur.org/fragments/rss-abandon"&gt;blog post&lt;/a&gt; which is
surprisingly similar to my thoughts on &lt;span class="caps"&gt;RSS&lt;/span&gt; feeds, but better presented and
thought through. The post mentions the idea that “&lt;span class="caps"&gt;RSS&lt;/span&gt; is about capturing the
long tail of blogs that don’t post frequently”
&lt;sup id="sf-using-rss-1-back"&gt;&lt;a class="simple-footnote" href="#sf-using-rss-1" title="https://marco.org/2013/03/26/power-of-rss"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;This idea crystalised why I was so glad I’d started using &lt;span class="caps"&gt;RSS&lt;/span&gt; feeds
again. If readers use &lt;span class="caps"&gt;RSS&lt;/span&gt;, then authors don’t need to concern themselves with
attention. This removes pressure on the author to post
frequently and lets them focus on quality over quantity. News feeds and ad
supported platforms have fundamentally different mechanics and incentives.&lt;/p&gt;
&lt;p&gt;With &lt;span class="caps"&gt;RSS&lt;/span&gt; I can let good quality content come to me, on its own schedule. I
don’t need to remember to look for it, and the authors don’t need to remind me
that they exist.&lt;/p&gt;
&lt;h2 id="google-reader"&gt;Google Reader&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt; is a very effective way of having good quality information
come to you. Back in 2008, I used to use Google Reader to subscribe to &lt;span class="caps"&gt;RSS&lt;/span&gt;
feeds. I was an aspiring photographer back then and I remember being subscribed
to around 80 blogs. Each day I’d read articles from whoever had posted
something new, without needing to visit their websites or remember who they are
or that I’d subscribed to their blog. The authors didn’t need to optimize their
output according to an opaque and changing algorithm either - they didn’t need
to optimize article length, tags, post frequency, image inclusion or linked
content. They could write how they wanted to, which I suspect leads to higher
quality content.&lt;/p&gt;
&lt;h2 id="social-media"&gt;Social Media&lt;/h2&gt;
&lt;p&gt;A few years later Google Reader was closed down, presumably because using &lt;span class="caps"&gt;RSS&lt;/span&gt;
didn’t fit with Googles advertising model. I was unaware of it at the time but
I imagine it sent shockwaves through blogging communities and probably upended
many businesses. I mostly stopped reading blogs.&lt;/p&gt;
&lt;p&gt;Facebook was growing fast, Instagram felt new and exciting, and content was
moving onto ‘platforms’, or into walled gardens. And as they kept on growing
the average quality of the content decreased.&lt;/p&gt;
&lt;p&gt;Twitter is like this now I think. There are some real diamonds to be found from
time to time, but there’s a lot of mud too. Mostly its just mud, but the
occasional diamond can have outsized benefits.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt; isn’t like this. I choose the contents of my ‘news feed’, and
each article can be much longer than a Tweet, or a caption to a photo, or a
status update. It’s hard to write well and to create an interesting or useful blog
post, and that makes it harder to dilute quality with entertaining
distractions. I have complete control about what content I see, and I can
change it whenever I want. The process is designed around me.&lt;/p&gt;
&lt;h2 id="reeder5"&gt;Reeder5&lt;/h2&gt;
&lt;p&gt;I used &lt;code&gt;netNewsWire&lt;/code&gt; for a few weeks, but it couldn’t sync between my laptop
and phone, so I bought &lt;code&gt;Reeder 5&lt;/code&gt;. It’s got a few unusual design patterns, but
 it works well and has all the features I want. I’ve been unsubscribing from
 email newsletters and subscribing to the &lt;span class="caps"&gt;RSS&lt;/span&gt; feed instead.&lt;/p&gt;
&lt;p&gt;It keeps my inbox quieter, and it feels good to have a ‘separation of
 concerns’. It makes it easier to read interesting content without being distracted.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-using-rss-1"&gt;&lt;a href="https://marco.org/2013/03/26/power-of-rss"&gt;https://marco.org/2013/03/26/power-of-rss&lt;/a&gt; &lt;a class="simple-footnote-back" href="#sf-using-rss-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Non-technical/Learning"/></entry><entry><title>Notes on learning Django</title><link href="https://johnmathews.eu/learning-to-django.html" rel="alternate"/><published>2021-01-14T14:17:00+01:00</published><updated>2021-01-14T14:17:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-14:/learning-to-django.html</id><summary type="html"/><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#in-the-beginning"&gt;In the beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-personal-finances-dashboard"&gt;A personal finances dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#learning-django"&gt;Learning Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-best-moments"&gt;The best moments&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#adding-a-unique-identifier-to-an-existing-authentication-model"&gt;Adding a unique identifier to an existing authentication model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing-code"&gt;Testing code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="in-the-beginning"&gt;In the beginning&lt;/h2&gt;
&lt;p&gt;I came to web development via business analytics. I was working as an
accountant and Excel wasn’t good enough anymore, so I looked around for a way
to get started and came across &lt;a href="https://johnmathews.eu/Jupyter-ipython-notebooks-pandas.html"&gt;Jupyter
Notebooks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Notebooks are said to be a kind of “gateway drug” to programming, and I think
that’s true. They’re the easiest and fastest way to start programming that I’ve
come across.&lt;/p&gt;
&lt;p&gt;When you’re working in a notebook, its easy to get data, wrangle it, and show
some results. But as soon as you can create a chart or some summary table you
inevitably wonder how you can show this to people more easily, and publishing
the results to a website feels like the best most general and versatile solution.&lt;/p&gt;
&lt;p&gt;Unfortunately it’s also the hardest, and so begins a long series of compromises
and incremental progress. Learn to use a dashboarding &lt;span class="caps"&gt;API&lt;/span&gt;, and learn to create
static sites. But the end-goal, the ultimate solution, is a data driven web
app, with authentication, saved user preferences, scalable performance, and
automatically updated data sources.&lt;/p&gt;
&lt;h2 id="a-personal-finances-dashboard"&gt;A personal finances dashboard&lt;/h2&gt;
&lt;p&gt;When I moved to the Netherlands, I wanted to use a personal finances dashboard
to check weekly expenses. There wasn’t a web-app that would do this (though
there are a couple of apps that are trying) so I built my own dashboard. Then a
few friends asked if they could use it too. They couldn’t because it was just a
dashboard and not a web app, but I thought this was a good reason to jump into
web development.&lt;/p&gt;
&lt;p&gt;It was a much bigger task than I anticipated. (And that’s &lt;span class="caps"&gt;OK&lt;/span&gt;.)&lt;/p&gt;
&lt;p&gt;It took several attempts and was super frustrating, I would dabble for a few
weeks, do a few tutorials, and then get completely lost when I tried to do
something by myself. I’d get disorientated working across many different files
and trying to visualise which part of the Model-View-Controller model, or the
request-response cycle I was currently working on.&lt;/p&gt;
&lt;p&gt;I came to realisea that the mental load seems so large at the beginning because
“web-development” is really a whole stack of technologies and abstractions
combined (or stacked) together. Many of these have to be used together at the
same time before you can see &lt;em&gt;any evidence of success at all&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id="learning-django"&gt;Learning Django&lt;/h2&gt;
&lt;p&gt;I think the hardest things about Django are not actually Django. You’ll need to
comfortable with classes and inheritance. You’ll also need to be comfortable
with working across multiple files, and have some tools for searching across
all you open buffers, or all the files in the project, at the same time. You’ll
also need to be comfortable with version control (Git) and using the command
line. Get familiar with stack traces too.&lt;/p&gt;
&lt;p&gt;If you’re familiar enough with all these things, so that using them doesn’t
feel new, but ideally feels familiar and comfortable, then I think you’ll make
quite quick progress with Django.&lt;/p&gt;
&lt;p&gt;Django uses the Model-View-Controller model. Models are how django maps Python
objects to items in your database (oh yeah, you need to be familiar with &lt;span class="caps"&gt;SQL&lt;/span&gt;
too…), Views are where requests are processed (also Middleware) and turned
into Responses, which are then combined with templates (unless your building an
&lt;span class="caps"&gt;API&lt;/span&gt;). You might notice I haven’t mentioned what a Controller is - get used to
information feeling incomplete whilst you’re learning the ropes. It’ll become
clear soon enough.&lt;/p&gt;
&lt;h2 id="the-best-moments"&gt;The best moments&lt;/h2&gt;
&lt;p&gt;The ‘curse of knowledge’ states that once you’ve learnt something you can’t
imagine or remember what it’s like to not know it. Before that happens
completely, I want to record some of the ‘ahah!’ moments of ‘learning Django’.&lt;/p&gt;
&lt;p&gt;For context, I stopped working as a freelance data scientist in April and after
a few weeks wondering if django and PostgreSQL and python was the way to go
(yes it is. use boring technology), I began working full-time on what would
become &lt;a href="https://moneybar.nl"&gt;MoneyBar.nl&lt;/a&gt;. I called it ‘myeuros’ in the beginning.&lt;/p&gt;
&lt;p&gt;The learning curve felt steep. I wanted to do things “right” the first
time because I wasn’t building a toy, and although I felt that hindsight would
show this to be a mistake in terms of efficiency, I did it anyway because I
have a hunch that following my compulsions sometimes makes life harder in the
short term and better in the long term.&lt;/p&gt;
&lt;p&gt;The best moments are usually preceded by the most frustrating.&lt;/p&gt;
&lt;h3 id="adding-a-unique-identifier-to-an-existing-authentication-model"&gt;Adding a unique identifier to an existing authentication model&lt;/h3&gt;
&lt;p&gt;I used pydanny’s &lt;code&gt;cookiecutter-django&lt;/code&gt; template. Honestly, by the time I’d gone
through the quickstart process and googled the nouns in all the questions (what
is &lt;code&gt;Sentry&lt;/code&gt;, what is &lt;code&gt;Celery&lt;/code&gt; and what is a &lt;code&gt;task que&lt;/code&gt;, what is &lt;code&gt;whitenoise&lt;/code&gt;,
etc.) I was already tired. Play with it a few times and come back to it.&lt;/p&gt;
&lt;p&gt;Anyway, I wanted to start with authentication, because the project template has
that part kind of up and rnuning for you out of the box. &lt;code&gt;cookiecutter-django&lt;/code&gt;
uses the &lt;code&gt;Django Allauth&lt;/code&gt; package, which is awesome, and reliable, and fully
featured… and extremely abstracted. Good luck looking at the module code and
understanding it if youre not an expert.&lt;/p&gt;
&lt;p&gt;I wanted to give each user a unique &lt;span class="caps"&gt;ID&lt;/span&gt; - a &lt;code&gt;UUID&lt;/code&gt; when they signed up. This
would be used in query strings instead of usernames or incremental keys. This
was so hard the first time! And it turns out its not a trivial task, not if you
already have a few users in your (test) database. Sure you can reset the
database and start again, but experimenting like this is fairly complex.
Understanding how the python model classes (the &lt;span class="caps"&gt;ORM&lt;/span&gt;) maps to the relations in
the PostgreSQL databse was complex, and if I got confused, should I try to fix
it by changing python Models, or editing migrations, or working on the database
directly? Getting started is one of the hardest things.&lt;/p&gt;
&lt;p&gt;After I’d figured out authentication, I started creating models for other
simpler data (transactions and bank accounts I expect). This was much simpler
and faster. I remember driving home one evening thinking that if I could get
this far then success was inevitable.&lt;/p&gt;
&lt;h3 id="testing-code"&gt;Testing code&lt;/h3&gt;
&lt;p&gt;Before long, testing each part of the app by hand when I added or changed a
feature was no longer trivial. I needed to find some way of automatically
creating users and checking that they could log in and access views.&lt;/p&gt;
&lt;p&gt;I began working with &lt;code&gt;pytest&lt;/code&gt;, and really found it hard to wrap my head around
the idea accessing different parts of the app not by requests and responses but
by accessing class methods directly.&lt;/p&gt;
&lt;p&gt;I think its normal and good to code at the limit of your knowledge, where you
know just enough to make a thing “work”. But this approach falters when you
want to then test what you wrote. Or at least, the measure of “just enough”
really changes when you require tests to be written. You don’t just need to
make it work, you need to understand why it works, so that you can write tests
to assert that certain conditions pass and others fail.&lt;/p&gt;
&lt;p&gt;This feels really satisfying when it works, because you have proof that you
really have grasped a bigger picture. There are far fewer (relevant) black
boxes when you write tests. But it also makes learning slower, at least in the
short term. It means you might have two get comfortable with a handful of
abstractions, when you’ve already solved the problem you started with. This is
frustrating, and it takes discipline to slow down, take a deeper look at the
solution, and not just race on to the next feature.&lt;/p&gt;</content><category term="Technical/Web"/></entry><entry><title>Data Science vs Web Development: Larger Code Bases</title><link href="https://johnmathews.eu/larger-code-bases.html" rel="alternate"/><published>2021-01-14T13:40:00+01:00</published><updated>2021-01-14T13:40:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-14:/larger-code-bases.html</id><summary type="html"/><content type="html">&lt;h2 id="code-structure"&gt;Code Structure&lt;/h2&gt;
&lt;p&gt;One of the most immediate and basic differences between working as a data
scientist or as a web developer is the number of files the codebase
is spread across and the amount of code within each file.&lt;/p&gt;
&lt;p&gt;Web applications tend to be very modular - there are a lot of different things
going on in a modern web app and generally they all need to be able to be
modified or updated independently of each other. This requirement encourages
modular code base architecture with the code broken down into testable units.&lt;/p&gt;
&lt;p&gt;When working on a data science project you often have a well defined and quite narrow pipe line. Each stage of a pipeline has well defined inputs and outputs.&lt;/p&gt;
&lt;p&gt;This seems to have the consequence of making data science projects tend towards a handful of files each with a substantial amount of unique (not boilerplate) code. In web development there seems to be more boilerplate, many more
files spread across a tree of directories, and the average number of lines of code per file is significantly lower.&lt;/p&gt;
&lt;h2 id="ide-features"&gt;&lt;span class="caps"&gt;IDE&lt;/span&gt; features&lt;/h2&gt;
&lt;p&gt;These differences mean that code organization tools and &lt;span class="caps"&gt;IDE&lt;/span&gt; features play very
different roles within each industry. In web development you really need to be able to jump between different files (or buffers) quickly, and search for text across multiple files. Writing idiomatically becomes more important, and writing code within discreet testable units becomes essential so that things don’t break without being noticed.&lt;/p&gt;
&lt;p&gt;In data science, linting feels more optional, and searching for text within  methods or functions outside the current module is rarer.&lt;/p&gt;
&lt;p&gt;I didn’t appreciate this until I paused my work as a Data Scientist and began building non-trivial web apps. &lt;/p&gt;</content><category term="Technical/Developer Tools"/></entry></feed>