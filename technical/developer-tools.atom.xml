<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>JohnMathews.eu - Technical/Developer Tools</title><link href="https://johnmathews.eu/" rel="alternate"></link><link href="https://johnmathews.eu/technical/developer-tools.atom.xml" rel="self"></link><id>https://johnmathews.eu/</id><updated>2021-01-04T16:59:00+01:00</updated><entry><title>How To Design An API</title><link href="https://johnmathews.eu/api-design.html" rel="alternate"></link><published>2021-01-04T16:59:00+01:00</published><updated>2021-01-04T16:59:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-04:/api-design.html</id><summary type="html"></summary><content type="html">&lt;h2&gt;Background&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;#8217;s more of an art than a&amp;nbsp;science:&lt;/li&gt;
&lt;li&gt;REpresentational State Transfer is an architectural style.&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;SOAP&lt;/span&gt; (Simple Object Access Protocol) is a heavier&amp;nbsp;style.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GraphQL&lt;/code&gt; - doesnt overfetch. Graph query language made by&amp;nbsp;Facebook.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Django&lt;/code&gt; model managers are an&amp;nbsp;api&lt;/li&gt;
&lt;li&gt;Exposes a databases to&amp;nbsp;clients&lt;/li&gt;
&lt;li&gt;A &lt;span class="caps"&gt;URL&lt;/span&gt; route (endpoint) that returns &lt;span class="caps"&gt;JSON&lt;/span&gt; or &lt;span class="caps"&gt;XML&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;POST&lt;/span&gt;, &lt;span class="caps"&gt;GET&lt;/span&gt;, &lt;span class="caps"&gt;PUT&lt;/span&gt;, &lt;span class="caps"&gt;PATCH&lt;/span&gt;, &lt;span class="caps"&gt;DELETE&lt;/span&gt; - &lt;span class="caps"&gt;HTTP&lt;/span&gt; methods. Correspond to &lt;span class="caps"&gt;CRUD&lt;/span&gt;, Create, Read, Update/Replace, Update/Modify,&amp;nbsp;Delete&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;METHODS&lt;/span&gt;:&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;PUT&lt;/span&gt; (create or update) is idempotent, &lt;span class="caps"&gt;POST&lt;/span&gt; is not idempotent (keep on creating,&amp;nbsp;updating)&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;PATCH&lt;/span&gt; - partial&amp;nbsp;update&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;GET&lt;/span&gt;, &lt;span class="caps"&gt;HEAD&lt;/span&gt;, &lt;span class="caps"&gt;OPTIONS&lt;/span&gt; and &lt;span class="caps"&gt;TRACE&lt;/span&gt; methods are idempotent cos they are only designed for retrieving&amp;nbsp;data.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;DELETE&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;HEAD&lt;/span&gt; - almost identical to &lt;span class="caps"&gt;GET&lt;/span&gt;, but without any body. Good for checking what a request would return, i.e. Before downloading a large amount of&amp;nbsp;data, &lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;OPTIONS&lt;/span&gt; - returns data describing what other methods and operations the server supports at the given &lt;span class="caps"&gt;URL&lt;/span&gt;. More loosely defined than other&amp;nbsp;verbs. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Advice&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;span class="caps"&gt;HTTP&lt;/span&gt; verbs to make requests more&amp;nbsp;meaningful&lt;/li&gt;
&lt;li&gt;Use sensible resource names&lt;ul&gt;
&lt;li&gt;Use identifiers in your URLs, not the query string.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Good&lt;/code&gt;:&amp;nbsp;/users/12345&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Poor&lt;/code&gt;:&amp;nbsp;/api?type=user&amp;amp;id=23&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use the hierarchical structure of the &lt;span class="caps"&gt;URL&lt;/span&gt; to imply the structure of the &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Design (names and structure of things) for the user/client, not for the database.&lt;ul&gt;
&lt;li&gt;Resource names should be nouns not&amp;nbsp;verbs&lt;/li&gt;
&lt;li&gt;Use plurals consistently, not collection verbiage. Good: customers/123 Bad:&amp;nbsp;customer_list/123&lt;/li&gt;
&lt;li&gt;Use&amp;nbsp;case-insensitivity.&lt;/li&gt;
&lt;li&gt;Use camel case or snake case&amp;nbsp;consistency&lt;/li&gt;
&lt;li&gt;Short is better than long, but be&amp;nbsp;clear&lt;/li&gt;
&lt;li&gt;Spend time on design before writing&amp;nbsp;code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use &lt;span class="caps"&gt;HTTP&lt;/span&gt; response codes to indicate&amp;nbsp;status&lt;/li&gt;
&lt;li&gt;Prefer &lt;span class="caps"&gt;JSON&lt;/span&gt; over &lt;span class="caps"&gt;XML&lt;/span&gt;. (Hotline does &lt;span class="caps"&gt;HTML&lt;/span&gt;..)&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;XML&lt;/span&gt; requires schemas for validation and namespaces. Don’t support this complexity at the beginning (or ever) unless required. If it is required, make the &lt;span class="caps"&gt;XML&lt;/span&gt; as similar to &lt;span class="caps"&gt;JSON&lt;/span&gt; as&amp;nbsp;possible.&lt;/li&gt;
&lt;li&gt;Put links in the &lt;span class="caps"&gt;HTTP&lt;/span&gt; link header, or use a &lt;span class="caps"&gt;JSON&lt;/span&gt; representation of&amp;nbsp;this.&lt;/li&gt;
&lt;li&gt;Use the &lt;span class="caps"&gt;HTTP&lt;/span&gt; location header to contain a link on resource creation, or for &lt;span class="caps"&gt;GET&lt;/span&gt; with pagination, use first, last, next,&amp;nbsp;prev.&lt;/li&gt;
&lt;li&gt;Connectedness - return links in the response which link to useful resources. At minimum, a link to show how the data was received, or&amp;nbsp;posted.&lt;/li&gt;
&lt;li&gt;Idempotence - clients making the same repeated requests create the same result on the server side. I.e. making repeated requests has the same result as making a similar request, server side. On the client side, a response code may change, of&amp;nbsp;course. &lt;/li&gt;
&lt;/ul&gt;</content><category term="Technical/Developer Tools"></category></entry><entry><title>Principles Of Object Orientated Programming</title><link href="https://johnmathews.eu/principles-of-oop.html" rel="alternate"></link><published>2021-01-04T16:27:00+01:00</published><updated>2021-01-04T16:27:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-04:/principles-of-oop.html</id><summary type="html"></summary><content type="html">&lt;p&gt;I recently interviewed for a lead developer role at &lt;a href="https://labdigital.nl/en/"&gt;Lab Digital&lt;/a&gt;&lt;sup id="sf-principles-of-oop-1-back"&gt;&lt;a href="#sf-principles-of-oop-1" class="simple-footnote" title="Unfortunately, I didn’t get the job. They wanted a senior Python developer with experience with Infrastructure As Code, and also working at an agency. Can’t win them all."&gt;1&lt;/a&gt;&lt;/sup&gt; and thought it would be sensible to review some of the fundamental aspects of Object Orientated Programming (&lt;span class="caps"&gt;OOP&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;Object Orientated Programming has four key aspects:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Encapsulation (Hiding information)&lt;/li&gt;
&lt;li&gt;Abstraction (Hiding the implementation)&lt;/li&gt;
&lt;li&gt;Inheritance&lt;/li&gt;
&lt;li&gt;Polymorphism&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These are my notes:&lt;/p&gt;
&lt;h2&gt;1. Encapsulation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Each object keeps its state private, inside a class.&lt;/li&gt;
&lt;li&gt;Instance variables/properties/attributes are kept private and accessor methods are made public.&lt;/li&gt;
&lt;li&gt;Other objects don’t have direct access to this state. They can only call a list of public functions (methods).&lt;/li&gt;
&lt;li&gt;The object manages its own state via methods, no other class can touch it unless explicitly (not default) allowed.&lt;/li&gt;
&lt;li&gt;Private variables.&lt;/li&gt;
&lt;li&gt;Public methods.&lt;/li&gt;
&lt;li&gt;You can define classes within classes, and functions within functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2. Abstraction&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A natural extension of encapsulation&lt;/li&gt;
&lt;li&gt;A concept or idea that is not associated with any particular instance.&lt;/li&gt;
&lt;li&gt;Expresses the intent of the class, rather than a specific implementation.&lt;/li&gt;
&lt;li&gt;Programs are often extremely large and separate objects communicate with each other a lot. This makes maintaining large programs difficult, and abstraction tries to solve this.&lt;/li&gt;
&lt;li&gt;Applying abstraction means that each object should only expose a high-level mechanism for using it.&lt;ul&gt;
&lt;li&gt;This mechanism should hide internal implementation details. It should only reveal operations relevant for the other objects.&lt;/li&gt;
&lt;li&gt;This mechanism should be easy to use and should rarely change over time. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implementation changes — for example, a software update — rarely affect the abstraction you use.&lt;/li&gt;
&lt;li&gt;e.g. a coffee machine. It does a lot of stuff and makes quirky noises under the hood. But all you have to do is put in coffee and press a button.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3. Inheritance&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;span class="caps"&gt;OOP&lt;/span&gt;, objects are often similar, sharing similar logic. But they are not 100% the same.&lt;/li&gt;
&lt;li&gt;Create a (child) class by deriving from another (parent) class. This way, we form a hierarchy.&lt;/li&gt;
&lt;li&gt;child class reuses all fields and methods of the parent class (common part) and can implement its own unique part using method or attribute overloading.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;4. Polymorphism&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Gives a way to use a class exactly like its parent so there’s no confusion with mixing types. But each child class keeps its own methods as they are.&lt;/li&gt;
&lt;li&gt;This typically happens by defining a (parent) interface to be reused. It outlines a bunch of common methods. Then, each child class implements its own version of these methods.&lt;/li&gt;
&lt;li&gt;Any time a collection (such as a list) or a method expects an instance of the parent (where common methods are outlined), the language takes care of evaluating the right implementation of the common method — regardless of which child is passed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’d like to be so familiar with the following features that I can use them without referring to notes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Getters and setters.&lt;/li&gt;
&lt;li&gt;Instance methods compared to class methods.&lt;/li&gt;
&lt;li&gt;Inheritance, mixins, and decorators.&lt;/li&gt;
&lt;li&gt;The “magic” within the &lt;code&gt;Django&lt;/code&gt; source code that requires &lt;code&gt;mypy&lt;/code&gt; to use extensions in order to do its static type checking correctly.&lt;/li&gt;
&lt;/ol&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-principles-of-oop-1"&gt;Unfortunately, I didn’t get the job. They wanted a senior Python developer with experience with &lt;code&gt;Infrastructure As Code&lt;/code&gt;,
and also working at an agency. Can’t win them all. &lt;a href="#sf-principles-of-oop-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Developer Tools"></category></entry><entry><title>Using Unix Utilities To Analyse And Update Multiple Text Files</title><link href="https://johnmathews.eu/using-unix-utilities-to-analyse-and-update-multiple-files.html" rel="alternate"></link><published>2021-01-04T13:02:00+01:00</published><updated>2021-01-04T13:02:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-04:/using-unix-utilities-to-analyse-and-update-multiple-files.html</id><summary type="html"></summary><content type="html">&lt;p&gt;As part of the redesign of this blog I wanted to make an article&amp;#8217;s category more useful.
Previously, I simply picked a handful of categories and then
assigned a single category to each&amp;nbsp;post.&lt;/p&gt;
&lt;p&gt;This method becomes too simple when an article is relevant to multiple
categories. Also, using nested categories seems like a good way of grouping
similar categories, and allowing more nuanced filtering of&amp;nbsp;interests.&lt;/p&gt;
&lt;p&gt;I realised this would be a good opportunity to use a few Unix utilities and
practice finding patterns in text files, summarizing them and then updating the
original files. Here is how I reviewed and updated the categories of my existing&amp;nbsp;articles.&lt;/p&gt;
&lt;p&gt;I use Pelican to generate the static files for this site. It converts markdown
into &lt;span class="caps"&gt;HTML&lt;/span&gt;. Metadata for each article is set at the beginning of an
file, the title is set by typing &lt;code&gt;Title: ...&lt;/code&gt; and similarly
the category is set by typing &lt;code&gt;Category: ...&lt;/code&gt; on its own&amp;nbsp;line.&lt;/p&gt;
&lt;p&gt;To locate, analyse and update my existing categories I would therefore need to
find all the markdown files which have a row that begins with &lt;code&gt;Category:&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grep -h ‘Category:’ **/*.md&lt;/code&gt; - prints each search&amp;nbsp;result. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;grep -h ‘Category:’ **/*.md | sort&lt;/code&gt; - prints and sorts each search&amp;nbsp;result.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grep -h ‘Category:’ **/*.md | sort | uniq -c&lt;/code&gt; prints and sorts each search
result, then counts how many occurrences of each unique result there&amp;nbsp;are.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I had some repeat results though because some rows had white space at the end,
so in order to make these the same, I needed to remove trailing&amp;nbsp;whitespace:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grep -h 'Category:' **/*.md | sed 's/[[:space:]]//g' | sort | uniq -c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This gave me the following&amp;nbsp;results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;6 Category:&lt;/span&gt;
&lt;span class="err"&gt;2 Category:Data&lt;/span&gt;
&lt;span class="err"&gt;16 Category:Disintermediation&lt;/span&gt;
&lt;span class="err"&gt;2 Category:Engineering&lt;/span&gt;
&lt;span class="err"&gt;2 Category:Front-end&lt;/span&gt;
&lt;span class="err"&gt;15 Category:General&lt;/span&gt;
&lt;span class="err"&gt;15 Category:Startups&lt;/span&gt;
&lt;span class="err"&gt;8 Category:Tools&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This has removed too much white space. Next&amp;nbsp;attempt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grep -h 'Category:' **/*.md | sed 's/[[:space:]]//g' | sort | uniq -c | sort&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;still, category is repeated and isn&amp;#8217;t&amp;nbsp;needed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grep -h 'Category:' **/*.md | sed 's/[[:space:]]//g' | sort | uniq -c | sort |
sed 's/Category://g'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This gives me the following output, which is&amp;nbsp;acceptable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;2 Data&lt;/span&gt;
&lt;span class="err"&gt;2 Engineering&lt;/span&gt;
&lt;span class="err"&gt;2 Front-end&lt;/span&gt;
&lt;span class="err"&gt;6&lt;/span&gt;
&lt;span class="err"&gt;8 Tools&lt;/span&gt;
&lt;span class="err"&gt;15 General&lt;/span&gt;
&lt;span class="err"&gt;15 Startups&lt;/span&gt;
&lt;span class="err"&gt;16 Disintermediation&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;New&amp;nbsp;Categories&lt;/h3&gt;
&lt;p&gt;The next stage was to begin updating these categories with the new, nested
categories. I&amp;#8217;ve decided to try splitting the categories into technical and
non-technical&amp;nbsp;groups.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Technical&lt;ul&gt;
&lt;li&gt;Data&lt;/li&gt;
&lt;li&gt;Developer&amp;nbsp;Tools&lt;/li&gt;
&lt;li&gt;Web&lt;/li&gt;
&lt;li&gt;Cryptocurrency&lt;/li&gt;
&lt;li&gt;Civil&amp;nbsp;Engineering&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Not technical&lt;ul&gt;
&lt;li&gt;Entrepreneurship&lt;/li&gt;
&lt;li&gt;Family&lt;/li&gt;
&lt;li&gt;Self&lt;/li&gt;
&lt;li&gt;Career&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I &lt;code&gt;cd&lt;/code&gt; into the directory containing the markdown files, and then to change
all the articles with &lt;code&gt;Category: Tools&lt;/code&gt; to &lt;code&gt;Category: Technical/Developer
Tools&lt;/code&gt; I&amp;nbsp;did:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grep -l 'Category: Tools' *.md | xargs sed -i 's/Category: Tools/Category:
    Technical\/Developer Tools/g&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If I want to see a list of files containing &lt;code&gt;Category: General&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grep -H 'Category: General' *.md&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If I want to see just the file names,&amp;nbsp;then:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grep -l 'Category: General' *.md&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Technical/Developer Tools"></category></entry><entry><title>A faster shell</title><link href="https://johnmathews.eu/shell.html" rel="alternate"></link><published>2019-02-14T11:32:00+01:00</published><updated>2019-02-14T11:32:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2019-02-14:/shell.html</id><summary type="html">&lt;p&gt;zsh was loading significantly slower than bash, so I used profiling to see what was slowing things&amp;nbsp;down&lt;/p&gt;</summary><content type="html">&lt;p&gt;Opening up a new shell was annoyingly slow. Not terrible, but enough to notice. Its a&amp;nbsp;niggle.&lt;/p&gt;
&lt;p&gt;I wanted to find out which components were causing the most delay, so I used
&lt;code&gt;time&lt;/code&gt; to measure how long it took to launch a shell. Even though shells
might appear to be part of the low level &amp;#8216;guts&amp;#8217; of a computer, each shell is
just an executable and can be treated as&amp;nbsp;such.&lt;/p&gt;
&lt;p&gt;To measure the startup speed of your shell,&amp;nbsp;do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="k"&gt;$(&lt;/span&gt;seq &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; /usr/bin/time &lt;span class="nv"&gt;$SHELL&lt;/span&gt; -i -c exit&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="zsh profile" src="https://johnmathews.eu/images/zsh_startup_speed.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This shows that it takes 0.84 seconds to start &lt;code&gt;zsh&lt;/code&gt; - not terrible, but not&amp;nbsp;great:&lt;/p&gt;
&lt;p&gt;You can compare the performance of different shells by replacing &lt;code&gt;$SHELL&lt;/code&gt; with
&lt;code&gt;zsh&lt;/code&gt;, &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;fish&lt;/code&gt; etc.&lt;/p&gt;
&lt;p&gt;Here are the results if I used &lt;code&gt;BASH&lt;/code&gt; instead of &lt;code&gt;zsh&lt;/code&gt; - 9.3x faster! (but
without useful tools and plugins):
&lt;img alt="bash profile" src="https://johnmathews.eu/images/bash_startup_speed.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Now that I can measure how long it takes to start, it would be useful to know
which proccesses are causing the greatest delays. This could be done with
something like &lt;code&gt;zsh -xv&lt;/code&gt; which enables verbose output and xtrace. This creates
a tonne of output, but doesnt inlcude timestamps. All I really want is
a summary of how much time each subproccess required to run, i.e. an order blind&amp;nbsp;profiler.&lt;/p&gt;
&lt;p&gt;Add &lt;code&gt;zmodload zsh/zprof&lt;/code&gt; at the start of &lt;code&gt;.zshrc&lt;/code&gt; and &lt;code&gt;zprof&lt;/code&gt; at the very end.
Now when I start &lt;code&gt;zsh&lt;/code&gt; I see the&amp;nbsp;following:&lt;/p&gt;
&lt;p&gt;&lt;img alt="zsh startup components" src="https://johnmathews.eu/images/zsh_order_blind_profiling.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Next steps - make virtualenvwrapper run faster, or asyncronously, or
not at&amp;nbsp;all&amp;#8230;&lt;/p&gt;
&lt;p&gt;Update:
&lt;code&gt;virtualenvwrapper&lt;/code&gt; is the biggest cause of slow loading. Using the &lt;a href="https://virtualenvwrapper.readthedocs.io/en/latest/install.html"&gt;lazy
loadin&lt;/a&gt; option decreased loading time by&amp;nbsp;0.3s&lt;/p&gt;
&lt;p&gt;&lt;img alt="zsh profile" src="https://johnmathews.eu/images/zsh_startup_speed_lazy_load.jpg"&gt;&lt;/p&gt;</content><category term="Technical/Developer Tools"></category><category term="shell"></category><category term="unix"></category><category term="zsh"></category><category term="bash"></category><category term="profiling"></category></entry><entry><title>Ry’s Git Tutorial</title><link href="https://johnmathews.eu/rys-git-tutorial.html" rel="alternate"></link><published>2018-06-01T17:11:00+02:00</published><updated>2018-06-01T17:11:00+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2018-06-01:/rys-git-tutorial.html</id><summary type="html">&lt;p&gt;Ry&amp;#8217;s Git Tutorial is a great way to learn Git. Learn by doing as you create and maintain a simple&amp;nbsp;website.&lt;/p&gt;</summary><content type="html">&lt;p&gt;For tracking changes to a collection of files, Git is the ubiquitous solution. It&amp;#8217;s free, robust, comprehensive, and there is a plethora of resources that are easy to&amp;nbsp;find.&lt;/p&gt;
&lt;p&gt;I usually find the commands difficult to remember though, and the concepts which Git is built on often seem counter-intuitive to me. This means I spend a lot of time searching for answers and trying to remember how I can use Git to experiment with a project without fear of losing any hard won&amp;nbsp;progress.&lt;/p&gt;
&lt;p&gt;Ry&amp;#8217;s Git Tutorial by Ryan Hodson is the best way to learn Git that I have come across. Its simple, practical, and clear. The reader learns how to use Git yy creating and maintaining a simple website. This gives the Git commands a meaningful context, which makes them a lot easier to remember and use in the&amp;nbsp;future.&lt;/p&gt;
&lt;p&gt;The tutorial was first published in 2012 and the website which originally hosted the examples no longer exists. Each tutorial chapter starts with a link to download the project files up to that point, so the reader doesn&amp;#8217;t need to start at the beginning but can jump into any part of the guide. Unfortunately these links are dead&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;Therefore I&amp;#8217;m hosting the tutorial here so that it continues to be useful. If the author would like to get in touch, please do. I&amp;#8217;d like to keep this great resource available so that others can benefit from&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Download the .epub file &lt;a href="https://johnmathews.eu/Ry’s Git Tutorial.epub"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Download the example files for each module&amp;nbsp;below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter2.zip"&gt;Chapter 2: Undoing&amp;nbsp;Changes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter3.zip"&gt;Chapter 3: Branches&amp;nbsp;I&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter4.zip"&gt;Chapter 4: Branches &lt;span class="caps"&gt;II&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter5.zip"&gt;Chapter 5:&amp;nbsp;Rebasing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter6.zip"&gt;Chapter 6: Rewriting&amp;nbsp;History&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter7.zip"&gt;Chapter 7:&amp;nbsp;Remotes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter8.zip"&gt;Chapter 8: Centralized&amp;nbsp;Workflows&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter9.zip"&gt;Chapter 9: Distributed&amp;nbsp;Workflows&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter10.zip"&gt;Chapter 10: Patch&amp;nbsp;Workflows&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter11.zip"&gt;Chapter 11: Tips &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;Tricks&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter12.zip"&gt;Chapter 12:&amp;nbsp;Plumbing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter13.zip"&gt;end&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Technical/Developer Tools"></category><category term="Git"></category><category term="Rys"></category><category term="Tutorial"></category><category term="Ryan Hodson"></category></entry><entry><title>Vim!</title><link href="https://johnmathews.eu/vim.html" rel="alternate"></link><published>2016-12-01T22:32:00+01:00</published><updated>2016-12-01T22:32:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2016-12-01:/vim.html</id><summary type="html"></summary><content type="html">&lt;p&gt;Vim is a text editor renowned for its efficiency and its use of keyboard shortcuts. It&amp;#8217;s based on the Vi text editor from the 1970&amp;#8217;s. It was first released in 1991 and is still being developed today. It comes pre-installed on Unix systems (including MacOS) and can be run from the&amp;nbsp;terminal.&lt;/p&gt;
&lt;p&gt;Vim is famous in another way too - for being difficult to learn. I found some good and remarkably creative tools to begin learning its concepts and controls. This was necessary because there is no &lt;span class="caps"&gt;GUI&lt;/span&gt;. There is a &lt;em&gt;game&lt;/em&gt; &lt;a href="http://vim-adventures.com/"&gt;here&lt;/a&gt;, and there is &lt;a href="http://www.openvim.com/"&gt;this interactive tutorial&lt;/a&gt;. There&amp;#8217;s also a built-in vim tutorial - just type &amp;#8216;vimtutor&amp;#8217; into&amp;nbsp;Terminal.&lt;/p&gt;
&lt;p&gt;Vim is designed so that you don&amp;#8217;t need to take your hands off your keyboard and use a mouse. It has the &amp;#8216;insert&amp;#8217; mode where you enter text as usual, and the &amp;#8216;command&amp;#8217; mode where you can make use of a comprehensive and flexible shortcut language to move around, edit and search the text. With no &lt;span class="caps"&gt;GUI&lt;/span&gt; or toolbar, it&amp;#8217;s a very different approach to text editing than I&amp;#8217;m used&amp;nbsp;to.&lt;/p&gt;
&lt;p&gt;You can run Vim from the terminal, but there are also versions that run as apps. MacVim on MacOS has the option to show a tool bar of simple commands like a normal program, and lets the arrow keys move the cursor in addition to &lt;span class="caps"&gt;VIM&lt;/span&gt;&amp;#8217;s &amp;#8216;hjkl&amp;#8217; functionality. This makes getting started a little&amp;nbsp;simpler.&lt;/p&gt;
&lt;p&gt;There are also a lot of plugins to extend Vim&amp;#8217;s functionality and turn it from a text editor into an &lt;span class="caps"&gt;IDE&lt;/span&gt;. &lt;a href="https://realpython.com/blog/python/vim-and-python-a-match-made-in-heaven/"&gt;This post&lt;/a&gt; walks you through setting up Vim as a Python &lt;span class="caps"&gt;IDE&lt;/span&gt; and explains how to manage various&amp;nbsp;add-ons.&lt;/p&gt;
&lt;p&gt;I recommend Daniel Mieslers &lt;a href="https://danielmiessler.com/study/vim/"&gt;blog post&lt;/a&gt; for a quick overview of how to use&amp;nbsp;Vim.&lt;/p&gt;</content><category term="Technical/Developer Tools"></category><category term="Vim"></category></entry><entry><title>Autumn, BIN and $PATH</title><link href="https://johnmathews.eu/autumn-bin-and-path.html" rel="alternate"></link><published>2016-12-01T21:53:00+01:00</published><updated>2016-12-01T21:53:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2016-12-01:/autumn-bin-and-path.html</id><summary type="html"></summary><content type="html">&lt;p&gt;Two small things have been learnt recently: the importance of &lt;span class="caps"&gt;PATH&lt;/span&gt; and
the contents of various &lt;span class="caps"&gt;BIN&lt;/span&gt;&amp;nbsp;folders.&lt;/p&gt;
&lt;p&gt;Autumn 2016 has not gone as planned. Whilst studying for a couple of
exams plans were put on hold and hobbies were ceased. Now that life is
returning to normal, I have opportunity to post&amp;nbsp;again.&lt;/p&gt;
&lt;h2&gt;&lt;span class="caps"&gt;PATH&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;html&gt;&amp;#36;&lt;/html&gt;&lt;span class="caps"&gt;PATH&lt;/span&gt; is a variable (string) which contains a series of folder
locations separated by &amp;#8220;:&amp;#8221;. Each of these folders contains programmes.
When you type the name of a programme into terminal without specifying
its location, the &lt;span class="caps"&gt;OS&lt;/span&gt; looks sequentially in each of the folder locations
listed in &lt;html&gt;&amp;#36;&lt;/html&gt;&lt;span class="caps"&gt;PATH&lt;/span&gt; to see if the programme is there, and then executes&amp;nbsp;it.&lt;/p&gt;
&lt;h2&gt;&lt;span class="caps"&gt;BIN&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Bin as in Binary, not Bin as in&amp;nbsp;Trash.&lt;/p&gt;
&lt;p&gt;The bin folders contain binary files, which are programmes ready to be&amp;nbsp;run.&lt;/p&gt;
&lt;p&gt;If I run &amp;#8220;echo &lt;html&gt;&amp;#36;&lt;/html&gt;&lt;span class="caps"&gt;PATH&lt;/span&gt;&amp;#8221; from the Terminal, I see 9 folders called bin,
and its only by convention that they contain binaries. They are just
normal folders, which the &lt;span class="caps"&gt;OS&lt;/span&gt; is set to look in when asked to run an&amp;nbsp;application.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;/Users/John/anaconda3/bin:/Library/Frameworks/Python.framework/Versions/&lt;/span&gt;
&lt;span class="err"&gt;3.5/bin:/Users/John/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/&lt;/span&gt;
&lt;span class="err"&gt;Library/TeX/texbin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Technical/Developer Tools"></category><category term="Unix"></category></entry><entry><title>Jupyter (iPython) notebooks + Pandas</title><link href="https://johnmathews.eu/Jupyter-ipython-notebooks-pandas.html" rel="alternate"></link><published>2016-08-03T13:04:00+02:00</published><updated>2016-08-03T13:04:00+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2016-08-03:/Jupyter-ipython-notebooks-pandas.html</id><summary type="html"></summary><content type="html">&lt;p&gt;When working with more data than can fit in an Excel file, or when you
want to be sure the data won&amp;#8217;t be edited, you usually need to interact with
the data by writing&amp;nbsp;scripts.&lt;/p&gt;
&lt;p&gt;One of the biggest time sinks (for me) when working with these tools
(&lt;span class="caps"&gt;ACL&lt;/span&gt;, &lt;span class="caps"&gt;SQL&lt;/span&gt;, Python) is debugging, and working out exactly where in the
chain of individual commands something unexpected happened. Even with
only a modest page of code, I can quickly find myself rerunning the
entire script multiple times and commenting-out and uncommenting
multiple lines in order to understand what&amp;#8217;s really going on. If you
have a time consuming task at the start of your script, such as a
summarise and sort command, the extra time required can be even greater.
This leads to interrupted flow and&amp;nbsp;concentration.&lt;/p&gt;
&lt;p&gt;Pandas is a python package to manipulate large datasets, the Jupyter
notebook is an application which allows the user to run a python script
in chunks, and output the results of each chunk before continuing. You
can re-run a previous chunk without returning to the beginning, and
change the code as you go along. This is amazingly flexible and&amp;nbsp;intuitive.&lt;/p&gt;
&lt;p&gt;I recently worked through an exceptionally good Pandas tutorial recorded
at PyCon 2015. &amp;#8220;&lt;a href="https://youtu.be/5JnMutdy6Fw"&gt;Pandas from the ground
up&lt;/a&gt;&amp;#8221; is well structured, clear, has good
scope and the resources are available to download from
&lt;a href="https://github.com/brandon-rhodes/pycon-pandas-tutorial"&gt;github&lt;/a&gt;.
Brandon Rhodes gives you a good working foundation for using Pandas and
the Jupyter notebook to manipulate datasets using&amp;nbsp;Python.&lt;/p&gt;</content><category term="Technical/Developer Tools"></category><category term="Data"></category><category term="Jupyter Notebook"></category><category term="Pandas"></category><category term="Python"></category></entry></feed>