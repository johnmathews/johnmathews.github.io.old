<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>JohnMathews.eu - Technical/Developer Tools</title><link href="https://johnmathews.eu/" rel="alternate"></link><link href="https://johnmathews.eu/feed/technical/developer-tools.atom.xml" rel="self"></link><id>https://johnmathews.eu/</id><updated>2021-01-21T16:22:00+01:00</updated><entry><title>Vim Notes: Mastering Vim Quickly</title><link href="https://johnmathews.eu/vim-notes-mastering-vim-quickly.html" rel="alternate"></link><published>2021-01-21T16:22:00+01:00</published><updated>2021-01-21T16:22:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-21:/vim-notes-mastering-vim-quickly.html</id><summary type="html"></summary><content type="html">&lt;ol&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; - delete char under cursor and enter Insert&amp;nbsp;Mode.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt; - replace char under&amp;nbsp;cursor.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;g-&lt;/code&gt; and &lt;code&gt;g+&lt;/code&gt; - undo&amp;nbsp;branches.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;g#&lt;/code&gt; or &lt;code&gt;g*&lt;/code&gt; for partial matches, like &lt;code&gt;#&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt; for exact&amp;nbsp;matches.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;C-O&amp;gt;&lt;/code&gt; in Insert Mode will jump you into Command Mode for one command only
    and then put you back into Insert Mode&amp;nbsp;automatically.&lt;/li&gt;
&lt;li&gt;Search for the word under the cursor, or similar:&lt;ol&gt;
&lt;li&gt;Press &lt;code&gt;/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;C-r&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;C-W&amp;gt;&lt;/code&gt; - this will copy and paste the word under the cursor
     into the search box. Edit it as&amp;nbsp;necessary.&lt;/li&gt;
&lt;li&gt;After you&amp;#8217;ve done your search, &lt;code&gt;&amp;lt;C-o&amp;gt;&lt;/code&gt; to jump back to where your cursor
     was&amp;nbsp;before.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Find and replace whole words only: &lt;code&gt;:s/&amp;lt;old_word\&amp;gt;/new/g&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Find and replace either old-word1 or old_word2: &lt;code&gt;:s/(old_word1\|old_word2\)/new/g&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Technical/Developer Tools"></category></entry><entry><title>Python Notes</title><link href="https://johnmathews.eu/python-notes.html" rel="alternate"></link><published>2021-01-21T14:55:00+01:00</published><updated>2021-01-21T14:55:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-21:/python-notes.html</id><summary type="html"></summary><content type="html">&lt;p&gt;The parts of Aaron Maxwell’s &lt;a href="https://twitter.com/powerfulpython"&gt;Power Python&lt;/a&gt;
newsletter that I don’t want to forget:&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#emergent-abstractions"&gt;Emergent Abstractions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#practioner-engineer-scientist"&gt;Practioner, Engineer, Scientist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sentinel-values"&gt;Sentinel Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#levels-of-python-code"&gt;Levels of Python Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#read-peps"&gt;Read PEPs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="emergent-abstractions"&gt;Emergent Abstractions&lt;/h2&gt;
&lt;p&gt;Get used to expecting and letting abstractions emerge from projects. If you
find yourself repeatedly solving similar problems in similar ways, what can you
do that will simplify the code and the implementation&lt;sup id="sf-python-notes-1-back"&gt;&lt;a href="#sf-python-notes-1" class="simple-footnote" title=" Abstraction as a principal of OOP"&gt;1&lt;/a&gt;&lt;/sup&gt;?&lt;/p&gt;
&lt;p&gt;Is it a couple of convenience methods on some helper class?&lt;/p&gt;
&lt;p&gt;The below code snippet gives you three ways of instantiating the twitter &lt;span class="caps"&gt;API&lt;/span&gt; client:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A generic “normal” way&lt;/li&gt;
&lt;li&gt;A specialized way that looks for certain environment variables&lt;/li&gt;
&lt;li&gt;A specialized way that looks for a configuration file&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="c1"&gt;# so you can get the environment variables&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;twitter&lt;/span&gt; &lt;span class="c1"&gt;# https://pypi.org/project/python-twitter/&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApiClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumer_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumer_secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;access_token_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;access_token_secret&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;consumer_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;consumer_secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;access_token_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;access_token_secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;from_environ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'TWITTER_CONSUMER_KEY'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'TWITTER_CONSUMER_SECRET'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'TWITTER_ACCESS_TOKEN_KEY'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'TWITTER_ACCESS_TOKEN_SECRET'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;from_config_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;config_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# ...&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="practioner-engineer-scientist"&gt;Practioner, Engineer, Scientist&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Practioner&lt;/strong&gt; - You can use a thing (a framework, a tool)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Engineer&lt;/strong&gt; - You can use a thing and if you needed to, you could recreate it&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scientist&lt;/strong&gt; - You can create frameworks and paradigms that have never existed before&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Aim for the engineer level.&lt;/p&gt;
&lt;h2 id="sentinel-values"&gt;Sentinel Values&lt;/h2&gt;
&lt;p&gt;Instead of setting your sentinel value to something that is not quite
impossible, like &lt;code&gt;None&lt;/code&gt; or &lt;code&gt;"None"&lt;/code&gt; set it to &lt;code&gt;object()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is better because it creates a unique instance of the &lt;code&gt;object&lt;/code&gt; class and
there can be no ambiguity about where it came from.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A sentinel value is a value you can set a variable to.&lt;/li&gt;
&lt;li&gt;It’s special because it differs from all other legal or possible values that the variable could have.&lt;/li&gt;
&lt;li&gt;It’s used as a signal or as a canary that something has happened.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="levels-of-python-code"&gt;Levels of Python Code&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Syntax&lt;/em&gt; - understand what indentation is important, sometimes you need
    parenthesis, etc&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Idiom&lt;/em&gt; - the building blocks of a program. “Paragraphs” of code that
    follow common patterns, like for loops, or context managers.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Design Pattern&lt;/em&gt; - Less well defined that Idioms, but more useful.
        - Creational Patterns, like factories
        - Structural Patterns, like Adapters or Proxies
        - Behavioural Patterns, like &lt;code&gt;Visitor&lt;/code&gt; or &lt;code&gt;Strategy&lt;/code&gt;
    These tend to be the same across different languages.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Architectural&lt;/em&gt; - the large-scale structure of your software system. The
   language itself doesn’t make a lot of difference, an application would have
   the same architecture whether it is written in Python or Java. The interface
   between different components would be different, but the “organs” of the
   body would essentially be the same.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="read-peps"&gt;Read PEPs&lt;/h2&gt;
&lt;p&gt;A Python Enhancement Proposal is a document that’s written to propose a new
feature of Python.&lt;/p&gt;
&lt;p&gt;It fully details the proposed feature, the arguments for and against it, and
lots of sample code.&lt;/p&gt;
&lt;p&gt;If the &lt;span class="caps"&gt;PEP&lt;/span&gt; is accepted into a future version of Python, the &lt;span class="caps"&gt;PEP&lt;/span&gt; becomes
the authoritative document for that feature and how to use it.&lt;/p&gt;
&lt;p&gt;PEPs tend to be written by the best programmers in the world, so hang out with them.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-python-notes-1"&gt;
&lt;a href="https://johnmathews.eu/principles-of-oop.html#2-abstraction"&gt;Abstraction&lt;/a&gt; as a
principal of &lt;span class="caps"&gt;OOP&lt;/span&gt; &lt;a href="#sf-python-notes-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Developer Tools"></category></entry><entry><title>Vim Notes: GoTo Tag Definition</title><link href="https://johnmathews.eu/vim-notes-goto-tag-definition.html" rel="alternate"></link><published>2021-01-20T15:57:00+01:00</published><updated>2021-01-20T15:57:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-20:/vim-notes-goto-tag-definition.html</id><summary type="html"></summary><content type="html">&lt;p&gt;There are multiple ways of doing anything with vim, including using Tags or
going to where an something is defined. I usually need to do something at least
3 times before I remember how to do it without breaking my focus or train of thought.&lt;/p&gt;
&lt;p&gt;My memory is hazy but I remember spending a 1/2 day looking into this and
considering which solution I wanted to commit to.&lt;sup id="sf-vim-notes-goto-tag-definition-1-back"&gt;&lt;a href="#sf-vim-notes-goto-tag-definition-1" class="simple-footnote" title="The more powerful the tool, the more worthwhile it is to take a closer look at what it can and can’t do."&gt;1&lt;/a&gt;&lt;/sup&gt; My options seemed to be between
&lt;a href="https://github.com/ycm-core/YouCompleteMe"&gt;YouCompleteMe&lt;/a&gt; and
&lt;a href="https://github.com/dense-analysis/ale"&gt;&lt;span class="caps"&gt;ALE&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I can’t remember everything I read and tried, but I trust my conclusions.
Looking in my &lt;code&gt;.vimrc&lt;/code&gt; I see that I have &lt;code&gt;&amp;lt;leader&amp;gt;x&lt;/code&gt; mapped to &lt;code&gt;:YcmCompleter
GoTo&lt;/code&gt; and it works just fine, even when a module is imported from somewhere
outside the current project. The tool was working and ready to use, I just
hadn’t internalized it yet.&lt;/p&gt;
&lt;h2 id="commands-to-remember"&gt;Commands to remember:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;Leader&amp;gt;x&lt;/code&gt; - GoTo definition - YCMs best guess at an ‘intelligent’ goto
command, whether its a declaration or a definition.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;F2&amp;gt;&lt;/code&gt; - Toggle tagbar&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="jump-lists-and-change-lists-if-youre-going-to-be-jumping-around-to-where"&gt;Jump Lists and Change Lists If you’re going to be jumping around to where&lt;/h2&gt;
&lt;p&gt;things are defined, you will need to know how to jump back again. It seems
there are two lists you need to be aware of, the &lt;em&gt;jump list&lt;/em&gt;&lt;sup id="sf-vim-notes-goto-tag-definition-2-back"&gt;&lt;a href="#sf-vim-notes-goto-tag-definition-2" class="simple-footnote" title=":help jumplist"&gt;2&lt;/a&gt;&lt;/sup&gt; and the &lt;em&gt;change list&lt;/em&gt;&lt;sup id="sf-vim-notes-goto-tag-definition-3-back"&gt;&lt;a href="#sf-vim-notes-goto-tag-definition-3" class="simple-footnote" title=":help changelist"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3 id="jump-list"&gt;Jump List&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A list of locations that the cursor has jumped to. &lt;/li&gt;
&lt;li&gt;Relevant to jumping to a definition.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;C-O&amp;gt;&lt;/code&gt; move up the jump list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;C-I&amp;gt;&lt;/code&gt; mode down the jump list&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="change-list"&gt;Change List&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A list of locations where a change was made.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A change is something that can be undone using &lt;code&gt;u&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;'.&lt;/code&gt; will move you to the &lt;code&gt;.&lt;/code&gt; mark.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; is a special mark that is automatically set at the location of your last edit.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;''&lt;/code&gt; will bring you back to where you were before your last jump&lt;/li&gt;
&lt;li&gt;&lt;code&gt;g;&lt;/code&gt; and &lt;code&gt;g,&lt;/code&gt;  will also move you up and down the &lt;code&gt;change list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-vim-notes-goto-tag-definition-1"&gt;The more powerful the
tool, the more worthwhile it is to take a closer look at what it can and can’t
do. &lt;a href="#sf-vim-notes-goto-tag-definition-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-vim-notes-goto-tag-definition-2"&gt;&lt;code&gt;:help
jumplist&lt;/code&gt; &lt;a href="#sf-vim-notes-goto-tag-definition-2-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-vim-notes-goto-tag-definition-3"&gt;&lt;code&gt;:help changelist&lt;/code&gt; &lt;a href="#sf-vim-notes-goto-tag-definition-3-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Developer Tools"></category></entry><entry><title>Debugging the more_categories Pelican plugin</title><link href="https://johnmathews.eu/debugging-more-categories-pelican-plugin.html" rel="alternate"></link><published>2021-01-19T12:00:00+01:00</published><updated>2021-01-19T12:00:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-19:/debugging-more-categories-pelican-plugin.html</id><summary type="html"></summary><content type="html">&lt;p&gt;I’ve realised that one of the plugins I use to make this blog is not working
correctly. I use the &lt;code&gt;more_categories&lt;/code&gt; plugin to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;add subcategories&lt;/li&gt;
&lt;li&gt;assign multiple categories to articles.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Subcategories aren’t working and Pelican thinks each article just has
categories than contain forward slashes.&lt;/p&gt;
&lt;p&gt;In his “powerful python” emails, Aaron Maxwell recommends looking at the source
code for popular python libraries to see how really good Python is written, and
how talented developers write code and solve problems.&lt;/p&gt;
&lt;p&gt;This is a good opportunity to look at the code that powers the plugin and see
if if I can:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Understand the source code&lt;/li&gt;
&lt;li&gt;Locate the source of the problem&lt;/li&gt;
&lt;li&gt;Fix the problem&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I don’t know if Pelican is amazingly good quality or not, I get the feeling it
could do with more developer resources, but I’ve got a real reason and
motivation to look at the underlying code so I’m going to give it a shot.&lt;/p&gt;
&lt;p&gt;The documentation is sparse which doesn’t help, I get the impression that
whoever wrote it feels like Pelican is simple and it’s obvious what’s going on
&lt;sup id="sf-debugging-more-categories-pelican-plugin-1-back"&gt;&lt;a href="#sf-debugging-more-categories-pelican-plugin-1" class="simple-footnote" title="I guess it’s the “curse of knowledge”"&gt;1&lt;/a&gt;&lt;/sup&gt;. It’s not obvious to me.&lt;/p&gt;
&lt;h2 id="pelican-plugins"&gt;Pelican Plugins&lt;/h2&gt;
&lt;p&gt;Every plugin has to have a &lt;code&gt;register()&lt;/code&gt; function, here it is for the
&lt;code&gt;more-categories&lt;/code&gt; plugin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_generator_context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_categories&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_generator_finalized&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_categories&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I understand the idea of signals from Django, and generators are discussed a
bit in the &lt;a href="https://docs.getpelican.com/en/latest/internals.html#how-to-implement-a-new-generator"&gt;documentation&lt;/a&gt;. So what else is happening…&lt;/p&gt;
&lt;p&gt;As I write down my understanding of the plugin, I’m aware that my understanding
is definitely incomplete and probably wrong. I hope that as I progress I will
see the mistakes in what I’ve already written.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;get_categories()&lt;/code&gt; is called first, and it takes two arguments, &lt;code&gt;generator&lt;/code&gt; and
&lt;code&gt;metadata&lt;/code&gt;. The entire function is 3 lines so here it is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_categories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;categories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'category'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;','&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'categories'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'category'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'categories'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It looks like it gets the category from the metadata for each article.
Presumably by the time this function is called the articles have already been
parsed and a &lt;code&gt;metadata&lt;/code&gt; object has already been created and populated with
metadata about the articles, including categories.&lt;/p&gt;
&lt;p&gt;The first row of &lt;code&gt;get_categories()&lt;/code&gt; splits up the categories if multiple
categories are listed. &lt;code&gt;metadata&lt;/code&gt; must be a dictionary, and there must be a
metadata dict for each article, otherwise you couldn’t just get get the value
assoiciated with the dictionary key and then split the string on commas.&lt;/p&gt;
&lt;p&gt;This means that this function is called once for each article.&lt;/p&gt;
&lt;p&gt;I don’t know what &lt;code&gt;text_type&lt;/code&gt; does yet. Maybe it ensures that the output is
always a string. It’s imported from &lt;code&gt;six&lt;/code&gt; which I remember seeing being a
dependecy of some other packages.&lt;/p&gt;
&lt;p&gt;.. Having checked the
&lt;a href="https://six.readthedocs.io/#six.text_type"&gt;documentation&lt;/a&gt; for &lt;code&gt;six&lt;/code&gt; it looks like I was
right - it represents unicode textual data in both &lt;code&gt;python2&lt;/code&gt; and &lt;code&gt;python3&lt;/code&gt;.
Pelican was originally written in Python2 I guess.&lt;/p&gt;
&lt;p&gt;Next step is to write a new key-value pair to the metadata dictionary for each
article. This plugin adds functionality to python by enabling &lt;code&gt;categories&lt;/code&gt;
and not just a &lt;code&gt;category&lt;/code&gt; for each article. It seems clear that adding a
&lt;code&gt;categories&lt;/code&gt; key to the metadata dict is an obvious way to do this. The value
for the &lt;code&gt;categories&lt;/code&gt; key is a &lt;code&gt;list&lt;/code&gt; where each item is an instance of the 
&lt;code&gt;Category&lt;/code&gt; class. This class is instantiated using two arguments, &lt;code&gt;name&lt;/code&gt; which
is the string from the previous row, and &lt;code&gt;generator.settings&lt;/code&gt; which is
currently not understood.&lt;/p&gt;
&lt;p&gt;.. printing the contents of &lt;code&gt;generator.settings&lt;/code&gt; shows that its a dictionary of
all the settings. Easily assumed and good to confirm.&lt;/p&gt;
&lt;p&gt;I’ll dig into the &lt;code&gt;Category&lt;/code&gt; class in a moment, but first lets quickly cover
the last row of the function. The &lt;code&gt;category&lt;/code&gt; attribute of the articles metadata
is simply updated with the first item in the categories list (&lt;code&gt;categories&lt;/code&gt;
must be a list because it can be indexed.)&lt;/p&gt;
&lt;h2 id="class-category"&gt;class Category():&lt;/h2&gt;
&lt;p&gt;This class is the only class defined by the plugin (which is only 96 lines of
code). It has 6 methods, 5 of them are decorated, and it has no constants.&lt;/p&gt;
&lt;p&gt;The decorators are &lt;code&gt;property&lt;/code&gt; [3], &lt;code&gt;_name.setter&lt;/code&gt; [1] and &lt;code&gt;URLWrapper.name.setter&lt;/code&gt; [1].
&lt;code&gt;URLWrapper&lt;/code&gt; is imported from &lt;code&gt;pelican.urlwrappers&lt;/code&gt; and I don’t know what that
does beyond “wrapping URLs”.&lt;/p&gt;
&lt;h3 id="property"&gt;@property&lt;/h3&gt;
&lt;p&gt;Decorators are functions that takes methods or functions as inputs. Using
&lt;code&gt;property&lt;/code&gt; along with &lt;code&gt;setter&lt;/code&gt; decorators lets a class have a property assigned
to it whilst ensuring that arbitrary conditions or logic is upheld. If the &lt;code&gt;@property&lt;/code&gt;
decorator is over a method called &lt;code&gt;foo&lt;/code&gt;, then there would need to be a
decorator called &lt;code&gt;foo.setter&lt;/code&gt; on a method somewhere in the class.&lt;/p&gt;
&lt;p&gt;That doesn’t seem entirely right though, because in our &lt;code&gt;Category&lt;/code&gt; class, we
have a &lt;code&gt;@property&lt;/code&gt; decorator over a &lt;code&gt;_name&lt;/code&gt; method, and also a &lt;code&gt;@_name.setter&lt;/code&gt;
decorator over another method called &lt;code&gt;_name&lt;/code&gt;. But the other methods with
&lt;code&gt;@property&lt;/code&gt; decorators (&lt;code&gt;slug&lt;/code&gt; and &lt;code&gt;ancestors&lt;/code&gt;) do not have any associated setter
decorators or methods.&lt;/p&gt;
&lt;p&gt;The setter for &lt;code&gt;_name&lt;/code&gt; seems to create parent categories if the string contains slashes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@_name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setter&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;parentname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsplit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__class__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parentname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shortname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, &lt;code&gt;self.parent&lt;/code&gt; becomes an instance of the category class, that is
instantiated using &lt;code&gt;parentname&lt;/code&gt; and &lt;code&gt;self.settings&lt;/code&gt;. This is recursive to
however many levels of subcategories are specified.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ancestors&lt;/code&gt; and &lt;code&gt;as_dict&lt;/code&gt; methods seem more confusing. &lt;code&gt;ancestors&lt;/code&gt; isn’t
called or mentioned within the class definition, but is called from the
&lt;code&gt;create_categories&lt;/code&gt; function which is called after the &lt;code&gt;get_categories&lt;/code&gt;
function returns. I don’t understand why it needs an &lt;code&gt;@property&lt;/code&gt; decorator though.&lt;/p&gt;
&lt;p&gt;The class inherits from &lt;code&gt;URLWrapper&lt;/code&gt; so that is probably the next best place to
look… Indeed, looking at the definition of &lt;code&gt;URLWrapper&lt;/code&gt; shows that the
&lt;code&gt;as_dict&lt;/code&gt; method is overriding the definition in the base class.&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-debugging-more-categories-pelican-plugin-1"&gt;I guess it’s the “curse of knowledge” &lt;a href="#sf-debugging-more-categories-pelican-plugin-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Developer Tools"></category></entry><entry><title>Becoming A Better Python Developer</title><link href="https://johnmathews.eu/becoming-a-better-python-developer.html" rel="alternate"></link><published>2021-01-18T11:25:00+01:00</published><updated>2021-01-18T11:25:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-18:/becoming-a-better-python-developer.html</id><summary type="html"></summary><content type="html">&lt;p&gt;I&amp;#8217;ve been subscribed to Aaron Maxwell&amp;#8217;s &amp;#8220;Powerful Python&amp;#8221; newsletter for over a
year and I really like it. His emails are opinionated and candid, and
singularly focussed. He seems passionate about what he does and I like&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;Ultimately, the emails are designed to drive sign-ups for his courses which I
suspect would be very good, but there is a lot of value in the free emails.
Thanks Aaron. I realised that the emails are sequential and each subscriber
gets the same sequence of messages regardless of when they signed up. There is
the &amp;#8216;first&amp;#8217; message, and then the &amp;#8216;second&amp;#8217;, and they kind of progress and&amp;nbsp;flow.&lt;/p&gt;
&lt;p&gt;This means that there are more benefits to paying attention than for usual
email subscriptions. Even though the emails arrive when I&amp;#8217;m at a
supermarket, or making dinner for my kids, it&amp;#8217;s good to try and read it
properly&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;After being subscribed for several months, I unsubscribed and resubscribed. Now
that I know how reliable and high quality this advice is I&amp;#8217;m going to
prioritise working through the examples and doing some of what I missed the
first time. I&amp;#8217;ve gone back to the beginning to reinforce the parts I know and
to try again with what eluded me the first&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;Three kinds of practice projects to become a better&amp;nbsp;developer:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A web app - use &lt;code&gt;Django&lt;/code&gt; if you don&amp;#8217;t know which framework to user. Done&amp;nbsp;this.&lt;/li&gt;
&lt;li&gt;A command line tool - use the &lt;code&gt;argparse&lt;/code&gt; module, because it&amp;#8217;s in the standard
   library. Haven&amp;#8217;t done this yet, I guess now is a good time to start. It
   seems like the simplest and quickest of the three kinds of project, and I
   can see how useful it could be - it lets you use the app in many different
   contexts, outside the python eco-system and anywhere command line tools can
   be used&amp;nbsp;(everywhere).&lt;/li&gt;
&lt;li&gt;A machine learning model - I&amp;#8217;ve already studied this, from theory (&lt;code&gt;numpy&lt;/code&gt;)
   to frameworks (&lt;code&gt;tensorflow&lt;/code&gt;). I&amp;#8217;m happy to see it&amp;#8217;s&amp;nbsp;included.&lt;/li&gt;
&lt;/ol&gt;</content><category term="Technical/Developer Tools"></category></entry><entry><title>Vim For Large Projects</title><link href="https://johnmathews.eu/vim-for-large-projects.html" rel="alternate"></link><published>2021-01-15T15:02:00+01:00</published><updated>2021-01-15T15:02:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-15:/vim-for-large-projects.html</id><summary type="html"></summary><content type="html">&lt;p&gt;I use Vim as my text editor and as my &lt;span class="caps"&gt;IDE&lt;/span&gt;. I like that its free and open
source, and I like that I can customize it. This post is about the most useful
plugins and features I&amp;#8217;ve started using this year. There&amp;#8217;s a copy of my
&lt;code&gt;.vimrc&lt;/code&gt; at the&amp;nbsp;end.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m happy to invest some time and effort into learning how to make the most of
vim and its plugins because I&amp;#8217;m confident that I&amp;#8217;ll still be using it twenty
years from&amp;nbsp;now.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Filetype plugins - if you want some settings to be active only for
     particular filetypes, like &lt;code&gt;.py&lt;/code&gt; (python) or &lt;code&gt;.txt&lt;/code&gt; (text) then create a file in
     &lt;code&gt;~/.vim/ftplugin/&amp;lt;filetype&amp;gt;.vim&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Vim will look in this file when it opens a buffer of the corresponding
 file type. Good for formatting options like line length, tab spaces, vim
 commands that are language&amp;nbsp;specific. &lt;/p&gt;
&lt;p&gt;You can&amp;#8217;t activate plugins in these files though. All the plugins have to be
 activated in your &lt;code&gt;.vimrc&lt;/code&gt; in the usual&amp;nbsp;way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;janko-m/vim-test&lt;/code&gt; - this plugin lets you runs tests without leaving vim.
   You can run the test that&amp;#8217;s nearest the cursor, or all the tests in the
   current buffer. It&amp;#8217;s very customizable. I wish it could be a bit faster, but
   I could probably improve that myself by changing some&amp;nbsp;settings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dense-analysis/ale&lt;/code&gt; - The incredible Asyncronous Linting Engine (&lt;span class="caps"&gt;A.L.&lt;/span&gt;E)
   applies fixers and linters to various filetypes, when you want and how you want.
   Super useful for writing tidy code and catching mistakes before the code is&amp;nbsp;run.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;junegunn/fzf&lt;/code&gt; and &lt;code&gt;junegunn/fzf.vim&lt;/code&gt; - It took a little getting used to at
   first, but now I can&amp;#8217;t imagine not using a tool like this (this could be
   said about so many vim-related things). Use &lt;code&gt;fzf&lt;/code&gt; to switch between open
   buffers, open a new file, search for files using the filename, or search
   within all the files in the project for specific&amp;nbsp;text. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;majutsushi/tagbar&lt;/code&gt; - This plugin opens a sidebar which contains a list of
   of functions and classes and methods (tags). You can use it to see which
   methods a class contains, and jump to the part of the buffer where a tag
   is&amp;nbsp;defined.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; ========== Global ==========&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;nocompatible&lt;/span&gt;              &lt;span class="c"&gt;&amp;quot; always put it at the top of .vimrc. effects mappings, undo, etc.&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;utf&lt;span class="m"&gt;-8&lt;/span&gt;            &lt;span class="c"&gt;&amp;quot; utf-8 encoding&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; termguicolors
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;t_Co&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;256&lt;/span&gt;                  &lt;span class="c"&gt;&amp;quot; number of colors&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;noerrorbells&lt;/span&gt; &lt;span class="nb"&gt;vb&lt;/span&gt; &lt;span class="nb"&gt;t_vb&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;     &lt;span class="c"&gt;&amp;quot; no error bells, yes screnflash.&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;linespace&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;scrolloff&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;               &lt;span class="c"&gt;&amp;quot; minimum number of screen lines above and below the cursor&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;shortmess&lt;/span&gt;&lt;span class="p"&gt;-=&lt;/span&gt;S              &lt;span class="c"&gt;&amp;quot; show how many times a search result occurs in current buffer, and index of current match&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="k"&gt;number&lt;/span&gt; &lt;span class="nb"&gt;relativenumber&lt;/span&gt;     &lt;span class="c"&gt;&amp;quot; Line numbers&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;splitbelow&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;splitright&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;undofile&lt;/span&gt;                  &lt;span class="c"&gt;&amp;quot; Maintain undo history between sessions&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;undodir&lt;/span&gt;&lt;span class="p"&gt;=~&lt;/span&gt;&lt;span class="sr"&gt;/.vim/&lt;/span&gt;undo       &lt;span class="c"&gt;&amp;quot; put all the undo files in this dir&lt;/span&gt;

&lt;span class="k"&gt;filetype&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;                   &lt;span class="c"&gt;&amp;quot; enables filetype detection&lt;/span&gt;
&lt;span class="k"&gt;filetype&lt;/span&gt; plugin indent &lt;span class="k"&gt;on&lt;/span&gt;     &lt;span class="c"&gt;&amp;quot; detection on, plugin on, indent on. To see the current status, type: :filetype&lt;/span&gt;
&lt;span class="nb"&gt;syntax&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;                 &lt;span class="c"&gt;&amp;quot; syntax highlighting - try &amp;#39;syntax on/enable&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;noesckeys&lt;/span&gt;           &lt;span class="c"&gt;&amp;quot; might break stuff, should make &amp;lt;ESC&amp;gt; delay smaller&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;timeoutlen&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;350&lt;/span&gt;            &lt;span class="c"&gt;&amp;quot; timeoutlen is used for mapping delays&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;ttimeoutlen&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;             &lt;span class="c"&gt;&amp;quot; ttimeoutlen is used for key code delays&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot;Search/Find/Highlight ======================================&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;incsearch&lt;/span&gt;  &lt;span class="nb"&gt;ignorecase&lt;/span&gt;  &lt;span class="nb"&gt;smartcase&lt;/span&gt;  &lt;span class="nb"&gt;hlsearch&lt;/span&gt;
&lt;span class="nb"&gt;highlight&lt;/span&gt; Search guibg&lt;span class="p"&gt;=&lt;/span&gt;purple guifg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NONE&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;highlight&lt;/span&gt; Search cterm&lt;span class="p"&gt;=&lt;/span&gt;none ctermbg&lt;span class="p"&gt;=&lt;/span&gt;green ctermfg&lt;span class="p"&gt;=&lt;/span&gt;black
&lt;span class="nb"&gt;highlight&lt;/span&gt; CursorColumn guibg&lt;span class="p"&gt;=&lt;/span&gt;blue guifg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;red&lt;/span&gt;
&lt;span class="nb"&gt;highlight&lt;/span&gt; CursorColumn ctermbg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;red&lt;/span&gt; ctermfg&lt;span class="p"&gt;=&lt;/span&gt;blue
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="sr"&gt;//&lt;/span&gt; :&lt;span class="k"&gt;nohlsearch&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; # #``
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; * *``

&lt;span class="c"&gt;&amp;quot; close buffers properly go to previous buffer, then delete the buffer you were just in.&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;bd&lt;/span&gt; :&lt;span class="k"&gt;bp&lt;/span&gt;\&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="k"&gt;bd&lt;/span&gt; #&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;inoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;bd&lt;/span&gt; :&lt;span class="k"&gt;bp&lt;/span&gt;\&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="k"&gt;bd&lt;/span&gt; #&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; Spell check ==============================================&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;spelllang&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;en&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;ss&lt;/span&gt; :&lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="k"&gt;spell&lt;/span&gt;&lt;span class="p"&gt;!&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;sf&lt;/span&gt; z&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; ========== Set leader and local leader ===================&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; mapleader&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\&amp;lt;Space&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; localleader&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\\&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; insert 1 space to the right, without leaving normal mode&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;localleader&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;space&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Space&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;Right&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; Flash the cursor row (and column) colors are set after color scheme ========&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; nnoremap &amp;lt;leader&amp;gt;f :call Flash()&amp;lt;CR&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; function! Flash()&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;     &amp;quot; set cursorline cursorcolumn&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;     set cursorline&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;     redraw&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;     sleep 110m&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;     set nocursorline&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; endfunction&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; Edit/Reload the .vimrc file&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;ve&lt;/span&gt; :&lt;span class="k"&gt;e&lt;/span&gt; $MYVIMRC&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;vr :&lt;span class="k"&gt;so&lt;/span&gt; $MYVIMRC&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

augroup VimReload
    autocmd&lt;span class="p"&gt;!&lt;/span&gt;
    autocmd &lt;span class="nb"&gt;BufWritePost&lt;/span&gt; $MYVIMRC source $MYVIMRC
augroup END

&lt;span class="c"&gt;&amp;quot; Yank to clipboard&lt;/span&gt;
&lt;span class="nb"&gt;vnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;quot;+y&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; has&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;clipboard&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;unnamed &lt;span class="c"&gt;&amp;quot; copy to the system clipboard&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; has&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;unnamedplus&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;&amp;quot; X11 support&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;+=&lt;/span&gt;unnamedplus
  &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; Go into NORMAL mode&lt;/span&gt;
&lt;span class="nb"&gt;inoremap&lt;/span&gt; jk &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; view working directory&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;pwd&lt;/span&gt; :&lt;span class="k"&gt;cd&lt;/span&gt; %:&lt;span class="k"&gt;p&lt;/span&gt;:&lt;span class="k"&gt;h&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; toggle line wrap&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;lw&lt;/span&gt; :&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;nowrap&lt;/span&gt;&lt;span class="p"&gt;!&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; toggle line numbers&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;ln :&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;relativenumber&lt;/span&gt;&lt;span class="p"&gt;!&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; Insert current datetime&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;dt A &lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;hh&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;=strftime(&amp;quot;&lt;/span&gt;\%Y&lt;span class="p"&gt;-&lt;/span&gt;\%&lt;span class="k"&gt;m&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;\%&lt;span class="k"&gt;d&lt;/span&gt;&amp;quot;&lt;span class="p"&gt;)&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;gp&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; map w to `&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; ` &lt;span class="k"&gt;w&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; Swap : and ;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; ; :
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; : ;
&lt;span class="nb"&gt;vnoremap&lt;/span&gt; ; :
&lt;span class="nb"&gt;vnoremap&lt;/span&gt; : ;

&lt;span class="c"&gt;&amp;quot; Navigation &amp;amp; movemement&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; save buffer if it has been changed&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="nb"&gt;ww&lt;/span&gt; :&lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; close Vim, but not if there are unsaved changes&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;qa&lt;/span&gt; :&lt;span class="k"&gt;qa&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; save all changes&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;wa&lt;/span&gt; :&lt;span class="k"&gt;wa&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; close buffer&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; qq :&lt;span class="k"&gt;bp&lt;/span&gt;\&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="k"&gt;bd&lt;/span&gt; #&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;wq&lt;/span&gt; :&lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="k"&gt;bp&lt;/span&gt;\&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="k"&gt;bd&lt;/span&gt; #&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; switch buffers&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; :&lt;span class="k"&gt;bn&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; _ :&lt;span class="k"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; Split navigations&lt;/span&gt;
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;W&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;H&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;j&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;W&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;J&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;k&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;W&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;K&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;W&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;L&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;ww&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;W&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;W&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;wq&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;W&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Q&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; split (pane) resize&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;k&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;resize&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;j&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;resize&lt;/span&gt; &lt;span class="m"&gt;-2&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;vertical&lt;/span&gt; &lt;span class="k"&gt;resize&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;vertical&lt;/span&gt; &lt;span class="k"&gt;resize&lt;/span&gt; &lt;span class="m"&gt;-2&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; open help in vertical split by default&lt;/span&gt;
cabbrev vhelp &lt;span class="k"&gt;vert&lt;/span&gt; help

&lt;span class="c"&gt;&amp;quot; Natural cursor movement over wrapped lines&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;j&lt;/span&gt; gj
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;k&lt;/span&gt; gk

&lt;span class="c"&gt;&amp;quot; Insert blank lines in normal mode&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;o&lt;/span&gt; &lt;span class="k"&gt;o&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;k&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;O O&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;j&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot;*****************************&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;========== PLUGINS ==========&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;*****************************&lt;/span&gt;

&lt;span class="k"&gt;call&lt;/span&gt; plug#begin&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;~/.vim/plugged&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; numbers as text objects&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;MisanthropicBit/vim-numbers&amp;#39;&lt;/span&gt;


&lt;span class="c"&gt;&amp;quot;run shell commands async in vim8&amp;quot;&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;skywind3000/asyncrun.vim&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:asyncrun_open &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; When using :python or :!python, access the packages in venv&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; :VirtualEnvList&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; :VirtualEnvActivate &amp;lt;tab&amp;gt;&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;jmcantrell/vim-virtualenv&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; force quickfix to be full widtth&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;FileType&lt;/span&gt; qf &lt;span class="k"&gt;wincmd&lt;/span&gt; J

&lt;span class="c"&gt;&amp;quot; testing - many languages and test runners&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;janko-m/vim-test&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; test#strategy &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;asyncrun_background&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; test#python#runner &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pytest&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; test#python#pytest#&lt;span class="k"&gt;options&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-x&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; test#&lt;span class="k"&gt;vim&lt;/span&gt;#term_position &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;belowright&amp;quot;&lt;/span&gt;

&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;t&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;LEADER&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;n&lt;/span&gt; :TestNearest&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;t&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;LEADER&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;f&lt;/span&gt; :TestFile&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;t&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;LEADER&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;s :TestSuite&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;t&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;LEADER&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt; :TestLast&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;t&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;LEADER&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;g&lt;/span&gt; :TestVisit&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; toggle the quickfix window&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; ToggleQuickFix&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; empty&lt;span class="p"&gt;(&lt;/span&gt;filter&lt;span class="p"&gt;(&lt;/span&gt;getwininfo&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;v:val.quickfix&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;copen&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;
    &lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="nb"&gt;norelativenumber&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;cclose&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;cc&lt;/span&gt; :&lt;span class="k"&gt;call&lt;/span&gt; ToggleQuickFix&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;


&lt;span class="c"&gt;&amp;quot; generates an index (or tag) file of language objects found in source files&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; &amp;lt;C-]&amp;gt; jump to definition&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; &amp;lt;C-O&amp;gt; jump back&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; g] see a list of multiple matches&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; &amp;lt;C-t&amp;gt;&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;universal-ctags/ctags&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; (re)generate tags file in the bg&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;ludovicchabant/vim-gutentags&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:gutentags_ctags_exclude &lt;span class="p"&gt;=&lt;/span&gt; [&lt;span class="s1"&gt;&amp;#39;.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.mypy_cache/**&amp;#39;&lt;/span&gt;]

&lt;span class="c"&gt;&amp;quot; sidebar that displays the ctags-generated tags of the current file, ordered by their scope&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;majutsushi/tagbar&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;F2&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :TagbarToggle&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;F2&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :TagbarToggle&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; add python library code to tags file, goto def with &amp;lt;C-]&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; pyEnvLib &lt;span class="p"&gt;=&lt;/span&gt; $VIRTUAL_ENV
&lt;span class="k"&gt;let&lt;/span&gt; pyEnvLib .&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/lib/python3.8/&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; Async linting engine&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;dense-analysis/ale&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ale_lint_on_enter &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ale_lint_on_save &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; ALE completion&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ale_completion_enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;omnifunc&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;ale#completion#OmniFunc
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ale_completion_autoimport &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;at :ALEToggle&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;af :ALEFix&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;aj :ALENext&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;ak :ALEPrevious&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; iSort&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;fisadev/vim-isort&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; track the snippets engine&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;sirver/ultisnips&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; Snippets are separated from the engine. Add this if you want them:&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;honza/vim-snippets&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; Trigger configuration. Do not use &amp;lt;tab&amp;gt; if you use https://github.com/Valloric/YouCompleteMe.&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:UltiSnipsExpandTrigger&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;c-a&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:UltiSnipsJumpForwardTrigger&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;c-b&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:UltiSnipsJumpBackwardTrigger&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;c-z&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; If you want :UltiSnipsEdit to split your window.&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; let g:UltiSnipsEditSplit=&amp;quot;vertical&amp;quot;&lt;/span&gt;

Plug &lt;span class="s1"&gt;&amp;#39;Valloric/YouCompleteMe&amp;#39;&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;davidhalter/jedi&amp;#39;&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;maksimr/vim-jsbeautify&amp;#39;&lt;/span&gt;

&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;x&lt;/span&gt;  :YcmCompleter GoTo&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; the subcommands add entries to Vim&amp;#39;s &amp;#39;jumplist&amp;#39; so you can use&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; &amp;#39;CTRL-O&amp;#39; to jump back to where you were before invoking the command (and&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; &amp;#39;CTRL-I&amp;#39; to jump forward; see &amp;#39;:h jumplist&amp;#39; for details)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_confirm_extra_conf &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_autoclose_preview_window_after_completion&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_collect_identifiers_from_tags_files &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_use_ultisnips_completer &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_seed_identifiers_with_syntax &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_complete_in_comments &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_complete_in_strings &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ycm_collect_identifiers_from_tags_files &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;


&lt;span class="c"&gt;&amp;quot; autoclose parens, brackets etc&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; Plug &amp;#39;townk/vim-autoclose&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; vim-tmux focus events&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;tmux-plugins/vim-tmux-focus-events&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; Code folding&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; Plug &amp;#39;konfekt/fastfold&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; match m of n https://vimawesome.com/plugin/indexedsearch&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; Plug &amp;#39;henrik/vim-indexed-search&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; adds vertical lines to easily show indent levels&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;yggdroot/indentline&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; Fugitive&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;tpope/vim-fugitive&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; Marks&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;kshenoy/vim-signature&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; Latex Vimtex&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;lervag/vimtex&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:tex_flavor &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;latex&amp;#39;&lt;/span&gt;
autocmd Filetype tex &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;updatetime&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:livepreview_previewer &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;open -a Preview&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:tex_IgnoredWarnings &lt;span class="p"&gt;=&lt;/span&gt;
    \&lt;span class="s1"&gt;&amp;#39;Underfull&amp;#39;&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;.
    \&lt;span class="s1"&gt;&amp;#39;Overfull&amp;#39;&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;.
    \&lt;span class="s1"&gt;&amp;#39;specifier changed to&amp;#39;&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;.
    \&lt;span class="s1"&gt;&amp;#39;You have requested&amp;#39;&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;.
    \&lt;span class="s1"&gt;&amp;#39;Missing number, treated as zero.&amp;#39;&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;.
    \&lt;span class="s1"&gt;&amp;#39;There were undefined references&amp;#39;&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;.
    \&lt;span class="s1"&gt;&amp;#39;Citation %.%# undefined&amp;#39;&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;.
    \&lt;span class="s1"&gt;&amp;#39;Double space found.&amp;#39;&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:Tex_IgnoreLevel &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; Rainbow parenthesis&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; blacklist &lt;span class="p"&gt;=&lt;/span&gt; [&lt;span class="s1"&gt;&amp;#39;html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;md&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wiki&amp;#39;&lt;/span&gt;]
autocmd &lt;span class="nb"&gt;BufWritePre&lt;/span&gt; * &lt;span class="k"&gt;if&lt;/span&gt; index&lt;span class="p"&gt;(&lt;/span&gt;blacklist&lt;span class="p"&gt;,&lt;/span&gt; &amp;amp;&lt;span class="nb"&gt;ft&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; Plug &lt;span class="s1"&gt;&amp;#39;luochen1990/rainbow&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:rainbow_active &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:rainbow_conf &lt;span class="p"&gt;=&lt;/span&gt; {
    \&lt;span class="s1"&gt;&amp;#39;guifgs&amp;#39;&lt;/span&gt;: [&lt;span class="s1"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;magenta1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gold&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;deepskyblue&amp;#39;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
    \&lt;span class="s1"&gt;&amp;#39;guis&amp;#39;&lt;/span&gt;: [&lt;span class="s1"&gt;&amp;#39;bold&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;standout&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;undercurl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;italic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;strikethrough&amp;#39;&lt;/span&gt;]
    \}

&lt;span class="c"&gt;&amp;quot; Set color scheme.&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;background&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;dark&lt;/span&gt;

Plug &lt;span class="s1"&gt;&amp;#39;chriskempson/base16-vim&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; colorscheme base16-default-dark&lt;/span&gt;
&lt;span class="k"&gt;colorscheme&lt;/span&gt; badwolf
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:badwolf_darkgutter &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:badwolf_html_link_underline &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:badwolf_css_props_highlight &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; colorscheme modifications&lt;/span&gt;
&lt;span class="nb"&gt;highlight&lt;/span&gt; Comment ctermfg&lt;span class="p"&gt;=&lt;/span&gt;cyan guifg&lt;span class="p"&gt;=&lt;/span&gt;cyan
&lt;span class="nb"&gt;highlight&lt;/span&gt; pythonComment ctermfg&lt;span class="p"&gt;=&lt;/span&gt;cyan guifg&lt;span class="p"&gt;=&lt;/span&gt;cyan
&lt;span class="nb"&gt;highlight&lt;/span&gt; LineNr ctermfg&lt;span class="p"&gt;=&lt;/span&gt;cyan guifg&lt;span class="p"&gt;=&lt;/span&gt;cyan
&lt;span class="k"&gt;hi&lt;/span&gt; nontext &lt;span class="nb"&gt;term&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt; ctermfg&lt;span class="p"&gt;=&lt;/span&gt;Cyan guifg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;#80a0ff&lt;/span&gt; &lt;span class="k"&gt;gui&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt;
&lt;span class="k"&gt;hi&lt;/span&gt; vimLineComment &lt;span class="nb"&gt;term&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt; ctermfg&lt;span class="p"&gt;=&lt;/span&gt;Cyan guifg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;#80a0ff&lt;/span&gt; &lt;span class="k"&gt;gui&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; SpecialKey - use :set list to toggle visibility of EOL, CR, etc&lt;/span&gt;
&lt;span class="k"&gt;hi&lt;/span&gt; specialKey &lt;span class="nb"&gt;term&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt; ctermfg&lt;span class="p"&gt;=&lt;/span&gt;Cyan guifg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;#80a0ff&lt;/span&gt; &lt;span class="k"&gt;gui&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; colors for flashing cursorline and cursorcolumn&lt;/span&gt;
&lt;span class="k"&gt;hi&lt;/span&gt; CursorLine   cterm&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;NONE&lt;/span&gt; ctermbg&lt;span class="p"&gt;=&lt;/span&gt;green ctermfg&lt;span class="p"&gt;=&lt;/span&gt;black guibg&lt;span class="p"&gt;=&lt;/span&gt;green guifg&lt;span class="p"&gt;=&lt;/span&gt;black
&lt;span class="k"&gt;hi&lt;/span&gt; CursorColumn cterm&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;NONE&lt;/span&gt; ctermbg&lt;span class="p"&gt;=&lt;/span&gt;green ctermfg&lt;span class="p"&gt;=&lt;/span&gt;black guibg&lt;span class="p"&gt;=&lt;/span&gt;green guifg&lt;span class="p"&gt;=&lt;/span&gt;black

&lt;span class="c"&gt;&amp;quot; query what kind of syntax is this color? - wc&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="nb"&gt;wc&lt;/span&gt; :echo &lt;span class="s2"&gt;&amp;quot;hi&amp;lt;&amp;quot;&lt;/span&gt; . synIDattr&lt;span class="p"&gt;(&lt;/span&gt;synID&lt;span class="p"&gt;(&lt;/span&gt;line&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="k"&gt;col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; . &lt;span class="s1"&gt;&amp;#39;&amp;gt; trans&amp;lt;&amp;#39;&lt;/span&gt; . synIDattr&lt;span class="p"&gt;(&lt;/span&gt;synID&lt;span class="p"&gt;(&lt;/span&gt;line&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="k"&gt;col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; .&lt;span class="s2"&gt;&amp;quot;&amp;gt; lo&amp;lt;&amp;quot;&lt;/span&gt; . synIDattr&lt;span class="p"&gt;(&lt;/span&gt;synIDtrans&lt;span class="p"&gt;(&lt;/span&gt;synID&lt;span class="p"&gt;(&lt;/span&gt;line&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="k"&gt;col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; . &lt;span class="s2"&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; fuzzy file, buffer, tag finder&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;rtp&lt;/span&gt;&lt;span class="p"&gt;+=&lt;/span&gt;&lt;span class="sr"&gt;/usr/&lt;/span&gt;local&lt;span class="sr"&gt;/opt/&lt;/span&gt;fzf

&lt;span class="c"&gt;&amp;quot; ensure you have the latest version&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;junegunn/fzf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; { &lt;span class="s1"&gt;&amp;#39;do&amp;#39;&lt;/span&gt;: { &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; fzf#install&lt;span class="p"&gt;()&lt;/span&gt; } }
Plug &lt;span class="s1"&gt;&amp;#39;junegunn/fzf.vim&amp;#39;&lt;/span&gt;

&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;e&lt;/span&gt; :Files&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;r&lt;/span&gt; :Buffers&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;t&lt;/span&gt; :Tags&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;ff&lt;/span&gt; :Rg&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; nnoremap &amp;lt;silent&amp;gt; &amp;lt;Leader&amp;gt;ff :Ag&amp;lt;CR&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;la&lt;/span&gt; :BLines&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;ll&lt;/span&gt; :Lines&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&amp;#39; :Marks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;fh :Helptags&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;fs&lt;/span&gt; :Snippets&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;fc :Commits&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;fbc :BCommits&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;hh&lt;/span&gt; :History&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt;: :History:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;h&lt;/span&gt;&lt;span class="sr"&gt;/ :History/&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; let $FZF_DEFAULT_OPTS = &amp;#39;--layout=reverse --info=inline&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; let $FZF_DEFAULT_COMMAND=&amp;quot;rg --files --hidden&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:fzf_buffers_jump &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:fzf_layout &lt;span class="p"&gt;=&lt;/span&gt; { &lt;span class="s1"&gt;&amp;#39;down&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;~50%&amp;#39;&lt;/span&gt; }
&lt;span class="c"&gt;&amp;quot; let g:fzf_preview_window = &amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:fzf_preview_window &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;right:0%&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; s:copy_results&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; joined_lines &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt;:&lt;span class="nb"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; len&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt;:&lt;span class="nb"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; joined_lines .&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;endif&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; @&lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; joined_lines
&lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:fzf_action &lt;span class="p"&gt;=&lt;/span&gt; {
  \ &lt;span class="s1"&gt;&amp;#39;ctrl-t&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;tab split&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;&amp;#39;ctrl-x&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;split&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;&amp;#39;ctrl-v&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;vsplit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;&amp;#39;ctrl-o&amp;#39;&lt;/span&gt;: &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s:copy_results&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  \ }

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:fzf_colors &lt;span class="p"&gt;=&lt;/span&gt;
\ { &lt;span class="s1"&gt;&amp;#39;fg&amp;#39;&lt;/span&gt;:      [&lt;span class="s1"&gt;&amp;#39;fg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Normal&amp;#39;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;&amp;#39;bg&amp;#39;&lt;/span&gt;:      [&lt;span class="s1"&gt;&amp;#39;bg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Normal&amp;#39;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;&amp;#39;hl&amp;#39;&lt;/span&gt;:      [&lt;span class="s1"&gt;&amp;#39;fg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Comment&amp;#39;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;&amp;#39;fg+&amp;#39;&lt;/span&gt;:     [&lt;span class="s1"&gt;&amp;#39;fg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CursorLine&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CursorColumn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Normal&amp;#39;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;&amp;#39;bg+&amp;#39;&lt;/span&gt;:     [&lt;span class="s1"&gt;&amp;#39;bg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CursorLine&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CursorColumn&amp;#39;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;&amp;#39;hl+&amp;#39;&lt;/span&gt;:     [&lt;span class="s1"&gt;&amp;#39;fg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Statement&amp;#39;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;&amp;#39;info&amp;#39;&lt;/span&gt;:    [&lt;span class="s1"&gt;&amp;#39;fg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;PreProc&amp;#39;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;&amp;#39;prompt&amp;#39;&lt;/span&gt;:  [&lt;span class="s1"&gt;&amp;#39;fg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Conditional&amp;#39;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;&amp;#39;pointer&amp;#39;&lt;/span&gt;: [&lt;span class="s1"&gt;&amp;#39;fg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Exception&amp;#39;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;&amp;#39;marker&amp;#39;&lt;/span&gt;:  [&lt;span class="s1"&gt;&amp;#39;fg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Keyword&amp;#39;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;&amp;#39;spinner&amp;#39;&lt;/span&gt;: [&lt;span class="s1"&gt;&amp;#39;fg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Label&amp;#39;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
  \ &lt;span class="s1"&gt;&amp;#39;header&amp;#39;&lt;/span&gt;:  [&lt;span class="s1"&gt;&amp;#39;fg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Comment&amp;#39;&lt;/span&gt;] }


&lt;span class="c"&gt;&amp;quot; grep in vim - shows results in a split window&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;mileszs/ack.vim&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; session tracking&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;tpope/vim-obsession&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; pairs of handy bracket mapping&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;tpope/vim-unimpaired&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; https://vimawesome.com/plugin/surround-vim&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;tpope/vim-surround&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; repeat commands from plugin mappings&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;tpope/vim-repeat&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; vinegar&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;tpope/vim-vinegar&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:netrw_liststyle &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; CSV&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;chrisbra/csv.vim&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; nerdtree&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;scrooloose/nerdtree&amp;#39;&lt;/span&gt;

&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;n&lt;/span&gt; :NERDTreeToggle&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:nerdtree_tabs_autoclose&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; NERDTreeAutoDeleteBuffer &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="c"&gt;&amp;quot; Automatically delete the buffer of the file you just deleted&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:nerdtree_tabs_open_on_gui_startup&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="c"&gt;&amp;quot; 2 - open nerdtree only if directory was given as startup argument&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:nerdtree_tabs_smart_startup_focus&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="c"&gt;&amp;quot; always focus file window after startup&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; NERDTreeShowHidden&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; Status bars&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;vim-airline/vim-airline&amp;#39;&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;vim-airline/vim-airline-themes&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline_powerline_fonts &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:hybrid_custom_term_colors &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:hybrid_reduced_contrast &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline_statusline_ontop&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline_section_y&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class="c"&gt;&amp;quot; remove encoding status&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline_skip_empty_sections &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline_theme&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;badwolf&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#fugitiveline#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#tmuxline#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#gutentags#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#virtualenv#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#ale#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#csv#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#tagbar#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#vimtex#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#&lt;span class="nb"&gt;tabline&lt;/span&gt;#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#&lt;span class="nb"&gt;tabline&lt;/span&gt;#formatter &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;unique_tail_improved&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; comments&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;scrooloose/nerdcommenter&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:NERDSpaceDelims &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:NERDCompactSexyComs &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:NERDDefaultAlign &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;left&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:NERDCommentEmptyLines &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:NERDTrimTrailingWhitespace &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; markdown. tabular is required&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;plasticboy/vim-markdown&amp;#39;&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;godlygeek/tabular&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vim_markdown_fenced_languages &lt;span class="p"&gt;=&lt;/span&gt; [&lt;span class="s1"&gt;&amp;#39;python=py&amp;#39;&lt;/span&gt;]
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vim_markdown_follow_anchor &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vim_markdown_conceal_code_blocks &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vim_markdown_folding_disabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vim_markdown_conceal &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:tex_conceal &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vim_markdown_math &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vim_markdown_new_list_item_indent &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vim_markdown_strikethrough &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; writing prose&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;reedes/vim-pencil&amp;#39;&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;junegunn/goyo.vim&amp;#39;&lt;/span&gt;

augroup pencil
  autocmd&lt;span class="p"&gt;!&lt;/span&gt;
  autocmd &lt;span class="nb"&gt;FileType&lt;/span&gt; wiki&lt;span class="p"&gt;,&lt;/span&gt;md&lt;span class="p"&gt;,&lt;/span&gt;txt &lt;span class="k"&gt;call&lt;/span&gt; pencil#init&lt;span class="p"&gt;()&lt;/span&gt;
  autocmd &lt;span class="nb"&gt;FileType&lt;/span&gt; wiki&lt;span class="p"&gt;,&lt;/span&gt;md&lt;span class="p"&gt;,&lt;/span&gt;txt :PencilSoft
augroup END

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:pencil#wrapModeDefault &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;soft&amp;#39;&lt;/span&gt; 

autocmd&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;User&lt;/span&gt; GoyoEnter 
autocmd&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;User&lt;/span&gt; GoyoLeave

&lt;span class="c"&gt;&amp;quot; Ensure :q to quit even when Goyo is active&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; s:goyo_enter&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;b&lt;/span&gt;:quitting &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;b&lt;/span&gt;:quitting_bang &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
  autocmd &lt;span class="nb"&gt;QuitPre&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;b&lt;/span&gt;:quitting &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  cabbrev &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;q&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;b&lt;/span&gt;:quitting_bang &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;bar&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;q&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;
  &lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="nb"&gt;wrap&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; Quit Vim if this is the only remaining buffer&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; s:goyo_leave&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;b&lt;/span&gt;:quitting &amp;amp;&amp;amp; len&lt;span class="p"&gt;(&lt;/span&gt;filter&lt;span class="p"&gt;(&lt;/span&gt;range&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; bufnr&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;buflisted(v:val)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;b&lt;/span&gt;:quitting_bang
      &lt;span class="k"&gt;qa&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="k"&gt;qa&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;
  &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

autocmd&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;User&lt;/span&gt; GoyoEnter &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;goyo_enter&lt;span class="p"&gt;()&lt;/span&gt;
autocmd&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;User&lt;/span&gt; GoyoLeave &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;goyo_leave&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;g&lt;/span&gt; :Goyo&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; python linting&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; F7 checks flake8&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;nvie/vim-flake8&amp;#39;&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;vim-scripts/pylint.vim&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot;Flagging Unnecessary Whitespace&lt;/span&gt;
&lt;span class="nb"&gt;highlight&lt;/span&gt; BadWhitespace ctermbg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;red&lt;/span&gt; guibg&lt;span class="p"&gt;=&lt;/span&gt;darkred

Plug &lt;span class="s1"&gt;&amp;#39;sheerun/vim-polyglot&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:polyglot_disabled &lt;span class="p"&gt;=&lt;/span&gt; [&lt;span class="s1"&gt;&amp;#39;latex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html&amp;#39;&lt;/span&gt;]
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:python_highlight_all &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:graphql_javascript_tags &lt;span class="p"&gt;=&lt;/span&gt; []

&lt;span class="c"&gt;&amp;quot; javaScript&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;pangloss/vim-javascript&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:javascript_plugin_jsdoc &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:javascript_plugin_flow &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; format .JSON files by using the jq cli tool&lt;/span&gt;
&lt;span class="k"&gt;com&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; JQ %&lt;span class="p"&gt;!&lt;/span&gt;jq

&lt;span class="c"&gt;&amp;quot; HTML/JINJA&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;glench/vim-jinja2-syntax&amp;#39;&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;valloric/matchtagalways&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; Plug &amp;#39;alvan/vim-closetag&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:closetag_filenames &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;*.html, *.xhtml, *.phtml&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;call&lt;/span&gt; plug#&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Technical/Developer Tools"></category></entry><entry><title>Data Science vs Web Development: Larger Code Bases</title><link href="https://johnmathews.eu/larger-code-bases.html" rel="alternate"></link><published>2021-01-14T13:40:00+01:00</published><updated>2021-01-14T13:40:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-14:/larger-code-bases.html</id><summary type="html"></summary><content type="html">&lt;h2 id="code-structure"&gt;Code&amp;nbsp;Structure&lt;/h2&gt;
&lt;p&gt;One of the most immediate and basic differences between working as a data
scientist or as a web developer is the number of files the codebase
is spread across and the amount of code within each&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;Web applications tend to be very modular - there are a lot of different things
going on in a modern web app and generally they all need to be able to be
modified or updated independently of each other. This requirement encourages
modular code base architecture with the code broken down into testable&amp;nbsp;units.&lt;/p&gt;
&lt;p&gt;When working on a data science project you often have a well defined and quite narrow pipe line. Each stage of a pipeline has well defined inputs and&amp;nbsp;outputs.&lt;/p&gt;
&lt;p&gt;This seems to have the consequence of making data science projects tend towards a handful of files each with a substantial amount of unique (not boilerplate) code. In web development there seems to be more boilerplate, many more
files spread across a tree of directories, and the average number of lines of code per file is significantly&amp;nbsp;lower.&lt;/p&gt;
&lt;h2 id="ide-features"&gt;&lt;span class="caps"&gt;IDE&lt;/span&gt;&amp;nbsp;features&lt;/h2&gt;
&lt;p&gt;These differences mean that code organization tools and &lt;span class="caps"&gt;IDE&lt;/span&gt; features play very
different roles within each industry. In web development you really need to be able to jump between different files (or buffers) quickly, and search for text across multiple files. Writing idiomatically becomes more important, and writing code within discreet testable units becomes essential so that things don&amp;#8217;t break without being&amp;nbsp;noticed.&lt;/p&gt;
&lt;p&gt;In data science, linting feels more optional, and searching for text within  methods or functions outside the current module is&amp;nbsp;rarer.&lt;/p&gt;
&lt;p&gt;I didn’t appreciate this until I paused my work as a Data Scientist and began building non-trivial web&amp;nbsp;apps. &lt;/p&gt;</content><category term="Technical/Developer Tools"></category></entry><entry><title>Test Driven Development</title><link href="https://johnmathews.eu/test-driven-development.html" rel="alternate"></link><published>2021-01-06T17:50:00+01:00</published><updated>2021-01-06T17:50:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-06:/test-driven-development.html</id><summary type="html"></summary><content type="html">&lt;p&gt;Test Driven Development was mind-bending when I first grappled with it.
Last summer I was building a web app using Django and began to break things
unintentionally when adding new features. This soon led to lots of clicking
around different pages to test if stuff was still working each time I made an update.&lt;/p&gt;
&lt;p&gt;This soon led to me thinking there must be a better way. Which brought
me to Test Driven Development (&lt;span class="caps"&gt;TDD&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;It should have just led me to writing tests, which it did. But googling
whatever I googled got me down the &lt;span class="caps"&gt;TDD&lt;/span&gt; rabbit hole rather than just the “write
some tests” rabbit hole. Write tests for your code before you write the code.
Write tests for bugs you’ve fixed to check they stay fixed. Write tests as a
kind of documentation to show what stuff is supposed to be doing. Errr…&lt;/p&gt;
&lt;p&gt;Django was a big enough pile of abstractions as it was. Views, ORMs, mixins,
serializers… Trying to add factories and fixtures into that took some getting
used to. But eventually I made some progress, and now I quite enjoy running
coverage reports to keep coverage &lt;em&gt;close&lt;/em&gt; to 100%&lt;sup id="sf-test-driven-development-1-back"&gt;&lt;a href="#sf-test-driven-development-1" class="simple-footnote" title="Which is fun and all, but testing for the sake of it doesn’t necessarily stop bad things happening. Its very possible to write a test that covers the code you’ve just written without ensuring that only the intended behaviours happen."&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Some of the main things I’ve learnt about writing tests:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use PyTest as much as possible rather than other testing libraries - its &lt;code&gt;assert&lt;/code&gt; statements are more intuitive than Django’s own testing framework, and you can use it in any Python codebase, not just Django. It has lots of extensions and seems good at getting the job done fairly easily.&lt;/li&gt;
&lt;li&gt;Write tests as you go. I haven’t (yet) reached the elevated level of writing
   tests before I write the code to be tested, though I see why that would
   sometimes be useful. I do think writing tests sooner rather than later is
   best though, ideally as soon as you’ve got a basic version of your feature working.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;Coverage&lt;/code&gt; to show you which code is covered by your tests, and which
   branches or edge cases are not. But be warned, it doesn’t tell you if the
   test is useful or not, only that it passes and which methods or functions it uses.&lt;/li&gt;
&lt;li&gt;Fixtures are great for keeping tests fairly &lt;span class="caps"&gt;DRY&lt;/span&gt;. &lt;code&gt;Freezegun&lt;/code&gt; is great for
   testing anything to do with dates and times. &lt;/li&gt;
&lt;li&gt;Static type checkers, like &lt;code&gt;Mypy&lt;/code&gt;, get more attractive in proportion to
   codebase complexity and size.&lt;/li&gt;
&lt;/ol&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-test-driven-development-1"&gt;Which is fun and all, but
testing for the sake of it doesn’t necessarily stop bad things happening. Its very possible to write a test that covers the code you’ve just
written without ensuring that &lt;em&gt;only&lt;/em&gt; the intended behaviours happen. &lt;a href="#sf-test-driven-development-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Developer Tools"></category></entry><entry><title>How To Design An API</title><link href="https://johnmathews.eu/api-design.html" rel="alternate"></link><published>2021-01-04T16:59:00+01:00</published><updated>2021-01-04T16:59:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-04:/api-design.html</id><summary type="html"></summary><content type="html">&lt;p&gt;Some super brief notes I made about &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;design:&lt;/p&gt;
&lt;h2 id="background"&gt;Background&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;#8217;s more of an art than a&amp;nbsp;science&lt;/li&gt;
&lt;li&gt;RESTful (REpresentational State Transfer) &lt;span class="caps"&gt;API&lt;/span&gt; design is an architectural&amp;nbsp;style.&lt;/li&gt;
&lt;li&gt;Alternative &lt;span class="caps"&gt;API&lt;/span&gt; architectures:&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;SOAP&lt;/span&gt; (Simple Object Access Protocol) is a heavier&amp;nbsp;style.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GraphQL&lt;/code&gt; - doesnt overfetch. Graph query language made by&amp;nbsp;Facebook.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;APIs are everywhere (not just web APIs). They&amp;#8217;re an &lt;a href="https://johnmathews.eu/principles-of-oop.html#2-abstraction"&gt;abstraction&lt;/a&gt; that hides an implementation. &lt;code&gt;Django&lt;/code&gt; model managers are an &lt;span class="caps"&gt;API&lt;/span&gt; (and also part of Django&amp;#8217;s &lt;span class="caps"&gt;ORM&lt;/span&gt;), JavaScript is an &lt;span class="caps"&gt;API&lt;/span&gt;,&amp;nbsp;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="restful-apis"&gt;RESTful&amp;nbsp;APIs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Web APIs (all &lt;span class="caps"&gt;REST&lt;/span&gt; APIs?) expose a databases to&amp;nbsp;clients&lt;/li&gt;
&lt;li&gt;A rest api is a &lt;span class="caps"&gt;URL&lt;/span&gt; route (endpoint) that returns &lt;span class="caps"&gt;JSON&lt;/span&gt; or &lt;span class="caps"&gt;XML&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;POST&lt;/span&gt;, &lt;span class="caps"&gt;GET&lt;/span&gt;, &lt;span class="caps"&gt;PUT&lt;/span&gt;, &lt;span class="caps"&gt;PATCH&lt;/span&gt;, &lt;span class="caps"&gt;DELETE&lt;/span&gt;, corresponds to Create, Read, Update/Replace, Update/Modify, Delete (&lt;span class="caps"&gt;HTTP&lt;/span&gt; methods correspond to &lt;span class="caps"&gt;CRUD&lt;/span&gt;&amp;nbsp;methods)&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;METHODS&lt;/span&gt;:&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;PUT&lt;/span&gt; (create or update) is idempotent, &lt;span class="caps"&gt;POST&lt;/span&gt; is not idempotent (keep on creating,&amp;nbsp;updating)&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;PATCH&lt;/span&gt; - partial&amp;nbsp;update&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;GET&lt;/span&gt;, &lt;span class="caps"&gt;HEAD&lt;/span&gt;, &lt;span class="caps"&gt;OPTIONS&lt;/span&gt; and &lt;span class="caps"&gt;TRACE&lt;/span&gt; methods are idempotent cos they are only designed for retrieving&amp;nbsp;data.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;DELETE&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;HEAD&lt;/span&gt; - almost identical to &lt;span class="caps"&gt;GET&lt;/span&gt;, but without any body. Good for checking what a request would return, i.e. Before downloading a large amount of&amp;nbsp;data, &lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;OPTIONS&lt;/span&gt; - returns data describing what other methods and operations the server supports at the given &lt;span class="caps"&gt;URL&lt;/span&gt;. More loosely defined than other&amp;nbsp;verbs. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="qualitative-advice"&gt;Qualitative&amp;nbsp;Advice&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;span class="caps"&gt;HTTP&lt;/span&gt; verbs to make requests more&amp;nbsp;meaningful&lt;/li&gt;
&lt;li&gt;Use sensible resource names. Naming things is hard, so think about this a bit
    before starting.&lt;ul&gt;
&lt;li&gt;Use identifiers in your URLs, not the query string.&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Good&lt;/strong&gt;: &lt;code&gt;/users/12345&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Poor&lt;/strong&gt;: &lt;code&gt;/api?type=user&amp;amp;id=23&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use the hierarchical structure of the &lt;span class="caps"&gt;URL&lt;/span&gt; to imply the structure of the &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Design (names and structure of things) for the user/client, not for the database.&lt;ul&gt;
&lt;li&gt;Resource names should be nouns not&amp;nbsp;verbs&lt;/li&gt;
&lt;li&gt;Use plurals consistently, not collection verbiage. Good: customers/123 Bad:&amp;nbsp;customer_list/123&lt;/li&gt;
&lt;li&gt;Use&amp;nbsp;case-insensitivity.&lt;/li&gt;
&lt;li&gt;Use camel case or snake case&amp;nbsp;consistency&lt;/li&gt;
&lt;li&gt;Short is better than long, but be&amp;nbsp;clear&lt;/li&gt;
&lt;li&gt;Spend time on design before writing&amp;nbsp;code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use &lt;span class="caps"&gt;HTTP&lt;/span&gt; response codes to indicate&amp;nbsp;status&lt;/li&gt;
&lt;li&gt;Prefer &lt;span class="caps"&gt;JSON&lt;/span&gt; over &lt;span class="caps"&gt;XML&lt;/span&gt;. (Hotline does &lt;span class="caps"&gt;HTML&lt;/span&gt;..)&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;XML&lt;/span&gt; requires schemas for validation and namespaces. Don’t support this complexity at the beginning (or ever) unless required. If it is required, make the &lt;span class="caps"&gt;XML&lt;/span&gt; as similar to &lt;span class="caps"&gt;JSON&lt;/span&gt; as&amp;nbsp;possible.&lt;/li&gt;
&lt;li&gt;Put links in the &lt;span class="caps"&gt;HTTP&lt;/span&gt; link header, or use a &lt;span class="caps"&gt;JSON&lt;/span&gt; representation of&amp;nbsp;this.&lt;/li&gt;
&lt;li&gt;Use the &lt;span class="caps"&gt;HTTP&lt;/span&gt; location header to contain a link on resource creation, or for &lt;span class="caps"&gt;GET&lt;/span&gt; with pagination, use first, last, next,&amp;nbsp;prev.&lt;/li&gt;
&lt;li&gt;Connectedness - return links in the response which link to useful resources. At minimum, a link to show how the data was received, or&amp;nbsp;posted.&lt;/li&gt;
&lt;li&gt;Idempotence - clients making the same repeated requests create the same result on the server side. I.e. making repeated requests has the same result as making a similar request, server side. On the client side, a response code may change, of&amp;nbsp;course. &lt;/li&gt;
&lt;/ul&gt;</content><category term="Technical/Developer Tools"></category></entry><entry><title>Principles Of Object Orientated Programming</title><link href="https://johnmathews.eu/principles-of-oop.html" rel="alternate"></link><published>2021-01-04T16:27:00+01:00</published><updated>2021-01-04T16:27:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-04:/principles-of-oop.html</id><summary type="html"></summary><content type="html">&lt;p&gt;I recently interviewed for a lead developer role at &lt;a href="https://labdigital.nl/en/"&gt;Lab Digital&lt;/a&gt;&lt;sup id="sf-principles-of-oop-1-back"&gt;&lt;a href="#sf-principles-of-oop-1" class="simple-footnote" title="Unfortunately, I didn’t get the job. They wanted a senior Python developer with experience with Infrastructure As Code, and also working at an agency. Can’t win them all."&gt;1&lt;/a&gt;&lt;/sup&gt; and thought it would be sensible to review some of the fundamental aspects of Object Orientated Programming (&lt;span class="caps"&gt;OOP&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;You might think that’s a unusual way to prepare for an interview, and you’d be right. Nothing close to these notes arose during the interview, but I find this stuff interesting. If I’m motivated enough to study it, then I think that’s a good enough reason by itself, without a specific reason. These are some brief notes.&lt;/p&gt;
&lt;p&gt;Object Orientated Programming has four key aspects:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Encapsulation (Hiding information)&lt;/li&gt;
&lt;li&gt;Abstraction (Hiding the implementation)&lt;/li&gt;
&lt;li&gt;Inheritance&lt;/li&gt;
&lt;li&gt;Polymorphism&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="1-encapsulation"&gt;1. Encapsulation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Each object keeps its state private, inside a class.&lt;/li&gt;
&lt;li&gt;Instance variables/properties/attributes are kept private and accessor methods are made public.&lt;/li&gt;
&lt;li&gt;Other objects don’t have direct access to this state. They can only call a list of public functions (methods).&lt;/li&gt;
&lt;li&gt;The object manages its own state via methods, no other class can touch it unless explicitly (not default) allowed.&lt;/li&gt;
&lt;li&gt;Private variables.&lt;/li&gt;
&lt;li&gt;Public methods.&lt;/li&gt;
&lt;li&gt;You can define classes within classes, and functions within functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2-abstraction"&gt;2. Abstraction&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A natural extension of encapsulation&lt;/li&gt;
&lt;li&gt;A concept or idea that is not associated with any particular instance.&lt;/li&gt;
&lt;li&gt;Expresses the intent of the class, rather than a specific implementation.&lt;/li&gt;
&lt;li&gt;Programs are often extremely large and separate objects communicate with each other a lot. This makes maintaining large programs difficult, and abstraction tries to solve this.&lt;/li&gt;
&lt;li&gt;Applying abstraction means that each object should only expose a high-level mechanism for using it.&lt;ul&gt;
&lt;li&gt;This mechanism should hide internal implementation details. It should only reveal operations relevant for the other objects.&lt;/li&gt;
&lt;li&gt;This mechanism should be easy to use and should rarely change over time. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implementation changes — for example, a software update — rarely affect the abstraction you use.&lt;/li&gt;
&lt;li&gt;e.g. a coffee machine. It does a lot of stuff and makes quirky noises under the hood. But all you have to do is put in coffee and press a button.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="3-inheritance"&gt;3. Inheritance&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;span class="caps"&gt;OOP&lt;/span&gt;, objects are often similar, sharing similar logic. But they are not 100% the same.&lt;/li&gt;
&lt;li&gt;Create a (child) class by deriving from another (parent) class. This way, we form a hierarchy.&lt;/li&gt;
&lt;li&gt;child class reuses all fields and methods of the parent class (common part) and can implement its own unique part using method or attribute overloading.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="4-polymorphism"&gt;4. Polymorphism&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Gives a way to use a class exactly like its parent so there’s no confusion with mixing types. But each child class keeps its own methods as they are.&lt;/li&gt;
&lt;li&gt;This typically happens by defining a (parent) interface to be reused. It outlines a bunch of common methods. Then, each child class implements its own version of these methods.&lt;/li&gt;
&lt;li&gt;Any time a collection (such as a list) or a method expects an instance of the parent (where common methods are outlined), the language takes care of evaluating the right implementation of the common method — regardless of which child is passed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’d like to be so familiar with the following features that I can use them without referring to notes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Getters and setters.&lt;/li&gt;
&lt;li&gt;Instance methods compared to class methods.&lt;/li&gt;
&lt;li&gt;Inheritance, mixins, and decorators.&lt;/li&gt;
&lt;li&gt;The “magic” within the &lt;code&gt;Django&lt;/code&gt; source code that requires &lt;code&gt;mypy&lt;/code&gt; to use extensions in order to do its static type checking correctly.&lt;/li&gt;
&lt;/ol&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-principles-of-oop-1"&gt;Unfortunately, I didn’t get the job. They wanted a senior Python developer with experience with &lt;code&gt;Infrastructure As Code&lt;/code&gt;, and also working at an agency. Can’t win them all. &lt;a href="#sf-principles-of-oop-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="Technical/Developer Tools"></category></entry><entry><title>Using Unix Utilities To Analyse And Update Multiple Text Files</title><link href="https://johnmathews.eu/using-unix-utilities-to-analyse-and-update-multiple-files.html" rel="alternate"></link><published>2021-01-04T13:02:00+01:00</published><updated>2021-01-04T13:02:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2021-01-04:/using-unix-utilities-to-analyse-and-update-multiple-files.html</id><summary type="html"></summary><content type="html">&lt;p&gt;As part of the redesign of this blog I wanted to make an article&amp;#8217;s category more meaningful. Previously, I simply picked a handful of categories and then assigned a single category to each post. This method becomes limiting when an article is relevant to multiple&amp;nbsp;categories.&lt;/p&gt;
&lt;p&gt;Also, using nested categories seems like a good way of grouping similar content and allowing more nuanced filtering of&amp;nbsp;interests.&lt;/p&gt;
&lt;p&gt;As I considered how to update the categories of existing articles, I realised this would be a good opportunity to practice analyzing and updating text files using unix&amp;nbsp;utilities.&lt;/p&gt;
&lt;p&gt;Here is how I reviewed and updated the categories of my existing&amp;nbsp;articles:&lt;/p&gt;
&lt;p&gt;I use Pelican to generate the static files for this site. It converts markdown into &lt;span class="caps"&gt;HTML&lt;/span&gt;. Metadata for each article is set at the beginning of a file, the title is set by typing &lt;code&gt;Title: ...&lt;/code&gt; and similarly the category is set by typing &lt;code&gt;Category: ...&lt;/code&gt; on its own&amp;nbsp;line.&lt;/p&gt;
&lt;p&gt;To locate, analyse and update my existing categories, I would therefore need to
find all the markdown files which have a row that begins with &lt;code&gt;Category:&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grep -h ‘Category:’ **/*.md&lt;/code&gt; - prints each search&amp;nbsp;result. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;grep -h ‘Category:’ **/*.md | sort&lt;/code&gt; - prints and sorts each search&amp;nbsp;result.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grep -h ‘Category:’ **/*.md | sort | uniq -c&lt;/code&gt; prints and sorts each search
result, then counts how many occurrences of each unique result there&amp;nbsp;are.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I had some repeat results though because some rows had white space at the end,
so in order to make these the same, I needed to remove trailing&amp;nbsp;whitespace:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grep -h 'Category:' **/*.md | sed 's/[[:space:]]//g' | sort | uniq -c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This gave me the following&amp;nbsp;results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt; Category:
&lt;span class="m"&gt;2&lt;/span&gt; Category:Data
&lt;span class="m"&gt;16&lt;/span&gt; Category:Disintermediation
&lt;span class="m"&gt;2&lt;/span&gt; Category:Engineering
&lt;span class="m"&gt;2&lt;/span&gt; Category:Front-end
&lt;span class="m"&gt;15&lt;/span&gt; Category:General
&lt;span class="m"&gt;15&lt;/span&gt; Category:Startups
&lt;span class="m"&gt;8&lt;/span&gt; Category:Tools
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Category is repeated and isn&amp;#8217;t&amp;nbsp;needed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grep -h 'Category:' **/*.md | sed 's/[[:space:]]//g' | sort | uniq -c | sort |
sed 's/Category://g'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This gives me the following output, which is&amp;nbsp;acceptable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; Data
&lt;span class="m"&gt;2&lt;/span&gt; Engineering
&lt;span class="m"&gt;2&lt;/span&gt; Front-end
&lt;span class="m"&gt;6&lt;/span&gt;
&lt;span class="m"&gt;8&lt;/span&gt; Tools
&lt;span class="m"&gt;15&lt;/span&gt; General
&lt;span class="m"&gt;15&lt;/span&gt; Startups
&lt;span class="m"&gt;16&lt;/span&gt; Disintermediation
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="new-categories"&gt;New&amp;nbsp;Categories&lt;/h2&gt;
&lt;p&gt;The next stage was to begin updating these categories with the new, nested
categories. I&amp;#8217;ve decided to try splitting the categories into technical and
non-technical&amp;nbsp;groups.&lt;/p&gt;
&lt;p&gt;I can imagine splitting &lt;code&gt;Technical &amp;gt; Data&lt;/code&gt; even more in
future, perhaps having &lt;code&gt;Data Analytics&lt;/code&gt;, &lt;code&gt;Data Science&lt;/code&gt;, and &lt;code&gt;Data Engineering&lt;/code&gt; as
sub&amp;nbsp;categories.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Technical&lt;ul&gt;
&lt;li&gt;Data&lt;/li&gt;
&lt;li&gt;Developer&amp;nbsp;Tools&lt;/li&gt;
&lt;li&gt;Web&lt;/li&gt;
&lt;li&gt;Cryptocurrency&lt;/li&gt;
&lt;li&gt;Civil&amp;nbsp;Engineering&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Not technical&lt;ul&gt;
&lt;li&gt;Entrepreneurship&lt;/li&gt;
&lt;li&gt;Family&lt;/li&gt;
&lt;li&gt;Self&lt;/li&gt;
&lt;li&gt;Career&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I &lt;code&gt;cd&lt;/code&gt; into the directory containing the markdown files, and then to change
all the articles with &lt;code&gt;Category: Tools&lt;/code&gt; to &lt;code&gt;Category: Technical/Developer
Tools&lt;/code&gt; I&amp;nbsp;did:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grep -l 'Category: Tools' *.md | xargs sed -i 's/Category: Tools/Category:
    Technical\/Developer Tools/g&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If I want to see a list of files containing &lt;code&gt;Category: General&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grep -H 'Category: General' *.md&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If I want to see just the file names,&amp;nbsp;then:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grep -l 'Category: General' *.md&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Technical/Developer Tools"></category></entry><entry><title>A faster shell</title><link href="https://johnmathews.eu/shell.html" rel="alternate"></link><published>2019-02-14T11:32:00+01:00</published><updated>2019-02-14T11:32:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2019-02-14:/shell.html</id><summary type="html">&lt;p&gt;zsh was loading significantly slower than bash, so I used profiling to see what was slowing things&amp;nbsp;down&lt;/p&gt;</summary><content type="html">&lt;p&gt;Opening up a new shell was annoyingly slow. Not terrible, but enough to notice. Its a&amp;nbsp;niggle.&lt;/p&gt;
&lt;p&gt;I wanted to find out which components were causing the most delay, so I used
&lt;code&gt;time&lt;/code&gt; to measure how long it took to launch a shell. Even though shells
might appear to be part of the low level &amp;#8216;guts&amp;#8217; of a computer, each shell is
just an executable and can be treated as&amp;nbsp;such.&lt;/p&gt;
&lt;p&gt;To measure the startup speed of your shell,&amp;nbsp;do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="k"&gt;$(&lt;/span&gt;seq &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; /usr/bin/time &lt;span class="nv"&gt;$SHELL&lt;/span&gt; -i -c exit&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="zsh profile" src="https://johnmathews.eu/images/zsh_startup_speed.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This shows that it takes 0.84 seconds to start &lt;code&gt;zsh&lt;/code&gt; - not terrible, but not&amp;nbsp;great:&lt;/p&gt;
&lt;p&gt;You can compare the performance of different shells by replacing &lt;code&gt;$SHELL&lt;/code&gt; with
&lt;code&gt;zsh&lt;/code&gt;, &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;fish&lt;/code&gt; etc.&lt;/p&gt;
&lt;p&gt;Here are the results if I used &lt;code&gt;BASH&lt;/code&gt; instead of &lt;code&gt;zsh&lt;/code&gt; - 9.3x faster! (but
without useful tools and plugins):
&lt;img alt="bash profile" src="https://johnmathews.eu/images/bash_startup_speed.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Now that I can measure how long it takes to start, it would be useful to know
which proccesses are causing the greatest delays. This could be done with
something like &lt;code&gt;zsh -xv&lt;/code&gt; which enables verbose output and xtrace. This creates
a tonne of output, but doesnt inlcude timestamps. All I really want is
a summary of how much time each subproccess required to run, i.e. an order blind&amp;nbsp;profiler.&lt;/p&gt;
&lt;p&gt;Add &lt;code&gt;zmodload zsh/zprof&lt;/code&gt; at the start of &lt;code&gt;.zshrc&lt;/code&gt; and &lt;code&gt;zprof&lt;/code&gt; at the very end.
Now when I start &lt;code&gt;zsh&lt;/code&gt; I see the&amp;nbsp;following:&lt;/p&gt;
&lt;p&gt;&lt;img alt="zsh startup components" src="https://johnmathews.eu/images/zsh_order_blind_profiling.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Next steps - make virtualenvwrapper run faster, or asyncronously, or
not at&amp;nbsp;all&amp;#8230;&lt;/p&gt;
&lt;p&gt;Update:
&lt;code&gt;virtualenvwrapper&lt;/code&gt; is the biggest cause of slow loading. Using the &lt;a href="https://virtualenvwrapper.readthedocs.io/en/latest/install.html"&gt;lazy
loading&lt;/a&gt; option decreased loading time by&amp;nbsp;0.3s&lt;/p&gt;
&lt;p&gt;&lt;img alt="zsh profile" src="https://johnmathews.eu/images/zsh_startup_speed_lazy_load.jpg"&gt;&lt;/p&gt;</content><category term="Technical/Developer Tools"></category><category term="shell"></category><category term="unix"></category><category term="zsh"></category><category term="bash"></category><category term="profiling"></category></entry><entry><title>Ry’s Git Tutorial</title><link href="https://johnmathews.eu/rys-git-tutorial.html" rel="alternate"></link><published>2018-06-01T17:11:00+02:00</published><updated>2018-06-01T17:11:00+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2018-06-01:/rys-git-tutorial.html</id><summary type="html">&lt;p&gt;Ry&amp;#8217;s Git Tutorial is a great way to learn Git. Learn by doing as you create and maintain a simple&amp;nbsp;website.&lt;/p&gt;</summary><content type="html">&lt;p&gt;For tracking changes to a collection of files, Git is the ubiquitous solution. It&amp;#8217;s free, robust, comprehensive, and there is a plethora of resources that are easy to&amp;nbsp;find.&lt;/p&gt;
&lt;p&gt;I usually find the commands difficult to remember though, and the concepts which Git is built on often seem counter-intuitive to me. This means I spend a lot of time searching for answers and trying to remember how I can use Git to experiment with a project without fear of losing any hard won&amp;nbsp;progress.&lt;/p&gt;
&lt;p&gt;Ry&amp;#8217;s Git Tutorial by Ryan Hodson is the best way to learn Git that I have come across. Its simple, practical, and clear. The reader learns how to use Git yy creating and maintaining a simple website. This gives the Git commands a meaningful context, which makes them a lot easier to remember and use in the&amp;nbsp;future.&lt;/p&gt;
&lt;p&gt;The tutorial was first published in 2012 and the website which originally hosted the examples no longer exists. Each tutorial chapter starts with a link to download the project files up to that point, so the reader doesn&amp;#8217;t need to start at the beginning but can jump into any part of the guide. Unfortunately these links are dead&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;Therefore I&amp;#8217;m hosting the tutorial here so that it continues to be useful. If the author would like to get in touch, please do. I&amp;#8217;d like to keep this great resource available so that others can benefit from&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Download the .epub file &lt;a href="https://johnmathews.eu/Ry’s Git Tutorial.epub"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Download the example files for each module&amp;nbsp;below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter2.zip"&gt;Chapter 2: Undoing&amp;nbsp;Changes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter3.zip"&gt;Chapter 3: Branches&amp;nbsp;I&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter4.zip"&gt;Chapter 4: Branches &lt;span class="caps"&gt;II&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter5.zip"&gt;Chapter 5:&amp;nbsp;Rebasing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter6.zip"&gt;Chapter 6: Rewriting&amp;nbsp;History&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter7.zip"&gt;Chapter 7:&amp;nbsp;Remotes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter8.zip"&gt;Chapter 8: Centralized&amp;nbsp;Workflows&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter9.zip"&gt;Chapter 9: Distributed&amp;nbsp;Workflows&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter10.zip"&gt;Chapter 10: Patch&amp;nbsp;Workflows&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter11.zip"&gt;Chapter 11: Tips &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;Tricks&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter12.zip"&gt;Chapter 12:&amp;nbsp;Plumbing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://johnmathews.eu/chapter13.zip"&gt;end&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Technical/Developer Tools"></category><category term="Git"></category><category term="Rys"></category><category term="Tutorial"></category><category term="Ryan Hodson"></category></entry><entry><title>Vim!</title><link href="https://johnmathews.eu/vim.html" rel="alternate"></link><published>2016-12-01T22:32:00+01:00</published><updated>2016-12-01T22:32:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2016-12-01:/vim.html</id><summary type="html"></summary><content type="html">&lt;p&gt;Vim is a text editor renowned for its efficiency and its use of keyboard shortcuts. It&amp;#8217;s based on the Vi text editor from the 1970&amp;#8217;s. It was first released in 1991 and is still being developed today. It comes pre-installed on Unix systems (including MacOS) and can be run from the&amp;nbsp;terminal.&lt;/p&gt;
&lt;p&gt;Vim is famous in another way too - for being difficult to learn. I found some good and remarkably creative tools to begin learning its concepts and controls. This was necessary because there is no &lt;span class="caps"&gt;GUI&lt;/span&gt;. There is a &lt;em&gt;game&lt;/em&gt; &lt;a href="http://vim-adventures.com/"&gt;here&lt;/a&gt;, and there is &lt;a href="http://www.openvim.com/"&gt;this interactive tutorial&lt;/a&gt;. There&amp;#8217;s also a built-in vim tutorial - just type &amp;#8216;vimtutor&amp;#8217; into&amp;nbsp;Terminal.&lt;/p&gt;
&lt;p&gt;Vim is designed so that you don&amp;#8217;t need to take your hands off your keyboard and use a mouse. It has the &amp;#8216;insert&amp;#8217; mode where you enter text as usual, and the &amp;#8216;command&amp;#8217; mode where you can make use of a comprehensive and flexible shortcut language to move around, edit and search the text. With no &lt;span class="caps"&gt;GUI&lt;/span&gt; or toolbar, it&amp;#8217;s a very different approach to text editing than I&amp;#8217;m used&amp;nbsp;to.&lt;/p&gt;
&lt;p&gt;You can run Vim from the terminal, but there are also versions that run as apps. MacVim on MacOS has the option to show a tool bar of simple commands like a normal program, and lets the arrow keys move the cursor in addition to &lt;span class="caps"&gt;VIM&lt;/span&gt;&amp;#8217;s &amp;#8216;hjkl&amp;#8217; functionality. This makes getting started a little&amp;nbsp;simpler.&lt;/p&gt;
&lt;p&gt;There are also a lot of plugins to extend Vim&amp;#8217;s functionality and turn it from a text editor into an &lt;span class="caps"&gt;IDE&lt;/span&gt;. &lt;a href="https://realpython.com/blog/python/vim-and-python-a-match-made-in-heaven/"&gt;This post&lt;/a&gt; walks you through setting up Vim as a Python &lt;span class="caps"&gt;IDE&lt;/span&gt; and explains how to manage various&amp;nbsp;add-ons.&lt;/p&gt;
&lt;p&gt;I recommend Daniel Mieslers &lt;a href="https://danielmiessler.com/study/vim/"&gt;blog post&lt;/a&gt; for a quick overview of how to use&amp;nbsp;Vim.&lt;/p&gt;</content><category term="Technical/Developer Tools"></category><category term="Vim"></category></entry><entry><title>Autumn, BIN and $PATH</title><link href="https://johnmathews.eu/autumn-bin-and-path.html" rel="alternate"></link><published>2016-12-01T21:53:00+01:00</published><updated>2016-12-01T21:53:00+01:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2016-12-01:/autumn-bin-and-path.html</id><summary type="html"></summary><content type="html">&lt;p&gt;Two small things have been learnt recently: the importance of &lt;span class="caps"&gt;PATH&lt;/span&gt; and
the contents of various &lt;span class="caps"&gt;BIN&lt;/span&gt;&amp;nbsp;folders.&lt;/p&gt;
&lt;p&gt;Autumn 2016 has not gone as planned. Whilst studying for a couple of
exams plans were put on hold and hobbies were ceased. Now that life is
returning to normal, I have opportunity to post&amp;nbsp;again.&lt;/p&gt;
&lt;h2 id="path"&gt;&lt;span class="caps"&gt;PATH&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;html&gt;&amp;#36;&lt;/html&gt;&lt;span class="caps"&gt;PATH&lt;/span&gt; is a variable (string) which contains a series of folder
locations separated by &amp;#8220;:&amp;#8221;. Each of these folders contains programmes.
When you type the name of a programme into terminal without specifying
its location, the &lt;span class="caps"&gt;OS&lt;/span&gt; looks sequentially in each of the folder locations
listed in &lt;html&gt;&amp;#36;&lt;/html&gt;&lt;span class="caps"&gt;PATH&lt;/span&gt; to see if the programme is there, and then executes&amp;nbsp;it.&lt;/p&gt;
&lt;h2 id="bin"&gt;&lt;span class="caps"&gt;BIN&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Bin as in Binary, not Bin as in&amp;nbsp;Trash.&lt;/p&gt;
&lt;p&gt;The bin folders contain binary files, which are programmes ready to be&amp;nbsp;run.&lt;/p&gt;
&lt;p&gt;If I run &amp;#8220;echo &lt;html&gt;&amp;#36;&lt;/html&gt;&lt;span class="caps"&gt;PATH&lt;/span&gt;&amp;#8221; from the Terminal, I see 9 folders called bin,
and its only by convention that they contain binaries. They are just
normal folders, which the &lt;span class="caps"&gt;OS&lt;/span&gt; is set to look in when asked to run an&amp;nbsp;application.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;/Users/John/anaconda3/bin:/Library/Frameworks/Python.framework/Versions/&lt;/span&gt;
&lt;span class="err"&gt;3.5/bin:/Users/John/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/&lt;/span&gt;
&lt;span class="err"&gt;Library/TeX/texbin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Technical/Developer Tools"></category><category term="Unix"></category></entry><entry><title>Jupyter (iPython) notebooks + Pandas</title><link href="https://johnmathews.eu/Jupyter-ipython-notebooks-pandas.html" rel="alternate"></link><published>2016-08-03T13:04:00+02:00</published><updated>2016-08-03T13:04:00+02:00</updated><author><name>John Mathews</name></author><id>tag:johnmathews.eu,2016-08-03:/Jupyter-ipython-notebooks-pandas.html</id><summary type="html"></summary><content type="html">&lt;p&gt;When working with more data than can fit in an Excel file, or when you
want to be sure the data won&amp;#8217;t be edited, you usually need to interact with
the data by writing&amp;nbsp;scripts.&lt;/p&gt;
&lt;p&gt;One of the biggest time sinks (for me) when working with these tools
(&lt;span class="caps"&gt;ACL&lt;/span&gt;, &lt;span class="caps"&gt;SQL&lt;/span&gt;, Python) is debugging, and working out exactly where in the
chain of individual commands something unexpected happened. Even with
only a modest page of code, I can quickly find myself rerunning the
entire script multiple times and commenting-out and uncommenting
multiple lines in order to understand what&amp;#8217;s really going on. If you
have a time consuming task at the start of your script, such as a
summarise and sort command, the extra time required can be even greater.
This leads to interrupted flow and&amp;nbsp;concentration.&lt;/p&gt;
&lt;p&gt;Pandas is a python package to manipulate large datasets, the Jupyter
notebook is an application which allows the user to run a python script
in chunks, and output the results of each chunk before continuing. You
can re-run a previous chunk without returning to the beginning, and
change the code as you go along. This is amazingly flexible and&amp;nbsp;intuitive.&lt;/p&gt;
&lt;p&gt;I recently worked through an exceptionally good Pandas tutorial recorded
at PyCon 2015. &amp;#8220;&lt;a href="https://youtu.be/5JnMutdy6Fw"&gt;Pandas from the ground
up&lt;/a&gt;&amp;#8221; is well structured, clear, has good
scope and the resources are available to download from
&lt;a href="https://github.com/brandon-rhodes/pycon-pandas-tutorial"&gt;github&lt;/a&gt;.
Brandon Rhodes gives you a good working foundation for using Pandas and
the Jupyter notebook to manipulate datasets using&amp;nbsp;Python.&lt;/p&gt;</content><category term="Technical/Developer Tools"></category><category term="Data"></category><category term="Jupyter Notebook"></category><category term="Pandas"></category><category term="Python"></category></entry></feed>